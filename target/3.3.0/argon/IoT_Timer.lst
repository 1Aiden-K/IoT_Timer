
c:/Users/aiden/Desktop/IoT-Engineering/CapstoneProject/IoT_Timer/target/3.3.0/argon/IoT_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fb4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7fd0  000b7fd0  00007fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b7ff4  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e554  000b7ff8  0001e554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000230  2003e5c0  2003e5c0  0002e5c0  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b8064  000b8064  00028064  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b808c  000b808c  0002808c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00143915  00000000  00000000  00028090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0001668c  00000000  00000000  0016b9a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    000420fd  00000000  00000000  00182031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00003100  00000000  00000000  001c412e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 0000adf0  00000000  00000000  001c722e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000420d2  00000000  00000000  001d201e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0004db29  00000000  00000000  002140f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013a315  00000000  00000000  00261c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  00008dd4  00000000  00000000  0039bf30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 ff85 	bl	b6f3c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 ff8d 	bl	b6f58 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e554 	.word	0x2003e554
   b4048:	000b7ff8 	.word	0x000b7ff8
   b404c:	2003e5c0 	.word	0x2003e5c0
   b4050:	2003e5c0 	.word	0x2003e5c0
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f001 ffa3 	bl	b5fa8 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7fa4 	.word	0x000b7fa4
   b407c:	000b7fc8 	.word	0x000b7fc8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b822 	b.w	b40c8 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f835 	bl	b40f4 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f001 bf43 	b.w	b5f18 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f001 bd0b 	b.w	b5aac <malloc>

000b4096 <_Znaj>:
   b4096:	f001 bd09 	b.w	b5aac <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f001 bd0f 	b.w	b5abc <free>
	...

000b40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   b40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   b40a2:	4a03      	ldr	r2, [pc, #12]	; (b40b0 <__cxa_pure_virtual+0x10>)
   b40a4:	4903      	ldr	r1, [pc, #12]	; (b40b4 <__cxa_pure_virtual+0x14>)
   b40a6:	200c      	movs	r0, #12
   b40a8:	f001 fc5c 	bl	b5964 <panic_>
  while (1);
   b40ac:	e7fe      	b.n	b40ac <__cxa_pure_virtual+0xc>
   b40ae:	bf00      	nop
   b40b0:	000b5665 	.word	0x000b5665
   b40b4:	000b70c8 	.word	0x000b70c8

000b40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b40b8:	7800      	ldrb	r0, [r0, #0]
   b40ba:	fab0 f080 	clz	r0, r0
   b40be:	0940      	lsrs	r0, r0, #5
   b40c0:	4770      	bx	lr

000b40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40c2:	2301      	movs	r3, #1
   b40c4:	7003      	strb	r3, [r0, #0]
   b40c6:	4770      	bx	lr

000b40c8 <setup>:
    buzz = 0;
  }
}*/

void setup()
{
   b40c8:	b508      	push	{r3, lr}
  //Blynk.begin("AgpJ0l5zuN9rrmXhaTP0SSHYthleTkPV", IPAddress(167, 172, 234, 162), 8080);

  pinMode(BUZZER, OUTPUT);
   b40ca:	2101      	movs	r1, #1
   b40cc:	2005      	movs	r0, #5
   b40ce:	f002 fd63 	bl	b6b98 <pinMode>

  display.setup();
   b40d2:	4807      	ldr	r0, [pc, #28]	; (b40f0 <setup+0x28>)
   b40d4:	f000 fd4a 	bl	b4b6c <_ZN16OledWingAdafruit5setupEv>
  display.setTextSize(1);
   b40d8:	4805      	ldr	r0, [pc, #20]	; (b40f0 <setup+0x28>)
   b40da:	2101      	movs	r1, #1
   b40dc:	f000 fcf7 	bl	b4ace <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
   b40e0:	4803      	ldr	r0, [pc, #12]	; (b40f0 <setup+0x28>)
   b40e2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
   b40e6:	6143      	str	r3, [r0, #20]
  display.setTextColor(WHITE);
  display.display();
}
   b40e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  display.display();
   b40ec:	f001 b9d8 	b.w	b54a0 <_ZN16Adafruit_SSD13067displayEv>
   b40f0:	2003e62c 	.word	0x2003e62c

000b40f4 <loop>:

void loop()
{
   b40f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  display.loop();
   b40f6:	4843      	ldr	r0, [pc, #268]	; (b4204 <loop+0x110>)
   b40f8:	4d42      	ldr	r5, [pc, #264]	; (b4204 <loop+0x110>)
   b40fa:	4c43      	ldr	r4, [pc, #268]	; (b4208 <loop+0x114>)
   b40fc:	f000 fd5f 	bl	b4bbe <_ZN16OledWingAdafruit4loopEv>
  //Blynk.run();

  if (display.pressedA())
   b4100:	4840      	ldr	r0, [pc, #256]	; (b4204 <loop+0x110>)
   b4102:	f000 fd75 	bl	b4bf0 <_ZN16OledWingAdafruit8pressedAEv>
   b4106:	2800      	cmp	r0, #0
   b4108:	d063      	beq.n	b41d2 <loop+0xde>
  {
    timer = timer + 6000;
   b410a:	6823      	ldr	r3, [r4, #0]
   b410c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
   b4110:	3310      	adds	r3, #16
    timer = timer + 300000;
    buzz = 1;
  }
  else if (display.pressedC())
  {
    timer = timer + 600000;
   b4112:	6023      	str	r3, [r4, #0]
    buzz = 1;
   b4114:	4b3d      	ldr	r3, [pc, #244]	; (b420c <loop+0x118>)
   b4116:	2201      	movs	r2, #1
   b4118:	601a      	str	r2, [r3, #0]
  }

  time0 = time1;
   b411a:	4f3d      	ldr	r7, [pc, #244]	; (b4210 <loop+0x11c>)
   b411c:	4e3d      	ldr	r6, [pc, #244]	; (b4214 <loop+0x120>)
   b411e:	683b      	ldr	r3, [r7, #0]
   b4120:	6033      	str	r3, [r6, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4122:	f001 faa7 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
  time1 = millis();
  time2 = time1 - time0;
   b4126:	6833      	ldr	r3, [r6, #0]
  time1 = millis();
   b4128:	6038      	str	r0, [r7, #0]
  time2 = time1 - time0;
   b412a:	1ac0      	subs	r0, r0, r3
   b412c:	4b3a      	ldr	r3, [pc, #232]	; (b4218 <loop+0x124>)
   b412e:	6018      	str	r0, [r3, #0]

  timer = timer - time2;
   b4130:	6823      	ldr	r3, [r4, #0]
   b4132:	1a18      	subs	r0, r3, r0

  if (timer < 1)
   b4134:	2800      	cmp	r0, #0
  timer = timer - time2;
   b4136:	6020      	str	r0, [r4, #0]
  if (timer < 1)
   b4138:	dc0e      	bgt.n	b4158 <loop+0x64>
  {
    if (buzz == 1)
   b413a:	4e34      	ldr	r6, [pc, #208]	; (b420c <loop+0x118>)
   b413c:	6833      	ldr	r3, [r6, #0]
   b413e:	2b01      	cmp	r3, #1
   b4140:	d108      	bne.n	b4154 <loop+0x60>
    {
          tone(BUZZER, 1000, 3000);
   b4142:	f640 32b8 	movw	r2, #3000	; 0xbb8
   b4146:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   b414a:	2005      	movs	r0, #5
   b414c:	f002 f86c 	bl	b6228 <tone>
          buzz = 0;
   b4150:	2300      	movs	r3, #0
   b4152:	6033      	str	r3, [r6, #0]
    }

    timer = 0;
   b4154:	2300      	movs	r3, #0
   b4156:	6023      	str	r3, [r4, #0]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
   b4158:	2300      	movs	r3, #0
   b415a:	612b      	str	r3, [r5, #16]
  }

  display.setCursor(0, 0);
  display.clearDisplay();
   b415c:	4829      	ldr	r0, [pc, #164]	; (b4204 <loop+0x110>)

  time3 = int(timer) / 1000;
  time4 = time3 % 60;
   b415e:	4d2f      	ldr	r5, [pc, #188]	; (b421c <loop+0x128>)
  display.clearDisplay();
   b4160:	f000 ff30 	bl	b4fc4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  time3 = int(timer) / 1000;
   b4164:	6823      	ldr	r3, [r4, #0]
  time5 = floor(time3 / 60);
   b4166:	4c2e      	ldr	r4, [pc, #184]	; (b4220 <loop+0x12c>)
  display.println("Timer:");
   b4168:	4826      	ldr	r0, [pc, #152]	; (b4204 <loop+0x110>)
  time3 = int(timer) / 1000;
   b416a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b416e:	fb93 f3f2 	sdiv	r3, r3, r2
   b4172:	4a2c      	ldr	r2, [pc, #176]	; (b4224 <loop+0x130>)
  time4 = time3 % 60;
   b4174:	213c      	movs	r1, #60	; 0x3c
  time3 = int(timer) / 1000;
   b4176:	6013      	str	r3, [r2, #0]
  time4 = time3 % 60;
   b4178:	fb93 f2f1 	sdiv	r2, r3, r1
   b417c:	fb01 3312 	mls	r3, r1, r2, r3
  display.println("Timer:");
   b4180:	4929      	ldr	r1, [pc, #164]	; (b4228 <loop+0x134>)
  time5 = floor(time3 / 60);
   b4182:	6022      	str	r2, [r4, #0]
  time4 = time3 % 60;
   b4184:	602b      	str	r3, [r5, #0]
  display.println("Timer:");
   b4186:	f001 fe1a 	bl	b5dbe <_ZN5Print7printlnEPKc>
  display.print(time5);
   b418a:	6824      	ldr	r4, [r4, #0]
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   b418c:	2c00      	cmp	r4, #0
   b418e:	da35      	bge.n	b41fc <loop+0x108>
            t = print('-');
   b4190:	212d      	movs	r1, #45	; 0x2d
   b4192:	481c      	ldr	r0, [pc, #112]	; (b4204 <loop+0x110>)
   b4194:	f001 fe04 	bl	b5da0 <_ZN5Print5printEc>
            val = -n;
   b4198:	4261      	negs	r1, r4
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b419a:	220a      	movs	r2, #10
   b419c:	4819      	ldr	r0, [pc, #100]	; (b4204 <loop+0x110>)
   b419e:	f001 fe18 	bl	b5dd2 <_ZN5Print11printNumberEmh>
  display.print(":");
   b41a2:	4922      	ldr	r1, [pc, #136]	; (b422c <loop+0x138>)
   b41a4:	4817      	ldr	r0, [pc, #92]	; (b4204 <loop+0x110>)
   b41a6:	f001 fdf7 	bl	b5d98 <_ZN5Print5printEPKc>
  display.println(time4);
   b41aa:	682c      	ldr	r4, [r5, #0]
        if (n < 0 && base == 10) {
   b41ac:	2c00      	cmp	r4, #0
   b41ae:	da27      	bge.n	b4200 <loop+0x10c>
            t = print('-');
   b41b0:	212d      	movs	r1, #45	; 0x2d
   b41b2:	4814      	ldr	r0, [pc, #80]	; (b4204 <loop+0x110>)
   b41b4:	f001 fdf4 	bl	b5da0 <_ZN5Print5printEc>
            val = -n;
   b41b8:	4261      	negs	r1, r4
        return printNumber(val, base) + t;
   b41ba:	220a      	movs	r2, #10
   b41bc:	4811      	ldr	r0, [pc, #68]	; (b4204 <loop+0x110>)
   b41be:	f001 fe08 	bl	b5dd2 <_ZN5Print11printNumberEmh>
        n += println();
   b41c2:	4810      	ldr	r0, [pc, #64]	; (b4204 <loop+0x110>)
   b41c4:	f001 fdef 	bl	b5da6 <_ZN5Print7printlnEv>
  display.display();
   b41c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  display.display();
   b41cc:	480d      	ldr	r0, [pc, #52]	; (b4204 <loop+0x110>)
   b41ce:	f001 b967 	b.w	b54a0 <_ZN16Adafruit_SSD13067displayEv>
  else if (display.pressedB())
   b41d2:	4628      	mov	r0, r5
   b41d4:	f000 fd16 	bl	b4c04 <_ZN16OledWingAdafruit8pressedBEv>
   b41d8:	b128      	cbz	r0, b41e6 <loop+0xf2>
    timer = timer + 300000;
   b41da:	6823      	ldr	r3, [r4, #0]
   b41dc:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   b41e0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   b41e4:	e795      	b.n	b4112 <loop+0x1e>
  else if (display.pressedC())
   b41e6:	4628      	mov	r0, r5
   b41e8:	f000 fd16 	bl	b4c18 <_ZN16OledWingAdafruit8pressedCEv>
   b41ec:	2800      	cmp	r0, #0
   b41ee:	d094      	beq.n	b411a <loop+0x26>
    timer = timer + 600000;
   b41f0:	6823      	ldr	r3, [r4, #0]
   b41f2:	f503 2312 	add.w	r3, r3, #598016	; 0x92000
   b41f6:	f503 63f8 	add.w	r3, r3, #1984	; 0x7c0
   b41fa:	e78a      	b.n	b4112 <loop+0x1e>
            val = n;
   b41fc:	4621      	mov	r1, r4
   b41fe:	e7cc      	b.n	b419a <loop+0xa6>
   b4200:	4621      	mov	r1, r4
   b4202:	e7da      	b.n	b41ba <loop+0xc6>
   b4204:	2003e62c 	.word	0x2003e62c
   b4208:	2003e6b4 	.word	0x2003e6b4
   b420c:	2003e628 	.word	0x2003e628
   b4210:	2003e6a0 	.word	0x2003e6a0
   b4214:	2003e69c 	.word	0x2003e69c
   b4218:	2003e6a4 	.word	0x2003e6a4
   b421c:	2003e6ac 	.word	0x2003e6ac
   b4220:	2003e6b0 	.word	0x2003e6b0
   b4224:	2003e6a8 	.word	0x2003e6a8
   b4228:	000b70dd 	.word	0x000b70dd
   b422c:	000b70e2 	.word	0x000b70e2

000b4230 <_GLOBAL__sub_I_Blynk>:
   b4230:	b538      	push	{r3, r4, r5, lr}

class BlynkTransportParticle
{
public:
    BlynkTransportParticle()
        : domain(NULL), port(0)
   b4232:	4d13      	ldr	r5, [pc, #76]	; (b4280 <_GLOBAL__sub_I_Blynk+0x50>)
   b4234:	4628      	mov	r0, r5
   b4236:	f002 fb6d 	bl	b6914 <_ZN9TCPClientC1Ev>
   b423a:	f105 001c 	add.w	r0, r5, #28
   b423e:	f001 ff1f 	bl	b6080 <_ZN9IPAddressC1Ev>
        , lastActivityOut(0)
        , lastHeartbeat(0)
        , msgIdOut(0)
        , msgIdOutOverride(0)
        , nesting(0)
        , state(CONNECTING)
   b4242:	4b10      	ldr	r3, [pc, #64]	; (b4284 <_GLOBAL__sub_I_Blynk+0x54>)
   b4244:	2400      	movs	r4, #0
SYSTEM_THREAD(ENABLED);
   b4246:	4621      	mov	r1, r4
   b4248:	e9c3 5400 	strd	r5, r4, [r3]
   b424c:	e9c3 4402 	strd	r4, r4, [r3, #8]
   b4250:	e9c3 4404 	strd	r4, r4, [r3, #16]
   b4254:	619c      	str	r4, [r3, #24]
   b4256:	839c      	strh	r4, [r3, #28]
   b4258:	2001      	movs	r0, #1
   b425a:	636c      	str	r4, [r5, #52]	; 0x34
   b425c:	872c      	strh	r4, [r5, #56]	; 0x38
   b425e:	f001 fba1 	bl	b59a4 <system_thread_set_state>

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b4262:	4b09      	ldr	r3, [pc, #36]	; (b4288 <_GLOBAL__sub_I_Blynk+0x58>)
    SleepResult() {}
   b4264:	4a09      	ldr	r2, [pc, #36]	; (b428c <_GLOBAL__sub_I_Blynk+0x5c>)
   b4266:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b4268:	e9c3 4400 	strd	r4, r4, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b426c:	2003      	movs	r0, #3
   b426e:	f001 fb89 	bl	b5984 <set_system_mode>
   b4272:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
OledWingAdafruit display;
   b4276:	4806      	ldr	r0, [pc, #24]	; (b4290 <_GLOBAL__sub_I_Blynk+0x60>)
   b4278:	2107      	movs	r1, #7
   b427a:	f000 bc49 	b.w	b4b10 <_ZN16OledWingAdafruitC1Ei>
   b427e:	bf00      	nop
   b4280:	2003e5ec 	.word	0x2003e5ec
   b4284:	2003e5c0 	.word	0x2003e5c0
   b4288:	2003e5e0 	.word	0x2003e5e0
   b428c:	ffff0000 	.word	0xffff0000
   b4290:	2003e62c 	.word	0x2003e62c

000b4294 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   b4294:	4770      	bx	lr

000b4296 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   b4296:	b510      	push	{r4, lr}
  }
   b4298:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   b429a:	4604      	mov	r4, r0
  }
   b429c:	f7ff fefd 	bl	b409a <_ZdlPvj>
   b42a0:	4620      	mov	r0, r4
   b42a2:	bd10      	pop	{r4, pc}

000b42a4 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42a4:	b40e      	push	{r1, r2, r3}
   b42a6:	b503      	push	{r0, r1, lr}
   b42a8:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   b42aa:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   b42ac:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   b42b0:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   b42b2:	f001 fdac 	bl	b5e0e <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   b42b6:	b002      	add	sp, #8
   b42b8:	f85d eb04 	ldr.w	lr, [sp], #4
   b42bc:	b003      	add	sp, #12
   b42be:	4770      	bx	lr

000b42c0 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   b42c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b42c2:	4604      	mov	r4, r0
   b42c4:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   b42c6:	7922      	ldrb	r2, [r4, #4]
   b42c8:	68a3      	ldr	r3, [r4, #8]
   b42ca:	b132      	cbz	r2, b42da <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   b42cc:	b9a3      	cbnz	r3, b42f8 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   b42ce:	490b      	ldr	r1, [pc, #44]	; (b42fc <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   b42d0:	b002      	add	sp, #8
   b42d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   b42d6:	f001 bd5f 	b.w	b5d98 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42da:	4a09      	ldr	r2, [pc, #36]	; (b4300 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   b42dc:	7b26      	ldrb	r6, [r4, #12]
   b42de:	4d09      	ldr	r5, [pc, #36]	; (b4304 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   b42e0:	4909      	ldr	r1, [pc, #36]	; (b4308 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   b42e2:	7b64      	ldrb	r4, [r4, #13]
   b42e4:	2e01      	cmp	r6, #1
   b42e6:	bf18      	it	ne
   b42e8:	4629      	movne	r1, r5
   b42ea:	e9cd 1400 	strd	r1, r4, [sp]
   b42ee:	4907      	ldr	r1, [pc, #28]	; (b430c <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   b42f0:	f7ff ffd8 	bl	b42a4 <_ZN5Print6printfEPKcz>
  }
   b42f4:	b002      	add	sp, #8
   b42f6:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   b42f8:	4a05      	ldr	r2, [pc, #20]	; (b4310 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   b42fa:	e7ef      	b.n	b42dc <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   b42fc:	000b70f5 	.word	0x000b70f5
   b4300:	000b70ec 	.word	0x000b70ec
   b4304:	000b70f1 	.word	0x000b70f1
   b4308:	000b70ed 	.word	0x000b70ed
   b430c:	000b710b 	.word	0x000b710b
   b4310:	000b70e4 	.word	0x000b70e4

000b4314 <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b4314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b4318:	b085      	sub	sp, #20
   b431a:	461f      	mov	r7, r3
   b431c:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
   b4320:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
   b4324:	eba8 0902 	sub.w	r9, r8, r2
   b4328:	eba7 0a01 	sub.w	sl, r7, r1
   b432c:	f1b9 0f00 	cmp.w	r9, #0
   b4330:	bfb8      	it	lt
   b4332:	f1c9 0900 	rsblt	r9, r9, #0
   b4336:	f1ba 0f00 	cmp.w	sl, #0
   b433a:	bfb8      	it	lt
   b433c:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
   b4340:	45d1      	cmp	r9, sl
        uint16_t color) {
   b4342:	4683      	mov	fp, r0
   b4344:	460c      	mov	r4, r1
   b4346:	4615      	mov	r5, r2
    if (steep) {
   b4348:	dd04      	ble.n	b4354 <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
   b434a:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
   b434c:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
   b434e:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
   b4350:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
   b4352:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
   b4354:	42bc      	cmp	r4, r7
   b4356:	dd05      	ble.n	b4364 <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
   b4358:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
   b435a:	4645      	mov	r5, r8
   b435c:	4690      	mov	r8, r2
    if (x0 > x1) {
   b435e:	4622      	mov	r2, r4
   b4360:	463c      	mov	r4, r7
   b4362:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
   b4364:	1b3e      	subs	r6, r7, r4
   b4366:	b2b2      	uxth	r2, r6
   b4368:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
   b436a:	eba8 0205 	sub.w	r2, r8, r5
   b436e:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
   b4372:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
   b4376:	f3c6 32c0 	ubfx	r2, r6, #15, #1
   b437a:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
   b437e:	4545      	cmp	r5, r8
   b4380:	bfb4      	ite	lt
   b4382:	2201      	movlt	r2, #1
   b4384:	f04f 32ff 	movge.w	r2, #4294967295
    dy = abs(y1 - y0);
   b4388:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
   b438a:	1076      	asrs	r6, r6, #1
        ystep = -1;
   b438c:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
   b438e:	42bc      	cmp	r4, r7
   b4390:	dc1c      	bgt.n	b43cc <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
   b4392:	f8db 2000 	ldr.w	r2, [fp]
   b4396:	9303      	str	r3, [sp, #12]
        if (steep) {
   b4398:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
   b439a:	f8d2 8018 	ldr.w	r8, [r2, #24]
   b439e:	bfc7      	ittee	gt
   b43a0:	4629      	movgt	r1, r5
   b43a2:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
   b43a4:	462a      	movle	r2, r5
   b43a6:	4621      	movle	r1, r4
   b43a8:	4658      	mov	r0, fp
   b43aa:	47c0      	blx	r8
        }
        err -= dy;
   b43ac:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
   b43ae:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
   b43b0:	1ab6      	subs	r6, r6, r2
   b43b2:	b2b1      	uxth	r1, r6
   b43b4:	b236      	sxth	r6, r6
        if (err < 0) {
   b43b6:	2e00      	cmp	r6, #0
   b43b8:	da05      	bge.n	b43c6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
   b43ba:	9a02      	ldr	r2, [sp, #8]
   b43bc:	4415      	add	r5, r2
            err += dx;
   b43be:	9a00      	ldr	r2, [sp, #0]
   b43c0:	1856      	adds	r6, r2, r1
            y0 += ystep;
   b43c2:	b22d      	sxth	r5, r5
            err += dx;
   b43c4:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
   b43c6:	3401      	adds	r4, #1
   b43c8:	b224      	sxth	r4, r4
   b43ca:	e7e0      	b.n	b438e <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
   b43cc:	b005      	add	sp, #20
   b43ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000b43d2 <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
   b43d2:	4770      	bx	lr

000b43d4 <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
   b43d4:	b410      	push	{r4}
    drawPixel(x, y, color);
   b43d6:	6804      	ldr	r4, [r0, #0]
   b43d8:	6924      	ldr	r4, [r4, #16]
   b43da:	46a4      	mov	ip, r4
}
   b43dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
   b43e0:	4760      	bx	ip

000b43e2 <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b43e2:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
   b43e4:	6804      	ldr	r4, [r0, #0]
        int16_t h, uint16_t color) {
   b43e6:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastVLine(x, y, h, color);
   b43ea:	9502      	str	r5, [sp, #8]
   b43ec:	6ba4      	ldr	r4, [r4, #56]	; 0x38
   b43ee:	46a4      	mov	ip, r4
}
   b43f0:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
   b43f2:	4760      	bx	ip

000b43f4 <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b43f4:	b430      	push	{r4, r5}
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
   b43f6:	6804      	ldr	r4, [r0, #0]
        int16_t w, uint16_t color) {
   b43f8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    drawFastHLine(x, y, w, color);
   b43fc:	9502      	str	r5, [sp, #8]
   b43fe:	6be4      	ldr	r4, [r4, #60]	; 0x3c
   b4400:	46a4      	mov	ip, r4
}
   b4402:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
   b4404:	4760      	bx	ip

000b4406 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4406:	b470      	push	{r4, r5, r6}
   b4408:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
   b440c:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
   b4410:	6804      	ldr	r4, [r0, #0]
   b4412:	e9cd 5603 	strd	r5, r6, [sp, #12]
   b4416:	6c24      	ldr	r4, [r4, #64]	; 0x40
   b4418:	46a4      	mov	ip, r4
}
   b441a:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
   b441c:	4760      	bx	ip

000b441e <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
   b441e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4422:	461c      	mov	r4, r3
    startWrite();
   b4424:	6803      	ldr	r3, [r0, #0]
        int16_t h, uint16_t color) {
   b4426:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b442a:	695b      	ldr	r3, [r3, #20]
        int16_t h, uint16_t color) {
   b442c:	4605      	mov	r5, r0
   b442e:	4616      	mov	r6, r2
    writeLine(x, y, x, y+h-1, color);
   b4430:	3c01      	subs	r4, #1
   b4432:	4434      	add	r4, r6
        int16_t h, uint16_t color) {
   b4434:	460f      	mov	r7, r1
    writeLine(x, y, x, y+h-1, color);
   b4436:	b224      	sxth	r4, r4
    startWrite();
   b4438:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
   b443a:	682b      	ldr	r3, [r5, #0]
   b443c:	f8cd 8004 	str.w	r8, [sp, #4]
   b4440:	9400      	str	r4, [sp, #0]
   b4442:	6a9c      	ldr	r4, [r3, #40]	; 0x28
   b4444:	4628      	mov	r0, r5
   b4446:	463b      	mov	r3, r7
   b4448:	4632      	mov	r2, r6
   b444a:	4639      	mov	r1, r7
   b444c:	47a0      	blx	r4
    endWrite();
   b444e:	682b      	ldr	r3, [r5, #0]
   b4450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4452:	4628      	mov	r0, r5
}
   b4454:	b002      	add	sp, #8
   b4456:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b445a:	4718      	bx	r3

000b445c <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
   b445c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   b4460:	461d      	mov	r5, r3
    startWrite();
   b4462:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
   b4464:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
   b4468:	695b      	ldr	r3, [r3, #20]
        int16_t w, uint16_t color) {
   b446a:	4604      	mov	r4, r0
   b446c:	4617      	mov	r7, r2
   b446e:	460e      	mov	r6, r1
    startWrite();
   b4470:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
   b4472:	e9cd 7800 	strd	r7, r8, [sp]
   b4476:	6822      	ldr	r2, [r4, #0]
   b4478:	1e6b      	subs	r3, r5, #1
   b447a:	4433      	add	r3, r6
   b447c:	6a95      	ldr	r5, [r2, #40]	; 0x28
   b447e:	4620      	mov	r0, r4
   b4480:	b21b      	sxth	r3, r3
   b4482:	463a      	mov	r2, r7
   b4484:	4631      	mov	r1, r6
   b4486:	47a8      	blx	r5
    endWrite();
   b4488:	6823      	ldr	r3, [r4, #0]
   b448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b448c:	4620      	mov	r0, r4
}
   b448e:	b002      	add	sp, #8
   b4490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
   b4494:	4718      	bx	r3

000b4496 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b4496:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b449a:	461e      	mov	r6, r3
    startWrite();
   b449c:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b449e:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
   b44a2:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b44a4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   b44a8:	460c      	mov	r4, r1
   b44aa:	4605      	mov	r5, r0
   b44ac:	4617      	mov	r7, r2
    startWrite();
   b44ae:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
   b44b0:	4426      	add	r6, r4
   b44b2:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
   b44b4:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
   b44b6:	da0b      	bge.n	b44d0 <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
   b44b8:	f8cd 8000 	str.w	r8, [sp]
   b44bc:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b44c0:	4621      	mov	r1, r4
   b44c2:	464b      	mov	r3, r9
   b44c4:	463a      	mov	r2, r7
   b44c6:	4628      	mov	r0, r5
   b44c8:	3401      	adds	r4, #1
   b44ca:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
   b44cc:	b224      	sxth	r4, r4
   b44ce:	e7f0      	b.n	b44b2 <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
   b44d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b44d2:	4628      	mov	r0, r5
}
   b44d4:	b002      	add	sp, #8
   b44d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b44da:	4718      	bx	r3

000b44dc <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
   b44dc:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
   b44de:	6802      	ldr	r2, [r0, #0]
   b44e0:	9101      	str	r1, [sp, #4]
   b44e2:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
   b44e6:	9100      	str	r1, [sp, #0]
   b44e8:	6c14      	ldr	r4, [r2, #64]	; 0x40
   b44ea:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b44ee:	2200      	movs	r2, #0
   b44f0:	4611      	mov	r1, r2
   b44f2:	47a0      	blx	r4
}
   b44f4:	b002      	add	sp, #8
   b44f6:	bd10      	pop	{r4, pc}

000b44f8 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
   b44f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
   b44fc:	4299      	cmp	r1, r3
        uint16_t color) {
   b44fe:	4616      	mov	r6, r2
   b4500:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
   b4504:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4508:	6802      	ldr	r2, [r0, #0]
        uint16_t color) {
   b450a:	4680      	mov	r8, r0
   b450c:	460d      	mov	r5, r1
   b450e:	461c      	mov	r4, r3
    if(x0 == x1){
   b4510:	d113      	bne.n	b453a <_ZN12Adafruit_GFX8drawLineEsssst+0x42>
        if(y0 > y1) _swap_int16_t(y0, y1);
   b4512:	42be      	cmp	r6, r7
   b4514:	bfc8      	it	gt
   b4516:	4633      	movgt	r3, r6
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4518:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
        if(y0 > y1) _swap_int16_t(y0, y1);
   b451c:	bfc4      	itt	gt
   b451e:	463e      	movgt	r6, r7
   b4520:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
   b4522:	1c7b      	adds	r3, r7, #1
   b4524:	6b94      	ldr	r4, [r2, #56]	; 0x38
   b4526:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4528:	b21b      	sxth	r3, r3
   b452a:	4632      	mov	r2, r6
   b452c:	4629      	mov	r1, r5
   b452e:	4640      	mov	r0, r8
   b4530:	46a4      	mov	ip, r4
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
   b4532:	b003      	add	sp, #12
   b4534:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4538:	4760      	bx	ip
    } else if(y0 == y1){
   b453a:	42be      	cmp	r6, r7
   b453c:	d10a      	bne.n	b4554 <_ZN12Adafruit_GFX8drawLineEsssst+0x5c>
        if(x0 > x1) _swap_int16_t(x0, x1);
   b453e:	4299      	cmp	r1, r3
   b4540:	bfc2      	ittt	gt
   b4542:	460b      	movgt	r3, r1
   b4544:	4625      	movgt	r5, r4
   b4546:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
   b4548:	1c63      	adds	r3, r4, #1
   b454a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   b454e:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b4550:	1b5b      	subs	r3, r3, r5
   b4552:	e7e9      	b.n	b4528 <_ZN12Adafruit_GFX8drawLineEsssst+0x30>
        startWrite();
   b4554:	6953      	ldr	r3, [r2, #20]
   b4556:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
   b4558:	e9cd 7900 	strd	r7, r9, [sp]
   b455c:	f8d8 3000 	ldr.w	r3, [r8]
   b4560:	4640      	mov	r0, r8
   b4562:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   b4564:	4632      	mov	r2, r6
   b4566:	4623      	mov	r3, r4
   b4568:	4629      	mov	r1, r5
   b456a:	47b8      	blx	r7
        endWrite();
   b456c:	f8d8 3000 	ldr.w	r3, [r8]
   b4570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4572:	4640      	mov	r0, r8
}
   b4574:	b003      	add	sp, #12
   b4576:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
   b457a:	4718      	bx	r3

000b457c <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
   b457c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4580:	461d      	mov	r5, r3
    startWrite();
   b4582:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
   b4584:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
   b4588:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
   b458a:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
   b458e:	4604      	mov	r4, r0
   b4590:	460f      	mov	r7, r1
   b4592:	4616      	mov	r6, r2
    startWrite();
   b4594:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
   b4596:	6823      	ldr	r3, [r4, #0]
   b4598:	f8cd 8000 	str.w	r8, [sp]
   b459c:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b45a0:	4632      	mov	r2, r6
   b45a2:	462b      	mov	r3, r5
   b45a4:	4639      	mov	r1, r7
   b45a6:	4620      	mov	r0, r4
   b45a8:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
   b45aa:	6823      	ldr	r3, [r4, #0]
   b45ac:	f8cd 8000 	str.w	r8, [sp]
   b45b0:	f109 32ff 	add.w	r2, r9, #4294967295
   b45b4:	4432      	add	r2, r6
   b45b6:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
   b45ba:	4639      	mov	r1, r7
   b45bc:	462b      	mov	r3, r5
   b45be:	4620      	mov	r0, r4
   b45c0:	b212      	sxth	r2, r2
   b45c2:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
   b45c4:	6823      	ldr	r3, [r4, #0]
   b45c6:	f8cd 8000 	str.w	r8, [sp]
   b45ca:	f8d3 a020 	ldr.w	sl, [r3, #32]
   b45ce:	4632      	mov	r2, r6
   b45d0:	464b      	mov	r3, r9
   b45d2:	4639      	mov	r1, r7
   b45d4:	4620      	mov	r0, r4
   b45d6:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
   b45d8:	1e6b      	subs	r3, r5, #1
   b45da:	19d9      	adds	r1, r3, r7
   b45dc:	6823      	ldr	r3, [r4, #0]
   b45de:	f8cd 8000 	str.w	r8, [sp]
   b45e2:	6a1d      	ldr	r5, [r3, #32]
   b45e4:	4620      	mov	r0, r4
   b45e6:	464b      	mov	r3, r9
   b45e8:	4632      	mov	r2, r6
   b45ea:	b209      	sxth	r1, r1
   b45ec:	47a8      	blx	r5
    endWrite();
   b45ee:	6823      	ldr	r3, [r4, #0]
   b45f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b45f2:	4620      	mov	r0, r4
}
   b45f4:	b002      	add	sp, #8
   b45f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
   b45fa:	4718      	bx	r3

000b45fc <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
   b45fc:	4770      	bx	lr

000b45fe <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
   b45fe:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
   b4602:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
   b4606:	7683      	strb	r3, [r0, #26]
    switch(rotation) {
   b4608:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
   b460a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b460e:	bf59      	ittee	pl
   b4610:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
   b4612:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
   b4614:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
   b4616:	81c3      	strhmi	r3, [r0, #14]
}
   b4618:	4770      	bx	lr
	...

000b461c <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
   b461c:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
   b461e:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
   b4620:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
   b4622:	4a07      	ldr	r2, [pc, #28]	; (b4640 <_ZN12Adafruit_GFXC1Ess+0x24>)
WIDTH(w), HEIGHT(h)
   b4624:	4d07      	ldr	r5, [pc, #28]	; (b4644 <_ZN12Adafruit_GFXC1Ess+0x28>)
   b4626:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
   b4628:	2400      	movs	r4, #0
    _width    = WIDTH;
   b462a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
   b462c:	f04f 31ff 	mov.w	r1, #4294967295
   b4630:	e9c0 1205 	strd	r1, r2, [r0, #20]
   b4634:	6044      	str	r4, [r0, #4]
WIDTH(w), HEIGHT(h)
   b4636:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
   b4638:	6104      	str	r4, [r0, #16]
    _cp437    = false;
   b463a:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
   b463c:	6204      	str	r4, [r0, #32]
}
   b463e:	bd30      	pop	{r4, r5, pc}
   b4640:	01000101 	.word	0x01000101
   b4644:	000b7630 	.word	0x000b7630

000b4648 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>:
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b464c:	b089      	sub	sp, #36	; 0x24
   b464e:	e9cd 1202 	strd	r1, r2, [sp, #8]
    startWrite();
   b4652:	6802      	ldr	r2, [r0, #0]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4654:	f9bd 8048 	ldrsh.w	r8, [sp, #72]	; 0x48
   b4658:	9304      	str	r3, [sp, #16]
   b465a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
    startWrite();
   b465e:	6952      	ldr	r2, [r2, #20]
  const uint8_t bitmap[], int16_t w, int16_t h, uint16_t color) {
   b4660:	9305      	str	r3, [sp, #20]
   b4662:	f8bd a050 	ldrh.w	sl, [sp, #80]	; 0x50
   b4666:	4604      	mov	r4, r0
    startWrite();
   b4668:	4790      	blx	r2
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b466a:	f118 0207 	adds.w	r2, r8, #7
    startWrite();
   b466e:	f04f 0600 	mov.w	r6, #0
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
   b4672:	bf48      	it	mi
   b4674:	f108 020e 	addmi.w	r2, r8, #14
   b4678:	ea4f 0be2 	mov.w	fp, r2, asr #3
    startWrite();
   b467c:	9601      	str	r6, [sp, #4]
    uint8_t byte = 0;
   b467e:	4635      	mov	r5, r6
   b4680:	9b03      	ldr	r3, [sp, #12]
   b4682:	9a01      	ldr	r2, [sp, #4]
    for(int16_t j=0; j<h; j++, y++) {
   b4684:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
   b4688:	189a      	adds	r2, r3, r2
   b468a:	9b05      	ldr	r3, [sp, #20]
   b468c:	428b      	cmp	r3, r1
   b468e:	b212      	sxth	r2, r2
   b4690:	dd27      	ble.n	b46e2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x9a>
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b4692:	9b04      	ldr	r3, [sp, #16]
   b4694:	4433      	add	r3, r6
    for(int16_t j=0; j<h; j++, y++) {
   b4696:	f04f 0900 	mov.w	r9, #0
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b469a:	9306      	str	r3, [sp, #24]
   b469c:	fa0f f089 	sxth.w	r0, r9
        for(int16_t i=0; i<w; i++) {
   b46a0:	4580      	cmp	r8, r0
   b46a2:	fa1f f189 	uxth.w	r1, r9
   b46a6:	dd17      	ble.n	b46d8 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x90>
            if(i & 7) byte <<= 1;
   b46a8:	074f      	lsls	r7, r1, #29
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46aa:	bf05      	ittet	eq
   b46ac:	9b06      	ldreq	r3, [sp, #24]
   b46ae:	10c0      	asreq	r0, r0, #3
            if(i & 7) byte <<= 1;
   b46b0:	006d      	lslne	r5, r5, #1
            else      byte   = pgm_read_byte(&bitmap[j * byteWidth + i / 8]);
   b46b2:	5c1d      	ldrbeq	r5, [r3, r0]
            if(i & 7) byte <<= 1;
   b46b4:	bf18      	it	ne
   b46b6:	b2ed      	uxtbne	r5, r5
            if(byte & 0x80) writePixel(x+i, y, color);
   b46b8:	062b      	lsls	r3, r5, #24
   b46ba:	d50a      	bpl.n	b46d2 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x8a>
   b46bc:	9b02      	ldr	r3, [sp, #8]
   b46be:	6820      	ldr	r0, [r4, #0]
   b46c0:	9207      	str	r2, [sp, #28]
   b46c2:	4419      	add	r1, r3
   b46c4:	6983      	ldr	r3, [r0, #24]
   b46c6:	b209      	sxth	r1, r1
   b46c8:	461f      	mov	r7, r3
   b46ca:	4620      	mov	r0, r4
   b46cc:	4653      	mov	r3, sl
   b46ce:	47b8      	blx	r7
   b46d0:	9a07      	ldr	r2, [sp, #28]
        for(int16_t i=0; i<w; i++) {
   b46d2:	f109 0901 	add.w	r9, r9, #1
   b46d6:	e7e1      	b.n	b469c <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x54>
    for(int16_t j=0; j<h; j++, y++) {
   b46d8:	9b01      	ldr	r3, [sp, #4]
   b46da:	3301      	adds	r3, #1
   b46dc:	9301      	str	r3, [sp, #4]
   b46de:	445e      	add	r6, fp
   b46e0:	e7ce      	b.n	b4680 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst+0x38>
    endWrite();
   b46e2:	6823      	ldr	r3, [r4, #0]
   b46e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b46e6:	4620      	mov	r0, r4
}
   b46e8:	b009      	add	sp, #36	; 0x24
   b46ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    endWrite();
   b46ee:	4718      	bx	r3

000b46f0 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b46f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b46f4:	ed2d 8b02 	vpush	{d8}
   b46f8:	b091      	sub	sp, #68	; 0x44
   b46fa:	4616      	mov	r6, r2
    if(!gfxFont) { // 'Classic' built-in font
   b46fc:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
   b46fe:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
   b4702:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
   b4706:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
   b470a:	9103      	str	r1, [sp, #12]
   b470c:	461f      	mov	r7, r3
   b470e:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
   b4712:	9304      	str	r3, [sp, #16]
   b4714:	4683      	mov	fp, r0
    if(!gfxFont) { // 'Classic' built-in font
   b4716:	2a00      	cmp	r2, #0
   b4718:	f040 80c5 	bne.w	b48a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
   b471c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
   b4720:	428b      	cmp	r3, r1
   b4722:	f340 814c 	ble.w	b49be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
   b4726:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
   b472a:	42b3      	cmp	r3, r6
   b472c:	f340 8147 	ble.w	b49be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4730:	2306      	movs	r3, #6
   b4732:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
   b4736:	2b00      	cmp	r3, #0
   b4738:	f340 8141 	ble.w	b49be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
   b473c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
   b4740:	2b00      	cmp	r3, #0
   b4742:	f340 813c 	ble.w	b49be <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
   b4746:	7f03      	ldrb	r3, [r0, #28]
   b4748:	b91b      	cbnz	r3, b4752 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
   b474a:	2faf      	cmp	r7, #175	; 0xaf
   b474c:	bf84      	itt	hi
   b474e:	3701      	addhi	r7, #1
   b4750:	b2ff      	uxtbhi	r7, r7
        startWrite();
   b4752:	f8db 3000 	ldr.w	r3, [fp]
   b4756:	4658      	mov	r0, fp
   b4758:	695b      	ldr	r3, [r3, #20]
   b475a:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b475c:	2205      	movs	r2, #5
   b475e:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b4760:	2200      	movs	r2, #0
   b4762:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4764:	4a98      	ldr	r2, [pc, #608]	; (b49c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
   b4766:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   b476a:	18d3      	adds	r3, r2, r3
   b476c:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
   b476e:	b2b3      	uxth	r3, r6
   b4770:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
   b4772:	9a05      	ldr	r2, [sp, #20]
   b4774:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4776:	5c9b      	ldrb	r3, [r3, r2]
   b4778:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b477a:	b2ab      	uxth	r3, r5
   b477c:	930b      	str	r3, [sp, #44]	; 0x2c
   b477e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   b4782:	9308      	str	r3, [sp, #32]
   b4784:	9b03      	ldr	r3, [sp, #12]
   b4786:	fb02 f905 	mul.w	r9, r2, r5
   b478a:	fa19 f983 	uxtah	r9, r9, r3
   b478e:	fa0f f389 	sxth.w	r3, r9
   b4792:	ee08 3a10 	vmov	s16, r3
   b4796:	2308      	movs	r3, #8
   b4798:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
   b479a:	9b03      	ldr	r3, [sp, #12]
   b479c:	eb02 0a03 	add.w	sl, r2, r3
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b47a0:	f04f 0900 	mov.w	r9, #0
                        writePixel(x+i, y+j, bg);
   b47a4:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
   b47a8:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
   b47aa:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
   b47ae:	07d2      	lsls	r2, r2, #31
   b47b0:	d552      	bpl.n	b4858 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
   b47b2:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b47b4:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b47b8:	d13e      	bne.n	b4838 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
   b47ba:	2c01      	cmp	r4, #1
   b47bc:	d13c      	bne.n	b4838 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
   b47be:	699b      	ldr	r3, [r3, #24]
   b47c0:	9906      	ldr	r1, [sp, #24]
   b47c2:	461f      	mov	r7, r3
   b47c4:	9b04      	ldr	r3, [sp, #16]
   b47c6:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
   b47c8:	b212      	sxth	r2, r2
   b47ca:	4651      	mov	r1, sl
   b47cc:	4658      	mov	r0, fp
   b47ce:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
   b47d0:	f109 0301 	add.w	r3, r9, #1
   b47d4:	fa4f f983 	sxtb.w	r9, r3
   b47d8:	9b07      	ldr	r3, [sp, #28]
   b47da:	085b      	lsrs	r3, r3, #1
   b47dc:	9307      	str	r3, [sp, #28]
   b47de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b47e0:	3b01      	subs	r3, #1
   b47e2:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b47e6:	930a      	str	r3, [sp, #40]	; 0x28
   b47e8:	d1de      	bne.n	b47a8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
   b47ea:	9f05      	ldr	r7, [sp, #20]
   b47ec:	3701      	adds	r7, #1
   b47ee:	b27b      	sxtb	r3, r7
   b47f0:	9305      	str	r3, [sp, #20]
   b47f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   b47f4:	3b01      	subs	r3, #1
   b47f6:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   b47fa:	9309      	str	r3, [sp, #36]	; 0x24
   b47fc:	d1b9      	bne.n	b4772 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
   b47fe:	9b04      	ldr	r3, [sp, #16]
   b4800:	4543      	cmp	r3, r8
   b4802:	d00f      	beq.n	b4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
   b4804:	2d01      	cmp	r5, #1
   b4806:	f8db 3000 	ldr.w	r3, [fp]
   b480a:	d13b      	bne.n	b4884 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b480c:	2c01      	cmp	r4, #1
   b480e:	d139      	bne.n	b4884 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
   b4810:	9908      	ldr	r1, [sp, #32]
   b4812:	f8cd 8000 	str.w	r8, [sp]
   b4816:	3105      	adds	r1, #5
   b4818:	6a1c      	ldr	r4, [r3, #32]
   b481a:	4632      	mov	r2, r6
   b481c:	2308      	movs	r3, #8
   b481e:	b209      	sxth	r1, r1
   b4820:	4658      	mov	r0, fp
   b4822:	47a0      	blx	r4
        endWrite();
   b4824:	f8db 3000 	ldr.w	r3, [fp]
   b4828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b482a:	4658      	mov	r0, fp
}
   b482c:	b011      	add	sp, #68	; 0x44
   b482e:	ecbd 8b02 	vpop	{d8}
   b4832:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
   b4836:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
   b4838:	9906      	ldr	r1, [sp, #24]
   b483a:	fb14 f202 	smulbb	r2, r4, r2
   b483e:	440a      	add	r2, r1
   b4840:	9904      	ldr	r1, [sp, #16]
   b4842:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4844:	9400      	str	r4, [sp, #0]
   b4846:	69db      	ldr	r3, [r3, #28]
   b4848:	ee18 1a10 	vmov	r1, s16
   b484c:	461f      	mov	r7, r3
   b484e:	b212      	sxth	r2, r2
   b4850:	462b      	mov	r3, r5
   b4852:	4658      	mov	r0, fp
   b4854:	47b8      	blx	r7
   b4856:	e7bb      	b.n	b47d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
   b4858:	9a04      	ldr	r2, [sp, #16]
   b485a:	4542      	cmp	r2, r8
   b485c:	d0b8      	beq.n	b47d0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
   b485e:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
   b4860:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
   b4864:	d107      	bne.n	b4876 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
   b4866:	2c01      	cmp	r4, #1
   b4868:	d105      	bne.n	b4876 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
   b486a:	699b      	ldr	r3, [r3, #24]
   b486c:	9906      	ldr	r1, [sp, #24]
   b486e:	461f      	mov	r7, r3
   b4870:	440a      	add	r2, r1
   b4872:	4643      	mov	r3, r8
   b4874:	e7a8      	b.n	b47c8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4876:	9906      	ldr	r1, [sp, #24]
   b4878:	f8cd 8004 	str.w	r8, [sp, #4]
   b487c:	fb14 f202 	smulbb	r2, r4, r2
   b4880:	440a      	add	r2, r1
   b4882:	e7df      	b.n	b4844 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
   b4884:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b4886:	f8cd 8004 	str.w	r8, [sp, #4]
   b488a:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   b488e:	9a08      	ldr	r2, [sp, #32]
   b4890:	00e4      	lsls	r4, r4, #3
   b4892:	440a      	add	r2, r1
   b4894:	4611      	mov	r1, r2
   b4896:	9400      	str	r4, [sp, #0]
   b4898:	69dc      	ldr	r4, [r3, #28]
   b489a:	4632      	mov	r2, r6
   b489c:	462b      	mov	r3, r5
   b489e:	b209      	sxth	r1, r1
   b48a0:	4658      	mov	r0, fp
   b48a2:	47a0      	blx	r4
        endWrite();
   b48a4:	e7be      	b.n	b4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b48a6:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
   b48a8:	6851      	ldr	r1, [r2, #4]
    return gfxFont->bitmap;
   b48aa:	6812      	ldr	r2, [r2, #0]
   b48ac:	920b      	str	r2, [sp, #44]	; 0x2c
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
   b48ae:	1aff      	subs	r7, r7, r3
    return gfxFont->glyph + c;
   b48b0:	b2ff      	uxtb	r7, r7
   b48b2:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
   b48b6:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
   b48ba:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
   b48bc:	789a      	ldrb	r2, [r3, #2]
   b48be:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
   b48c0:	78da      	ldrb	r2, [r3, #3]
   b48c2:	920c      	str	r2, [sp, #48]	; 0x30
        if(size_x > 1 || size_y > 1) {
   b48c4:	2d01      	cmp	r5, #1
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b48c6:	f993 2005 	ldrsb.w	r2, [r3, #5]
                 yo = pgm_read_byte(&glyph->yOffset);
   b48ca:	f993 a006 	ldrsb.w	sl, [r3, #6]
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
   b48ce:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
   b48d0:	d801      	bhi.n	b48d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
   b48d2:	2c01      	cmp	r4, #1
   b48d4:	d957      	bls.n	b4986 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
   b48d6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
   b48da:	9308      	str	r3, [sp, #32]
            yo16 = yo;
   b48dc:	fa0f f38a 	sxth.w	r3, sl
   b48e0:	9307      	str	r3, [sp, #28]
        startWrite();
   b48e2:	f8db 3000 	ldr.w	r3, [fp]
   b48e6:	4658      	mov	r0, fp
   b48e8:	695b      	ldr	r3, [r3, #20]
   b48ea:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48ec:	b2b3      	uxth	r3, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b48ee:	f04f 0800 	mov.w	r8, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b48f2:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48f4:	fa1a f386 	uxtah	r3, sl, r6
        uint8_t  xx, yy, bits = 0, bit = 0;
   b48f8:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
   b48fa:	4647      	mov	r7, r8
                        writePixel(x+xo+xx, y+yo+yy, color);
   b48fc:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
   b48fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   b4900:	429f      	cmp	r7, r3
   b4902:	d28f      	bcs.n	b4824 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4904:	9b07      	ldr	r3, [sp, #28]
   b4906:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   b4908:	443b      	add	r3, r7
   b490a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
   b490e:	2200      	movs	r2, #0
   b4910:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4912:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4914:	b21b      	sxth	r3, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b4916:	eb02 0a07 	add.w	sl, r2, r7
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b491a:	ee08 3a10 	vmov	s16, r3
                        writePixel(x+xo+xx, y+yo+yy, color);
   b491e:	fa0f fa8a 	sxth.w	sl, sl
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b4922:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
   b4924:	9a09      	ldr	r2, [sp, #36]	; 0x24
   b4926:	9905      	ldr	r1, [sp, #20]
   b4928:	4291      	cmp	r1, r2
   b492a:	d241      	bcs.n	b49b0 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
   b492c:	1c5a      	adds	r2, r3, #1
   b492e:	b2d2      	uxtb	r2, r2
   b4930:	075b      	lsls	r3, r3, #29
   b4932:	920d      	str	r2, [sp, #52]	; 0x34
   b4934:	d107      	bne.n	b4946 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
   b4936:	9b06      	ldr	r3, [sp, #24]
   b4938:	9906      	ldr	r1, [sp, #24]
   b493a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b493c:	3301      	adds	r3, #1
   b493e:	b29b      	uxth	r3, r3
   b4940:	f812 9001 	ldrb.w	r9, [r2, r1]
   b4944:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
   b4946:	f019 0f80 	tst.w	r9, #128	; 0x80
   b494a:	d012      	beq.n	b4972 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
   b494c:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
   b494e:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
   b4952:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
   b4956:	d11a      	bne.n	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
   b4958:	2c01      	cmp	r4, #1
   b495a:	d118      	bne.n	b498e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
   b495c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   b495e:	699b      	ldr	r3, [r3, #24]
   b4960:	4411      	add	r1, r2
   b4962:	9a05      	ldr	r2, [sp, #20]
   b4964:	4411      	add	r1, r2
   b4966:	461e      	mov	r6, r3
   b4968:	4652      	mov	r2, sl
   b496a:	9b04      	ldr	r3, [sp, #16]
   b496c:	b209      	sxth	r1, r1
   b496e:	4658      	mov	r0, fp
   b4970:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
   b4972:	9e05      	ldr	r6, [sp, #20]
   b4974:	3601      	adds	r6, #1
   b4976:	b2f3      	uxtb	r3, r6
                bits <<= 1;
   b4978:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
   b497c:	9305      	str	r3, [sp, #20]
                bits <<= 1;
   b497e:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
   b4982:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
   b4984:	e7ce      	b.n	b4924 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
   b4986:	2300      	movs	r3, #0
   b4988:	e9cd 3307 	strd	r3, r3, [sp, #28]
   b498c:	e7a9      	b.n	b48e2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
   b498e:	9805      	ldr	r0, [sp, #20]
   b4990:	9a08      	ldr	r2, [sp, #32]
   b4992:	4402      	add	r2, r0
   b4994:	fb02 1105 	mla	r1, r2, r5, r1
   b4998:	9a04      	ldr	r2, [sp, #16]
   b499a:	e9cd 4200 	strd	r4, r2, [sp]
   b499e:	69db      	ldr	r3, [r3, #28]
   b49a0:	ee18 2a10 	vmov	r2, s16
   b49a4:	461e      	mov	r6, r3
   b49a6:	b209      	sxth	r1, r1
   b49a8:	462b      	mov	r3, r5
   b49aa:	4658      	mov	r0, fp
   b49ac:	47b0      	blx	r6
   b49ae:	e7e0      	b.n	b4972 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
   b49b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
   b49b2:	3701      	adds	r7, #1
   b49b4:	4498      	add	r8, r3
   b49b6:	fa5f f888 	uxtb.w	r8, r8
   b49ba:	b2ff      	uxtb	r7, r7
   b49bc:	e79f      	b.n	b48fe <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
   b49be:	b011      	add	sp, #68	; 0x44
   b49c0:	ecbd 8b02 	vpop	{d8}
   b49c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b49c8:	000b7128 	.word	0x000b7128

000b49cc <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
   b49cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
   b49ce:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
   b49d0:	b085      	sub	sp, #20
   b49d2:	4604      	mov	r4, r0
   b49d4:	460b      	mov	r3, r1
    if(!gfxFont) { // 'Classic' built-in font
   b49d6:	2a00      	cmp	r2, #0
   b49d8:	d134      	bne.n	b4a44 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
   b49da:	290a      	cmp	r1, #10
   b49dc:	d108      	bne.n	b49f0 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
   b49de:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
   b49e0:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b49e2:	7e42      	ldrb	r2, [r0, #25]
   b49e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
   b49e8:	8263      	strh	r3, [r4, #18]
}
   b49ea:	2001      	movs	r0, #1
   b49ec:	b005      	add	sp, #20
   b49ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
   b49f0:	290d      	cmp	r1, #13
   b49f2:	d0fa      	beq.n	b49ea <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b49f4:	7ee1      	ldrb	r1, [r4, #27]
   b49f6:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b49f8:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b49fa:	b171      	cbz	r1, b4a1a <_ZN12Adafruit_GFX5writeEh+0x4e>
   b49fc:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
   b4a00:	2106      	movs	r1, #6
   b4a02:	fb11 6100 	smlabb	r1, r1, r0, r6
   b4a06:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
   b4a0a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
   b4a0c:	bfc1      	itttt	gt
   b4a0e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
   b4a12:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
   b4a14:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
   b4a18:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4a1a:	8ae2      	ldrh	r2, [r4, #22]
   b4a1c:	9201      	str	r2, [sp, #4]
   b4a1e:	8aa2      	ldrh	r2, [r4, #20]
   b4a20:	9200      	str	r2, [sp, #0]
   b4a22:	e9cd 0502 	strd	r0, r5, [sp, #8]
   b4a26:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4a2a:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a2e:	4620      	mov	r0, r4
   b4a30:	f7ff fe5e 	bl	b46f0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
   b4a34:	7e23      	ldrb	r3, [r4, #24]
   b4a36:	8a22      	ldrh	r2, [r4, #16]
   b4a38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   b4a3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4a40:	8223      	strh	r3, [r4, #16]
   b4a42:	e7d2      	b.n	b49ea <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
   b4a44:	290a      	cmp	r1, #10
   b4a46:	d107      	bne.n	b4a58 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
   b4a48:	2300      	movs	r3, #0
   b4a4a:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
   b4a4c:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4a4e:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
   b4a50:	8a43      	ldrh	r3, [r0, #18]
   b4a52:	fb01 3302 	mla	r3, r1, r2, r3
   b4a56:	e7c7      	b.n	b49e8 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
   b4a58:	290d      	cmp	r1, #13
   b4a5a:	d0c6      	beq.n	b49ea <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
   b4a5c:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
   b4a5e:	42a9      	cmp	r1, r5
   b4a60:	d3c3      	bcc.n	b49ea <_ZN12Adafruit_GFX5writeEh+0x1e>
   b4a62:	7a51      	ldrb	r1, [r2, #9]
   b4a64:	4299      	cmp	r1, r3
   b4a66:	d3c0      	bcc.n	b49ea <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
   b4a68:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
   b4a6a:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
   b4a6c:	b2ed      	uxtb	r5, r5
   b4a6e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
   b4a72:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
   b4a74:	b328      	cbz	r0, b4ac2 <_ZN12Adafruit_GFX5writeEh+0xf6>
   b4a76:	78e9      	ldrb	r1, [r5, #3]
   b4a78:	b319      	cbz	r1, b4ac2 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4a7a:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
   b4a7c:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a7e:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
   b4a80:	b191      	cbz	r1, b4aa8 <_ZN12Adafruit_GFX5writeEh+0xdc>
   b4a82:	f995 1005 	ldrsb.w	r1, [r5, #5]
   b4a86:	4408      	add	r0, r1
   b4a88:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4a8c:	fb06 1100 	mla	r1, r6, r0, r1
   b4a90:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   b4a94:	4281      	cmp	r1, r0
   b4a96:	dd07      	ble.n	b4aa8 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
   b4a98:	2000      	movs	r0, #0
   b4a9a:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
   b4a9c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
   b4aa0:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
   b4aa2:	fb02 1207 	mla	r2, r2, r7, r1
   b4aa6:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
   b4aa8:	8ae2      	ldrh	r2, [r4, #22]
   b4aaa:	9201      	str	r2, [sp, #4]
   b4aac:	8aa2      	ldrh	r2, [r4, #20]
   b4aae:	9200      	str	r2, [sp, #0]
   b4ab0:	e9cd 6702 	strd	r6, r7, [sp, #8]
   b4ab4:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
   b4ab8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
   b4abc:	4620      	mov	r0, r4
   b4abe:	f7ff fe17 	bl	b46f0 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
   b4ac2:	7929      	ldrb	r1, [r5, #4]
   b4ac4:	7e22      	ldrb	r2, [r4, #24]
   b4ac6:	8a23      	ldrh	r3, [r4, #16]
   b4ac8:	fb01 3302 	mla	r3, r1, r2, r3
   b4acc:	e7b8      	b.n	b4a40 <_ZN12Adafruit_GFX5writeEh+0x74>

000b4ace <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
   b4ace:	2901      	cmp	r1, #1
   b4ad0:	bf38      	it	cc
   b4ad2:	2101      	movcc	r1, #1
   b4ad4:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
   b4ad6:	7641      	strb	r1, [r0, #25]
}
   b4ad8:	4770      	bx	lr
	...

000b4adc <_ZN16OledWingAdafruitD1Ev>:


OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {

}
OledWingAdafruit::~OledWingAdafruit() {
   b4adc:	b510      	push	{r4, lr}
   b4ade:	4b06      	ldr	r3, [pc, #24]	; (b4af8 <_ZN16OledWingAdafruitD1Ev+0x1c>)
   b4ae0:	6003      	str	r3, [r0, #0]
   b4ae2:	4604      	mov	r4, r0
	if (mutex) {
   b4ae4:	6d00      	ldr	r0, [r0, #80]	; 0x50
   b4ae6:	b108      	cbz	r0, b4aec <_ZN16OledWingAdafruitD1Ev+0x10>
		os_mutex_destroy(mutex);
   b4ae8:	f000 fdd4 	bl	b5694 <os_mutex_destroy>
OledWingAdafruit::~OledWingAdafruit() {
   b4aec:	4620      	mov	r0, r4
   b4aee:	f000 f8f7 	bl	b4ce0 <_ZN16Adafruit_SSD1306D1Ev>
	}
}
   b4af2:	4620      	mov	r0, r4
   b4af4:	bd10      	pop	{r4, pc}
   b4af6:	bf00      	nop
   b4af8:	000b7688 	.word	0x000b7688

000b4afc <_ZN16OledWingAdafruitD0Ev>:
OledWingAdafruit::~OledWingAdafruit() {
   b4afc:	b510      	push	{r4, lr}
   b4afe:	4604      	mov	r4, r0
}
   b4b00:	f7ff ffec 	bl	b4adc <_ZN16OledWingAdafruitD1Ev>
   b4b04:	4620      	mov	r0, r4
   b4b06:	2170      	movs	r1, #112	; 0x70
   b4b08:	f7ff fac7 	bl	b409a <_ZdlPvj>
   b4b0c:	4620      	mov	r0, r4
   b4b0e:	bd10      	pop	{r4, pc}

000b4b10 <_ZN16OledWingAdafruitC1Ei>:
OledWingAdafruit::OledWingAdafruit(int useButtons) : Adafruit_SSD1306(128, 32), useButtons(useButtons) {
   b4b10:	b530      	push	{r4, r5, lr}
   b4b12:	b085      	sub	sp, #20
   b4b14:	4604      	mov	r4, r0
   b4b16:	460d      	mov	r5, r1
   b4b18:	f002 f8d2 	bl	b6cc0 <_Z19__fetch_global_Wirev>
   b4b1c:	4a10      	ldr	r2, [pc, #64]	; (b4b60 <_ZN16OledWingAdafruitC1Ei+0x50>)
   b4b1e:	4911      	ldr	r1, [pc, #68]	; (b4b64 <_ZN16OledWingAdafruitC1Ei+0x54>)
   b4b20:	e9cd 2101 	strd	r2, r1, [sp, #4]
   b4b24:	f04f 32ff 	mov.w	r2, #4294967295
   b4b28:	2180      	movs	r1, #128	; 0x80
   b4b2a:	4603      	mov	r3, r0
   b4b2c:	9200      	str	r2, [sp, #0]
   b4b2e:	4620      	mov	r0, r4
   b4b30:	2220      	movs	r2, #32
   b4b32:	f000 f94d 	bl	b4dd0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>
   b4b36:	4b0c      	ldr	r3, [pc, #48]	; (b4b68 <_ZN16OledWingAdafruitC1Ei+0x58>)
   b4b38:	6023      	str	r3, [r4, #0]
   b4b3a:	2300      	movs	r3, #0
   b4b3c:	e9c4 3514 	strd	r3, r5, [r4, #80]	; 0x50
   b4b40:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4b44:	f000 f872 	bl	b4c2c <_ZN8DebounceC1Ev>
   b4b48:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4b4c:	f000 f86e 	bl	b4c2c <_ZN8DebounceC1Ev>
   b4b50:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4b54:	f000 f86a 	bl	b4c2c <_ZN8DebounceC1Ev>
}
   b4b58:	4620      	mov	r0, r4
   b4b5a:	b005      	add	sp, #20
   b4b5c:	bd30      	pop	{r4, r5, pc}
   b4b5e:	bf00      	nop
   b4b60:	00061a80 	.word	0x00061a80
   b4b64:	000186a0 	.word	0x000186a0
   b4b68:	000b7688 	.word	0x000b7688

000b4b6c <_ZN16OledWingAdafruit5setupEv>:

void OledWingAdafruit::setup() {
   b4b6c:	b513      	push	{r0, r1, r4, lr}
   b4b6e:	4604      	mov	r4, r0
	os_mutex_create(&mutex);
   b4b70:	3050      	adds	r0, #80	; 0x50
   b4b72:	f000 fd87 	bl	b5684 <os_mutex_create>

	if (useButtons & USE_BUTTON_A) {
   b4b76:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4b78:	07d9      	lsls	r1, r3, #31
   b4b7a:	d505      	bpl.n	b4b88 <_ZN16OledWingAdafruit5setupEv+0x1c>
		buttonA.attach(BUTTON_A_PIN, INPUT_PULLUP);
   b4b7c:	2202      	movs	r2, #2
   b4b7e:	2104      	movs	r1, #4
   b4b80:	f104 0058 	add.w	r0, r4, #88	; 0x58
   b4b84:	f000 f866 	bl	b4c54 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_B) {
   b4b88:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4b8a:	079a      	lsls	r2, r3, #30
   b4b8c:	d505      	bpl.n	b4b9a <_ZN16OledWingAdafruit5setupEv+0x2e>
		buttonB.attach(BUTTON_B_PIN, INPUT); // Button B has a hardware 100K pull-up on the board
   b4b8e:	2200      	movs	r2, #0
   b4b90:	2103      	movs	r1, #3
   b4b92:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4b96:	f000 f85d 	bl	b4c54 <_ZN8Debounce6attachEi7PinMode>
	}
	if (useButtons & USE_BUTTON_C) {
   b4b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4b9c:	075b      	lsls	r3, r3, #29
   b4b9e:	d505      	bpl.n	b4bac <_ZN16OledWingAdafruit5setupEv+0x40>
		buttonC.attach(BUTTON_C_PIN, INPUT_PULLUP);
   b4ba0:	2202      	movs	r2, #2
   b4ba2:	4611      	mov	r1, r2
   b4ba4:	f104 0068 	add.w	r0, r4, #104	; 0x68
   b4ba8:	f000 f854 	bl	b4c54 <_ZN8Debounce6attachEi7PinMode>
	}

	// 128x32 = I2C addr 0x3C. Method inherited from Adafruit_SSD1306.
	begin(SSD1306_SWITCHCAPVCC, 0x3C);
   b4bac:	2301      	movs	r3, #1
   b4bae:	9300      	str	r3, [sp, #0]
   b4bb0:	223c      	movs	r2, #60	; 0x3c
   b4bb2:	2102      	movs	r1, #2
   b4bb4:	4620      	mov	r0, r4
   b4bb6:	f000 fa13 	bl	b4fe0 <_ZN16Adafruit_SSD13065beginEhhbb>
}
   b4bba:	b002      	add	sp, #8
   b4bbc:	bd10      	pop	{r4, pc}

000b4bbe <_ZN16OledWingAdafruit4loopEv>:

void OledWingAdafruit::loop() {
   b4bbe:	b510      	push	{r4, lr}
	if (useButtons & USE_BUTTON_A) {
   b4bc0:	6d43      	ldr	r3, [r0, #84]	; 0x54
   b4bc2:	07d9      	lsls	r1, r3, #31
void OledWingAdafruit::loop() {
   b4bc4:	4604      	mov	r4, r0
	if (useButtons & USE_BUTTON_A) {
   b4bc6:	d502      	bpl.n	b4bce <_ZN16OledWingAdafruit4loopEv+0x10>
		buttonA.update();
   b4bc8:	3058      	adds	r0, #88	; 0x58
   b4bca:	f000 f850 	bl	b4c6e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_B) {
   b4bce:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4bd0:	079a      	lsls	r2, r3, #30
   b4bd2:	d503      	bpl.n	b4bdc <_ZN16OledWingAdafruit4loopEv+0x1e>
		buttonB.update();
   b4bd4:	f104 0060 	add.w	r0, r4, #96	; 0x60
   b4bd8:	f000 f849 	bl	b4c6e <_ZN8Debounce6updateEv>
	}
	if (useButtons & USE_BUTTON_C) {
   b4bdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
   b4bde:	075b      	lsls	r3, r3, #29
   b4be0:	d505      	bpl.n	b4bee <_ZN16OledWingAdafruit4loopEv+0x30>
		buttonC.update();
   b4be2:	f104 0068 	add.w	r0, r4, #104	; 0x68
	}
}
   b4be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		buttonC.update();
   b4bea:	f000 b840 	b.w	b4c6e <_ZN8Debounce6updateEv>
}
   b4bee:	bd10      	pop	{r4, pc}

000b4bf0 <_ZN16OledWingAdafruit8pressedAEv>:

bool OledWingAdafruit::pressedA() {
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b4bf0:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedA() {
   b4bf2:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_A) && buttonA.fell();
   b4bf4:	f013 0001 	ands.w	r0, r3, #1
   b4bf8:	d003      	beq.n	b4c02 <_ZN16OledWingAdafruit8pressedAEv+0x12>
   b4bfa:	f102 0058 	add.w	r0, r2, #88	; 0x58
   b4bfe:	f000 b866 	b.w	b4cce <_ZN8Debounce4fellEv>
}
   b4c02:	4770      	bx	lr

000b4c04 <_ZN16OledWingAdafruit8pressedBEv>:

bool OledWingAdafruit::pressedB() {
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b4c04:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedB() {
   b4c06:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_B) && buttonB.fell();
   b4c08:	f013 0002 	ands.w	r0, r3, #2
   b4c0c:	d003      	beq.n	b4c16 <_ZN16OledWingAdafruit8pressedBEv+0x12>
   b4c0e:	f102 0060 	add.w	r0, r2, #96	; 0x60
   b4c12:	f000 b85c 	b.w	b4cce <_ZN8Debounce4fellEv>
}
   b4c16:	4770      	bx	lr

000b4c18 <_ZN16OledWingAdafruit8pressedCEv>:

bool OledWingAdafruit::pressedC() {
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b4c18:	6d43      	ldr	r3, [r0, #84]	; 0x54
bool OledWingAdafruit::pressedC() {
   b4c1a:	4602      	mov	r2, r0
	return (useButtons & USE_BUTTON_C) && buttonC.fell();
   b4c1c:	f013 0004 	ands.w	r0, r3, #4
   b4c20:	d003      	beq.n	b4c2a <_ZN16OledWingAdafruit8pressedCEv+0x12>
   b4c22:	f102 0068 	add.w	r0, r2, #104	; 0x68
   b4c26:	f000 b852 	b.w	b4cce <_ZN8Debounce4fellEv>
}
   b4c2a:	4770      	bx	lr

000b4c2c <_ZN8DebounceC1Ev>:

Debounce::Debounce()
    : previous_millis(0)
    , interval_millis(10)
    , state(0)
    , pin(0)
   b4c2c:	2100      	movs	r1, #0
   b4c2e:	220a      	movs	r2, #10
   b4c30:	e9c0 1200 	strd	r1, r2, [r0]
{}
   b4c34:	4770      	bx	lr

000b4c36 <_ZN8Debounce6attachEi>:

void Debounce::attach(int pin) {
    this->pin = pin;
    state = 0;
   b4c36:	2300      	movs	r3, #0
void Debounce::attach(int pin) {
   b4c38:	b510      	push	{r4, lr}
   b4c3a:	4604      	mov	r4, r0
    this->pin = pin;
   b4c3c:	71c1      	strb	r1, [r0, #7]
    state = 0;
   b4c3e:	7183      	strb	r3, [r0, #6]
    if (digitalRead(pin)) {
   b4c40:	b288      	uxth	r0, r1
   b4c42:	f001 ffd3 	bl	b6bec <digitalRead>
   b4c46:	b108      	cbz	r0, b4c4c <_ZN8Debounce6attachEi+0x16>
        state = _BV(DEBOUNCED_STATE) | _BV(UNSTABLE_STATE);
   b4c48:	2303      	movs	r3, #3
   b4c4a:	71a3      	strb	r3, [r4, #6]
   b4c4c:	f000 fd12 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
    }
#ifdef BOUNCE_LOCK_OUT
    previous_millis = 0;
#else
    previous_millis = millis();
   b4c50:	6020      	str	r0, [r4, #0]
#endif
}
   b4c52:	bd10      	pop	{r4, pc}

000b4c54 <_ZN8Debounce6attachEi7PinMode>:

void Debounce::attach(int pin, PinMode mode){
   b4c54:	b538      	push	{r3, r4, r5, lr}
   b4c56:	460c      	mov	r4, r1
   b4c58:	4605      	mov	r5, r0
  pinMode(pin, mode);
   b4c5a:	4611      	mov	r1, r2
   b4c5c:	b2a0      	uxth	r0, r4
   b4c5e:	f001 ff9b 	bl	b6b98 <pinMode>
  
  this->attach(pin);
   b4c62:	4621      	mov	r1, r4
   b4c64:	4628      	mov	r0, r5
}
   b4c66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  this->attach(pin);
   b4c6a:	f7ff bfe4 	b.w	b4c36 <_ZN8Debounce6attachEi>

000b4c6e <_ZN8Debounce6updateEv>:
{
    this->interval_millis = interval_millis;
}

bool Debounce::update()
{
   b4c6e:	b538      	push	{r3, r4, r5, lr}
   b4c70:	4604      	mov	r4, r0
    }
    // return just the sate changed bit
    return state & _BV(STATE_CHANGED);
#else
    // Read the state of the switch in a temporary variable.
    bool currentState = digitalRead(pin);
   b4c72:	79c0      	ldrb	r0, [r0, #7]
   b4c74:	f001 ffba 	bl	b6bec <digitalRead>
    state &= ~_BV(STATE_CHANGED);
   b4c78:	79a5      	ldrb	r5, [r4, #6]
    bool currentState = digitalRead(pin);
   b4c7a:	3800      	subs	r0, #0
    state &= ~_BV(STATE_CHANGED);
   b4c7c:	f025 0308 	bic.w	r3, r5, #8
    bool currentState = digitalRead(pin);
   b4c80:	bf18      	it	ne
   b4c82:	2001      	movne	r0, #1

    // If the reading is different from last reading, reset the debounce counter
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4c84:	f3c5 0540 	ubfx	r5, r5, #1, #1
   b4c88:	4285      	cmp	r5, r0
    state &= ~_BV(STATE_CHANGED);
   b4c8a:	71a3      	strb	r3, [r4, #6]
    if ( currentState != (bool)(state & _BV(UNSTABLE_STATE)) ) {
   b4c8c:	d00a      	beq.n	b4ca4 <_ZN8Debounce6updateEv+0x36>
   b4c8e:	f000 fcf1 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
        previous_millis = millis();
        state ^= _BV(UNSTABLE_STATE);
   b4c92:	79a3      	ldrb	r3, [r4, #6]
        previous_millis = millis();
   b4c94:	6020      	str	r0, [r4, #0]
        state ^= _BV(UNSTABLE_STATE);
   b4c96:	f083 0302 	eor.w	r3, r3, #2
            // We have passed the threshold time, so the input is now stable
            // If it is different from last state, set the STATE_CHANGED flag
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
                previous_millis = millis();
                state ^= _BV(DEBOUNCED_STATE);
                state |= _BV(STATE_CHANGED);
   b4c9a:	71a3      	strb	r3, [r4, #6]
            }
        }

    return state & _BV(STATE_CHANGED);
   b4c9c:	79a0      	ldrb	r0, [r4, #6]
#endif
}
   b4c9e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   b4ca2:	bd38      	pop	{r3, r4, r5, pc}
   b4ca4:	f000 fce6 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
        if ( millis() - previous_millis >= interval_millis ) {
   b4ca8:	6823      	ldr	r3, [r4, #0]
   b4caa:	1ac0      	subs	r0, r0, r3
   b4cac:	88a3      	ldrh	r3, [r4, #4]
   b4cae:	4298      	cmp	r0, r3
   b4cb0:	d3f4      	bcc.n	b4c9c <_ZN8Debounce6updateEv+0x2e>
            if ((bool)(state & _BV(DEBOUNCED_STATE)) != currentState) {
   b4cb2:	79a3      	ldrb	r3, [r4, #6]
   b4cb4:	f003 0301 	and.w	r3, r3, #1
   b4cb8:	42ab      	cmp	r3, r5
   b4cba:	d0ef      	beq.n	b4c9c <_ZN8Debounce6updateEv+0x2e>
   b4cbc:	f000 fcda 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
                state ^= _BV(DEBOUNCED_STATE);
   b4cc0:	79a3      	ldrb	r3, [r4, #6]
                previous_millis = millis();
   b4cc2:	6020      	str	r0, [r4, #0]
                state ^= _BV(DEBOUNCED_STATE);
   b4cc4:	f083 0301 	eor.w	r3, r3, #1
                state |= _BV(STATE_CHANGED);
   b4cc8:	f043 0308 	orr.w	r3, r3, #8
   b4ccc:	e7e5      	b.n	b4c9a <_ZN8Debounce6updateEv+0x2c>

000b4cce <_ZN8Debounce4fellEv>:
    return ( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
}

bool Debounce::fell()
{
    return !( state & _BV(DEBOUNCED_STATE) ) && ( state & _BV(STATE_CHANGED));
   b4cce:	7980      	ldrb	r0, [r0, #6]
   b4cd0:	f000 0009 	and.w	r0, r0, #9
   b4cd4:	f1a0 0308 	sub.w	r3, r0, #8
   b4cd8:	4258      	negs	r0, r3
   b4cda:	4158      	adcs	r0, r3
   b4cdc:	4770      	bx	lr
	...

000b4ce0 <_ZN16Adafruit_SSD1306D1Ev>:
}

/*!
    @brief  Destructor for Adafruit_SSD1306 object.
*/
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4ce0:	b510      	push	{r4, lr}
   b4ce2:	4b04      	ldr	r3, [pc, #16]	; (b4cf4 <_ZN16Adafruit_SSD1306D1Ev+0x14>)
   b4ce4:	6003      	str	r3, [r0, #0]
   b4ce6:	4604      	mov	r4, r0
  if(buffer) {
   b4ce8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4cea:	b108      	cbz	r0, b4cf0 <_ZN16Adafruit_SSD1306D1Ev+0x10>
    free(buffer);
   b4cec:	f000 fee6 	bl	b5abc <free>
    buffer = NULL;
  }
}
   b4cf0:	4620      	mov	r0, r4
   b4cf2:	bd10      	pop	{r4, pc}
   b4cf4:	000b7b94 	.word	0x000b7b94

000b4cf8 <_ZN16Adafruit_SSD1306D0Ev>:
Adafruit_SSD1306::~Adafruit_SSD1306(void) {
   b4cf8:	b510      	push	{r4, lr}
   b4cfa:	4604      	mov	r4, r0
}
   b4cfc:	f7ff fff0 	bl	b4ce0 <_ZN16Adafruit_SSD1306D1Ev>
   b4d00:	4620      	mov	r0, r4
   b4d02:	2150      	movs	r1, #80	; 0x50
   b4d04:	f7ff f9c9 	bl	b409a <_ZdlPvj>
   b4d08:	4620      	mov	r0, r4
   b4d0a:	bd10      	pop	{r4, pc}

000b4d0c <_ZN16Adafruit_SSD13069drawPixelEsst>:
    @note   Changes buffer contents only, no immediate effect on display.
            Follow up with a call to display(), or with other graphics
            commands as needed by one's own application.
*/
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4d0c:	2900      	cmp	r1, #0
void Adafruit_SSD1306::drawPixel(int16_t x, int16_t y, uint16_t color) {
   b4d0e:	b510      	push	{r4, lr}
  if((x >= 0) && (x < width()) && (y >= 0) && (y < height())) {
   b4d10:	db4b      	blt.n	b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d12:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
   b4d16:	428c      	cmp	r4, r1
   b4d18:	dd47      	ble.n	b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d1a:	2a00      	cmp	r2, #0
   b4d1c:	db45      	blt.n	b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
   b4d1e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
   b4d22:	4294      	cmp	r4, r2
   b4d24:	dd41      	ble.n	b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
  /*!
    @brief      Get rotation setting for display
    @returns    0 thru 3 corresponding to 4 cardinal rotations
  */
  /************************************************************************/
  uint8_t getRotation(void) const { return rotation; }
   b4d26:	7e84      	ldrb	r4, [r0, #26]
    // Pixel is in-bounds. Rotate coordinates if needed.
    switch(getRotation()) {
   b4d28:	2c02      	cmp	r4, #2
   b4d2a:	d01f      	beq.n	b4d6c <_ZN16Adafruit_SSD13069drawPixelEsst+0x60>
   b4d2c:	2c03      	cmp	r4, #3
   b4d2e:	d026      	beq.n	b4d7e <_ZN16Adafruit_SSD13069drawPixelEsst+0x72>
   b4d30:	2c01      	cmp	r4, #1
   b4d32:	d104      	bne.n	b4d3e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case 1:
      ssd1306_swap(x, y);
      x = WIDTH - x - 1;
   b4d34:	8904      	ldrh	r4, [r0, #8]
   b4d36:	43d2      	mvns	r2, r2
   b4d38:	4414      	add	r4, r2
      break;
   b4d3a:	460a      	mov	r2, r1
      x = WIDTH - x - 1;
   b4d3c:	b221      	sxth	r1, r4
     case 3:
      ssd1306_swap(x, y);
      y = HEIGHT - y - 1;
      break;
    }
    switch(color) {
   b4d3e:	2b01      	cmp	r3, #1
   b4d40:	d023      	beq.n	b4d8a <_ZN16Adafruit_SSD13069drawPixelEsst+0x7e>
   b4d42:	2b02      	cmp	r3, #2
   b4d44:	d032      	beq.n	b4dac <_ZN16Adafruit_SSD13069drawPixelEsst+0xa0>
   b4d46:	bb83      	cbnz	r3, b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
     case BLACK:   buffer[x + (y/8)*WIDTH] &= ~(1 << (y&7)); break;
   b4d48:	2a00      	cmp	r2, #0
   b4d4a:	4613      	mov	r3, r2
   b4d4c:	8904      	ldrh	r4, [r0, #8]
   b4d4e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4d50:	bfb8      	it	lt
   b4d52:	1dd3      	addlt	r3, r2, #7
   b4d54:	10db      	asrs	r3, r3, #3
   b4d56:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d5a:	f002 0207 	and.w	r2, r2, #7
   b4d5e:	2301      	movs	r3, #1
   b4d60:	4093      	lsls	r3, r2
   b4d62:	5c42      	ldrb	r2, [r0, r1]
   b4d64:	ea22 0203 	bic.w	r2, r2, r3
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4d68:	5442      	strb	r2, [r0, r1]
    }
  }
}
   b4d6a:	e01e      	b.n	b4daa <_ZN16Adafruit_SSD13069drawPixelEsst+0x9e>
      x = WIDTH  - x - 1;
   b4d6c:	8904      	ldrh	r4, [r0, #8]
   b4d6e:	3c01      	subs	r4, #1
   b4d70:	1a61      	subs	r1, r4, r1
      y = HEIGHT - y - 1;
   b4d72:	8944      	ldrh	r4, [r0, #10]
   b4d74:	43d2      	mvns	r2, r2
   b4d76:	4422      	add	r2, r4
      x = WIDTH  - x - 1;
   b4d78:	b209      	sxth	r1, r1
      y = HEIGHT - y - 1;
   b4d7a:	b212      	sxth	r2, r2
      break;
   b4d7c:	e7df      	b.n	b4d3e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
      y = HEIGHT - y - 1;
   b4d7e:	8944      	ldrh	r4, [r0, #10]
   b4d80:	3c01      	subs	r4, #1
   b4d82:	1a64      	subs	r4, r4, r1
      break;
   b4d84:	4611      	mov	r1, r2
      y = HEIGHT - y - 1;
   b4d86:	b222      	sxth	r2, r4
      break;
   b4d88:	e7d9      	b.n	b4d3e <_ZN16Adafruit_SSD13069drawPixelEsst+0x32>
     case WHITE:   buffer[x + (y/8)*WIDTH] |=  (1 << (y&7)); break;
   b4d8a:	2a00      	cmp	r2, #0
   b4d8c:	8904      	ldrh	r4, [r0, #8]
   b4d8e:	4613      	mov	r3, r2
   b4d90:	bfb8      	it	lt
   b4d92:	1dd3      	addlt	r3, r2, #7
   b4d94:	10db      	asrs	r3, r3, #3
   b4d96:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4d9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   b4d9c:	f002 0007 	and.w	r0, r2, #7
   b4da0:	2201      	movs	r2, #1
   b4da2:	4082      	lsls	r2, r0
   b4da4:	5c58      	ldrb	r0, [r3, r1]
   b4da6:	4302      	orrs	r2, r0
   b4da8:	545a      	strb	r2, [r3, r1]
}
   b4daa:	bd10      	pop	{r4, pc}
     case INVERSE: buffer[x + (y/8)*WIDTH] ^=  (1 << (y&7)); break;
   b4dac:	2a00      	cmp	r2, #0
   b4dae:	4613      	mov	r3, r2
   b4db0:	8904      	ldrh	r4, [r0, #8]
   b4db2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4db4:	bfb8      	it	lt
   b4db6:	1dd3      	addlt	r3, r2, #7
   b4db8:	10db      	asrs	r3, r3, #3
   b4dba:	fb13 1104 	smlabb	r1, r3, r4, r1
   b4dbe:	f002 0207 	and.w	r2, r2, #7
   b4dc2:	2301      	movs	r3, #1
   b4dc4:	fa03 f202 	lsl.w	r2, r3, r2
   b4dc8:	5c43      	ldrb	r3, [r0, r1]
   b4dca:	405a      	eors	r2, r3
   b4dcc:	e7cc      	b.n	b4d68 <_ZN16Adafruit_SSD13069drawPixelEsst+0x5c>
	...

000b4dd0 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm>:
Adafruit_SSD1306::Adafruit_SSD1306(uint8_t w, uint8_t h, TwoWire *twi,
   b4dd0:	b570      	push	{r4, r5, r6, lr}
   b4dd2:	4604      	mov	r4, r0
   b4dd4:	461d      	mov	r5, r3
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4dd6:	2600      	movs	r6, #0
   b4dd8:	f7ff fc20 	bl	b461c <_ZN12Adafruit_GFXC1Ess>
   b4ddc:	4b11      	ldr	r3, [pc, #68]	; (b4e24 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x54>)
   b4dde:	6023      	str	r3, [r4, #0]
   b4de0:	6266      	str	r6, [r4, #36]	; 0x24
  Adafruit_GFX(w, h), spi(NULL), wire(twi ? twi : &Wire), buffer(NULL),
   b4de2:	b915      	cbnz	r5, b4dea <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x1a>
   b4de4:	f001 ff6c 	bl	b6cc0 <_Z19__fetch_global_Wirev>
   b4de8:	4605      	mov	r5, r0
  wireClk(clkDuring), restoreClk(clkAfter) {
   b4dea:	23ff      	movs	r3, #255	; 0xff
   b4dec:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
   b4df0:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
   b4df4:	f99d 3010 	ldrsb.w	r3, [sp, #16]
   b4df8:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
  {
   b4dfc:	4b0a      	ldr	r3, [pc, #40]	; (b4e28 <_ZN16Adafruit_SSD1306C1EhhP7TwoWireamm+0x58>)
   b4dfe:	63a3      	str	r3, [r4, #56]	; 0x38
   b4e00:	2301      	movs	r3, #1
   b4e02:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   b4e06:	9b05      	ldr	r3, [sp, #20]
   b4e08:	64a3      	str	r3, [r4, #72]	; 0x48
   b4e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   b4e0e:	9b06      	ldr	r3, [sp, #24]
   b4e10:	86a2      	strh	r2, [r4, #52]	; 0x34
   b4e12:	e9c4 560a 	strd	r5, r6, [r4, #40]	; 0x28
   b4e16:	6426      	str	r6, [r4, #64]	; 0x40
   b4e18:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
   b4e1c:	64e3      	str	r3, [r4, #76]	; 0x4c
}
   b4e1e:	4620      	mov	r0, r4
   b4e20:	bd70      	pop	{r4, r5, r6, pc}
   b4e22:	bf00      	nop
   b4e24:	000b7b94 	.word	0x000b7b94
   b4e28:	000b76e0 	.word	0x000b76e0

000b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4e2e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4e30:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_command1(uint8_t c) {
   b4e32:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4e34:	b190      	cbz	r0, b4e5c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x30>
    wire->beginTransmission(i2caddr);
   b4e36:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4e3a:	f001 faa9 	bl	b6390 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4e3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e40:	6803      	ldr	r3, [r0, #0]
   b4e42:	2100      	movs	r1, #0
   b4e44:	689b      	ldr	r3, [r3, #8]
   b4e46:	4798      	blx	r3
    WIRE_WRITE(c);
   b4e48:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4e4a:	6803      	ldr	r3, [r0, #0]
   b4e4c:	4629      	mov	r1, r5
   b4e4e:	689b      	ldr	r3, [r3, #8]
   b4e50:	4798      	blx	r3
    wire->endTransmission();
   b4e52:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   b4e54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    wire->endTransmission();
   b4e58:	f001 baa1 	b.w	b639e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4e5c:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4e60:	4601      	mov	r1, r0
   b4e62:	b298      	uxth	r0, r3
   b4e64:	f001 fea9 	bl	b6bba <digitalWrite>
  if(spi) {
   b4e68:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4e6a:	b120      	cbz	r0, b4e76 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4a>
    (void)spi->transfer(d);
   b4e6c:	4629      	mov	r1, r5
}
   b4e6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    (void)spi->transfer(d);
   b4e72:	f000 bf35 	b.w	b5ce0 <_ZN8SPIClass8transferEh>
   b4e76:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4e78:	2780      	movs	r7, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4e7a:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4e7e:	ea05 0107 	and.w	r1, r5, r7
   b4e82:	b280      	uxth	r0, r0
   b4e84:	f001 fe99 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4e88:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e8c:	2101      	movs	r1, #1
   b4e8e:	b280      	uxth	r0, r0
   b4e90:	f001 fe93 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4e94:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4e98:	2100      	movs	r1, #0
   b4e9a:	b280      	uxth	r0, r0
   b4e9c:	f001 fe8d 	bl	b6bba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4ea0:	3e01      	subs	r6, #1
   b4ea2:	ea4f 0757 	mov.w	r7, r7, lsr #1
   b4ea6:	d1e8      	bne.n	b4e7a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x4e>
}
   b4ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4eaa <_ZN16Adafruit_SSD130613invertDisplayEb>:
            display() function -- buffer contents are not changed, rather a
            different pixel mode of the display hardware is used. When
            enabled, drawing BLACK (value 0) pixels will actually draw white,
            WHITE (value 1) will draw black.
*/
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4eaa:	b538      	push	{r3, r4, r5, lr}
   b4eac:	4604      	mov	r4, r0
  TRANSACTION_START
   b4eae:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::invertDisplay(boolean i) {
   b4eb0:	460d      	mov	r5, r1
  TRANSACTION_START
   b4eb2:	b180      	cbz	r0, b4ed6 <_ZN16Adafruit_SSD130613invertDisplayEb+0x2c>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4eb4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b4eb6:	f001 fa5d 	bl	b6374 <_ZN7TwoWire8setSpeedEm>
  ssd1306_command1(i ? SSD1306_INVERTDISPLAY : SSD1306_NORMALDISPLAY);
   b4eba:	2d00      	cmp	r5, #0
   b4ebc:	4620      	mov	r0, r4
   b4ebe:	bf14      	ite	ne
   b4ec0:	21a7      	movne	r1, #167	; 0xa7
   b4ec2:	21a6      	moveq	r1, #166	; 0xa6
   b4ec4:	f7ff ffb2 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  TRANSACTION_END
   b4ec8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4eca:	b188      	cbz	r0, b4ef0 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
   b4ecc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b4ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b4ed2:	f001 ba4f 	b.w	b6374 <_ZN7TwoWire8setSpeedEm>
  TRANSACTION_START
   b4ed6:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4ed8:	b118      	cbz	r0, b4ee2 <_ZN16Adafruit_SSD130613invertDisplayEb+0x38>
   b4eda:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b4ede:	f000 fe91 	bl	b5c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b4ee2:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ee6:	2100      	movs	r1, #0
   b4ee8:	b280      	uxth	r0, r0
   b4eea:	f001 fe66 	bl	b6bba <digitalWrite>
   b4eee:	e7e4      	b.n	b4eba <_ZN16Adafruit_SSD130613invertDisplayEb+0x10>
  TRANSACTION_END
   b4ef0:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b4ef4:	2101      	movs	r1, #1
   b4ef6:	b280      	uxth	r0, r0
   b4ef8:	f001 fe5f 	bl	b6bba <digitalWrite>
   b4efc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b4efe:	b118      	cbz	r0, b4f08 <_ZN16Adafruit_SSD130613invertDisplayEb+0x5e>
}
   b4f00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  TRANSACTION_END
   b4f04:	f000 be64 	b.w	b5bd0 <_ZN8SPIClass14endTransactionEv>
}
   b4f08:	bd38      	pop	{r3, r4, r5, pc}

000b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4f0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b4f0e:	4604      	mov	r4, r0
  if(wire) { // I2C
   b4f10:	6a80      	ldr	r0, [r0, #40]	; 0x28
void Adafruit_SSD1306::ssd1306_commandList(const uint8_t *c, uint8_t n) {
   b4f12:	460d      	mov	r5, r1
  if(wire) { // I2C
   b4f14:	188f      	adds	r7, r1, r2
   b4f16:	b340      	cbz	r0, b4f6a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x60>
    wire->beginTransmission(i2caddr);
   b4f18:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4f1c:	f001 fa38 	bl	b6390 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4f20:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f22:	6803      	ldr	r3, [r0, #0]
   b4f24:	2100      	movs	r1, #0
   b4f26:	689b      	ldr	r3, [r3, #8]
   b4f28:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b4f2a:	2601      	movs	r6, #1
    while(n--) {
   b4f2c:	42af      	cmp	r7, r5
        wire->endTransmission();
   b4f2e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(n--) {
   b4f30:	d017      	beq.n	b4f62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x58>
      if(bytesOut >= WIRE_MAX) {
   b4f32:	2e1f      	cmp	r6, #31
   b4f34:	d90c      	bls.n	b4f50 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x46>
        wire->endTransmission();
   b4f36:	f001 fa32 	bl	b639e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b4f3a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b4f3e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f40:	f001 fa26 	bl	b6390 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x00); // Co = 0, D/C = 0
   b4f44:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f46:	6803      	ldr	r3, [r0, #0]
   b4f48:	2100      	movs	r1, #0
   b4f4a:	689b      	ldr	r3, [r3, #8]
   b4f4c:	4798      	blx	r3
        bytesOut = 1;
   b4f4e:	2601      	movs	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f50:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b4f52:	f815 1b01 	ldrb.w	r1, [r5], #1
   b4f56:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b4f58:	3601      	adds	r6, #1
      WIRE_WRITE(pgm_read_byte(c++));
   b4f5a:	689b      	ldr	r3, [r3, #8]
   b4f5c:	4798      	blx	r3
      bytesOut++;
   b4f5e:	b2f6      	uxtb	r6, r6
    while(n--) {
   b4f60:	e7e4      	b.n	b4f2c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x22>
}
   b4f62:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    wire->endTransmission();
   b4f66:	f001 ba1a 	b.w	b639e <_ZN7TwoWire15endTransmissionEv>
    SSD1306_MODE_COMMAND
   b4f6a:	f994 3035 	ldrsb.w	r3, [r4, #53]	; 0x35
   b4f6e:	4601      	mov	r1, r0
   b4f70:	b298      	uxth	r0, r3
   b4f72:	f001 fe22 	bl	b6bba <digitalWrite>
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f76:	42bd      	cmp	r5, r7
   b4f78:	d022      	beq.n	b4fc0 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb6>
  if(spi) {
   b4f7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(n--) SPIwrite(pgm_read_byte(c++));
   b4f7c:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b4f80:	b118      	cbz	r0, b4f8a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x80>
    (void)spi->transfer(d);
   b4f82:	4649      	mov	r1, r9
   b4f84:	f000 feac 	bl	b5ce0 <_ZN8SPIClass8transferEh>
   b4f88:	e7f5      	b.n	b4f76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
   b4f8a:	2608      	movs	r6, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4f8c:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b4f90:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b4f94:	ea09 0108 	and.w	r1, r9, r8
   b4f98:	b280      	uxth	r0, r0
   b4f9a:	f001 fe0e 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b4f9e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4fa2:	2101      	movs	r1, #1
   b4fa4:	b280      	uxth	r0, r0
   b4fa6:	f001 fe08 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b4faa:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b4fae:	2100      	movs	r1, #0
   b4fb0:	b280      	uxth	r0, r0
   b4fb2:	f001 fe02 	bl	b6bba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b4fb6:	3e01      	subs	r6, #1
   b4fb8:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b4fbc:	d1e8      	bne.n	b4f90 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x86>
   b4fbe:	e7da      	b.n	b4f76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x6c>
}
   b4fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000b4fc4 <_ZN16Adafruit_SSD130612clearDisplayEv>:
  memset(buffer, 0, WIDTH * ((HEIGHT + 7) / 8));
   b4fc4:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b4fc8:	1dda      	adds	r2, r3, #7
   b4fca:	bf48      	it	mi
   b4fcc:	f103 020e 	addmi.w	r2, r3, #14
   b4fd0:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
   b4fd4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b4fd6:	10d2      	asrs	r2, r2, #3
   b4fd8:	435a      	muls	r2, r3
   b4fda:	2100      	movs	r1, #0
   b4fdc:	f001 bfbc 	b.w	b6f58 <memset>

000b4fe0 <_ZN16Adafruit_SSD13065beginEhhbb>:
  boolean periphBegin) {
   b4fe0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   b4fe4:	461e      	mov	r6, r3
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4fe6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  boolean periphBegin) {
   b4fe8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   b4fec:	4604      	mov	r4, r0
   b4fee:	460f      	mov	r7, r1
   b4ff0:	4615      	mov	r5, r2
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b4ff2:	b1c3      	cbz	r3, b5026 <_ZN16Adafruit_SSD13065beginEhhbb+0x46>
  clearDisplay();
   b4ff4:	4620      	mov	r0, r4
   b4ff6:	f7ff ffe5 	bl	b4fc4 <_ZN16Adafruit_SSD130612clearDisplayEv>
  if(HEIGHT > 32) {
   b4ffa:	f9b4 000a 	ldrsh.w	r0, [r4, #10]
   b4ffe:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
   b5002:	2820      	cmp	r0, #32
   b5004:	dc21      	bgt.n	b504a <_ZN16Adafruit_SSD13065beginEhhbb+0x6a>
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b5006:	2320      	movs	r3, #32
   b5008:	2201      	movs	r2, #1
   b500a:	3820      	subs	r0, #32
   b500c:	e9cd 3201 	strd	r3, r2, [sp, #4]
   b5010:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
   b5014:	2373      	movs	r3, #115	; 0x73
   b5016:	3973      	subs	r1, #115	; 0x73
   b5018:	9300      	str	r3, [sp, #0]
   b501a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b501e:	4b89      	ldr	r3, [pc, #548]	; (b5244 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>)
   b5020:	f340 024f 	sbfx	r2, r0, #1, #16
   b5024:	e021      	b.n	b506a <_ZN16Adafruit_SSD13065beginEhhbb+0x8a>
  if((!buffer) && !(buffer = (uint8_t *)malloc(WIDTH * ((HEIGHT + 7) / 8))))
   b5026:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
   b502a:	1dd8      	adds	r0, r3, #7
   b502c:	bf48      	it	mi
   b502e:	f103 000e 	addmi.w	r0, r3, #14
   b5032:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
   b5036:	10c0      	asrs	r0, r0, #3
   b5038:	4358      	muls	r0, r3
   b503a:	f000 fd37 	bl	b5aac <malloc>
   b503e:	62e0      	str	r0, [r4, #44]	; 0x2c
   b5040:	2800      	cmp	r0, #0
   b5042:	d1d7      	bne.n	b4ff4 <_ZN16Adafruit_SSD13065beginEhhbb+0x14>
}
   b5044:	b004      	add	sp, #16
   b5046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    drawBitmap((WIDTH - splash1_width) / 2, (HEIGHT - splash1_height) / 2,
   b504a:	3840      	subs	r0, #64	; 0x40
   b504c:	f3c0 32c0 	ubfx	r2, r0, #15, #1
   b5050:	fa02 f280 	sxtah	r2, r2, r0
   b5054:	2340      	movs	r3, #64	; 0x40
   b5056:	2001      	movs	r0, #1
   b5058:	e9cd 3001 	strd	r3, r0, [sp, #4]
   b505c:	2352      	movs	r3, #82	; 0x52
   b505e:	3952      	subs	r1, #82	; 0x52
   b5060:	9300      	str	r3, [sp, #0]
   b5062:	4b79      	ldr	r3, [pc, #484]	; (b5248 <_ZN16Adafruit_SSD13065beginEhhbb+0x268>)
   b5064:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
   b5068:	1052      	asrs	r2, r2, #1
    drawBitmap((WIDTH - splash2_width) / 2, (HEIGHT - splash2_height) / 2,
   b506a:	4620      	mov	r0, r4
   b506c:	f341 014f 	sbfx	r1, r1, #1, #16
   b5070:	f7ff faea 	bl	b4648 <_ZN12Adafruit_GFX10drawBitmapEssPKhsst>
  if(wire) { // Using I2C
   b5074:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  vccstate = vcs;
   b5076:	f884 7031 	strb.w	r7, [r4, #49]	; 0x31
  if(wire) { // Using I2C
   b507a:	2800      	cmp	r0, #0
   b507c:	d078      	beq.n	b5170 <_ZN16Adafruit_SSD13065beginEhhbb+0x190>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b507e:	2d00      	cmp	r5, #0
   b5080:	d174      	bne.n	b516c <_ZN16Adafruit_SSD13065beginEhhbb+0x18c>
   b5082:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b5086:	2b20      	cmp	r3, #32
   b5088:	bf0c      	ite	eq
   b508a:	253c      	moveq	r5, #60	; 0x3c
   b508c:	253d      	movne	r5, #61	; 0x3d
   b508e:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    if(periphBegin) wire->begin();
   b5092:	f1b8 0f00 	cmp.w	r8, #0
   b5096:	d001      	beq.n	b509c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b5098:	f001 f970 	bl	b637c <_ZN7TwoWire5beginEv>
  if(reset && (rstPin >= 0)) {
   b509c:	b1fe      	cbz	r6, b50de <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
   b509e:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50a2:	2800      	cmp	r0, #0
   b50a4:	db1b      	blt.n	b50de <_ZN16Adafruit_SSD13065beginEhhbb+0xfe>
    pinMode(     rstPin, OUTPUT);
   b50a6:	2101      	movs	r1, #1
   b50a8:	b280      	uxth	r0, r0
   b50aa:	f001 fd75 	bl	b6b98 <pinMode>
    digitalWrite(rstPin, HIGH);
   b50ae:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50b2:	2101      	movs	r1, #1
   b50b4:	b280      	uxth	r0, r0
   b50b6:	f001 fd80 	bl	b6bba <digitalWrite>
    delay(1);                   // VDD goes high at start, pause for 1 ms
   b50ba:	2001      	movs	r0, #1
   b50bc:	f000 feea 	bl	b5e94 <delay>
    digitalWrite(rstPin, LOW);  // Bring reset low
   b50c0:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50c4:	2100      	movs	r1, #0
   b50c6:	b280      	uxth	r0, r0
   b50c8:	f001 fd77 	bl	b6bba <digitalWrite>
    delay(10);                  // Wait 10 ms
   b50cc:	200a      	movs	r0, #10
   b50ce:	f000 fee1 	bl	b5e94 <delay>
    digitalWrite(rstPin, HIGH); // Bring out of reset
   b50d2:	f994 0037 	ldrsb.w	r0, [r4, #55]	; 0x37
   b50d6:	2101      	movs	r1, #1
   b50d8:	b280      	uxth	r0, r0
   b50da:	f001 fd6e 	bl	b6bba <digitalWrite>
  TRANSACTION_START
   b50de:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b50e0:	2800      	cmp	r0, #0
   b50e2:	d074      	beq.n	b51ce <_ZN16Adafruit_SSD13065beginEhhbb+0x1ee>
   b50e4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b50e6:	f001 f945 	bl	b6374 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(init1, sizeof(init1));
   b50ea:	2204      	movs	r2, #4
   b50ec:	4957      	ldr	r1, [pc, #348]	; (b524c <_ZN16Adafruit_SSD13065beginEhhbb+0x26c>)
   b50ee:	4620      	mov	r0, r4
   b50f0:	f7ff ff0b 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(HEIGHT - 1);
   b50f4:	8961      	ldrh	r1, [r4, #10]
   b50f6:	3901      	subs	r1, #1
   b50f8:	b2c9      	uxtb	r1, r1
   b50fa:	4620      	mov	r0, r4
   b50fc:	f7ff fe96 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init2, sizeof(init2));
   b5100:	4953      	ldr	r1, [pc, #332]	; (b5250 <_ZN16Adafruit_SSD13065beginEhhbb+0x270>)
   b5102:	2204      	movs	r2, #4
   b5104:	4620      	mov	r0, r4
   b5106:	f7ff ff00 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0x14);
   b510a:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b510e:	2b01      	cmp	r3, #1
   b5110:	bf0c      	ite	eq
   b5112:	2110      	moveq	r1, #16
   b5114:	2114      	movne	r1, #20
   b5116:	4620      	mov	r0, r4
   b5118:	f7ff fe88 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init3, sizeof(init3));
   b511c:	2204      	movs	r2, #4
   b511e:	494d      	ldr	r1, [pc, #308]	; (b5254 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>)
   b5120:	4620      	mov	r0, r4
   b5122:	f7ff fef2 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  if((WIDTH == 128) && (HEIGHT == 32)) {
   b5126:	68a3      	ldr	r3, [r4, #8]
   b5128:	4a4b      	ldr	r2, [pc, #300]	; (b5258 <_ZN16Adafruit_SSD13065beginEhhbb+0x278>)
   b512a:	4293      	cmp	r3, r2
   b512c:	d15c      	bne.n	b51e8 <_ZN16Adafruit_SSD13065beginEhhbb+0x208>
    ssd1306_commandList(init4a, sizeof(init4a));
   b512e:	494b      	ldr	r1, [pc, #300]	; (b525c <_ZN16Adafruit_SSD13065beginEhhbb+0x27c>)
   b5130:	2204      	movs	r2, #4
   b5132:	4620      	mov	r0, r4
   b5134:	f7ff fee9 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(SSD1306_SETPRECHARGE); // 0xd9
   b5138:	21d9      	movs	r1, #217	; 0xd9
   b513a:	4620      	mov	r0, r4
   b513c:	f7ff fe76 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x22 : 0xF1);
   b5140:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5144:	2b01      	cmp	r3, #1
   b5146:	bf0c      	ite	eq
   b5148:	2122      	moveq	r1, #34	; 0x22
   b514a:	21f1      	movne	r1, #241	; 0xf1
   b514c:	4620      	mov	r0, r4
   b514e:	f7ff fe6d 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  ssd1306_commandList(init5, sizeof(init5));
   b5152:	4620      	mov	r0, r4
   b5154:	4942      	ldr	r1, [pc, #264]	; (b5260 <_ZN16Adafruit_SSD13065beginEhhbb+0x280>)
   b5156:	2206      	movs	r2, #6
   b5158:	f7ff fed7 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  TRANSACTION_END
   b515c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b515e:	2800      	cmp	r0, #0
   b5160:	d063      	beq.n	b522a <_ZN16Adafruit_SSD13065beginEhhbb+0x24a>
   b5162:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   b5164:	f001 f906 	bl	b6374 <_ZN7TwoWire8setSpeedEm>
  return true; // Success
   b5168:	2001      	movs	r0, #1
   b516a:	e76b      	b.n	b5044 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    i2caddr = addr ? addr : ((HEIGHT == 32) ? 0x3C : 0x3D);
   b516c:	b26d      	sxtb	r5, r5
   b516e:	e78e      	b.n	b508e <_ZN16Adafruit_SSD13065beginEhhbb+0xae>
    pinMode(dcPin, OUTPUT); // Set data/command pin as output
   b5170:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5174:	2101      	movs	r1, #1
   b5176:	b280      	uxth	r0, r0
   b5178:	f001 fd0e 	bl	b6b98 <pinMode>
    pinMode(csPin, OUTPUT); // Same for chip select
   b517c:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5180:	2101      	movs	r1, #1
   b5182:	b280      	uxth	r0, r0
   b5184:	f001 fd08 	bl	b6b98 <pinMode>
    SSD1306_DESELECT
   b5188:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b518c:	2101      	movs	r1, #1
   b518e:	b280      	uxth	r0, r0
   b5190:	f001 fd13 	bl	b6bba <digitalWrite>
    if(spi) { // Hardware SPI
   b5194:	6a65      	ldr	r5, [r4, #36]	; 0x24
   b5196:	b13d      	cbz	r5, b51a8 <_ZN16Adafruit_SSD13065beginEhhbb+0x1c8>
      if(periphBegin) spi->begin();
   b5198:	f1b8 0f00 	cmp.w	r8, #0
   b519c:	f43f af7e 	beq.w	b509c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
   b51a0:	4628      	mov	r0, r5
   b51a2:	f000 fd01 	bl	b5ba8 <_ZN8SPIClass5beginEv>
   b51a6:	e779      	b.n	b509c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
      pinMode(mosiPin, OUTPUT); // MOSI and SCLK outputs
   b51a8:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b51ac:	2101      	movs	r1, #1
   b51ae:	b280      	uxth	r0, r0
   b51b0:	f001 fcf2 	bl	b6b98 <pinMode>
      pinMode(clkPin , OUTPUT);
   b51b4:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51b8:	2101      	movs	r1, #1
   b51ba:	b280      	uxth	r0, r0
   b51bc:	f001 fcec 	bl	b6b98 <pinMode>
      digitalWrite(clkPin, LOW); // Clock low
   b51c0:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b51c4:	4629      	mov	r1, r5
   b51c6:	b280      	uxth	r0, r0
   b51c8:	f001 fcf7 	bl	b6bba <digitalWrite>
   b51cc:	e766      	b.n	b509c <_ZN16Adafruit_SSD13065beginEhhbb+0xbc>
  TRANSACTION_START
   b51ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b51d0:	b118      	cbz	r0, b51da <_ZN16Adafruit_SSD13065beginEhhbb+0x1fa>
   b51d2:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b51d6:	f000 fd15 	bl	b5c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b51da:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b51de:	2100      	movs	r1, #0
   b51e0:	b280      	uxth	r0, r0
   b51e2:	f001 fcea 	bl	b6bba <digitalWrite>
   b51e6:	e780      	b.n	b50ea <_ZN16Adafruit_SSD13065beginEhhbb+0x10a>
  } else if((WIDTH == 128) && (HEIGHT == 64)) {
   b51e8:	4a1e      	ldr	r2, [pc, #120]	; (b5264 <_ZN16Adafruit_SSD13065beginEhhbb+0x284>)
   b51ea:	4293      	cmp	r3, r2
   b51ec:	d10e      	bne.n	b520c <_ZN16Adafruit_SSD13065beginEhhbb+0x22c>
    ssd1306_commandList(init4b, sizeof(init4b));
   b51ee:	491e      	ldr	r1, [pc, #120]	; (b5268 <_ZN16Adafruit_SSD13065beginEhhbb+0x288>)
   b51f0:	2203      	movs	r2, #3
   b51f2:	4620      	mov	r0, r4
   b51f4:	f7ff fe89 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x9F : 0xCF);
   b51f8:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b51fc:	2b01      	cmp	r3, #1
   b51fe:	bf0c      	ite	eq
   b5200:	219f      	moveq	r1, #159	; 0x9f
   b5202:	21cf      	movne	r1, #207	; 0xcf
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff fe11 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
   b520a:	e795      	b.n	b5138 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
  } else if((WIDTH == 96) && (HEIGHT == 16)) {
   b520c:	4a17      	ldr	r2, [pc, #92]	; (b526c <_ZN16Adafruit_SSD13065beginEhhbb+0x28c>)
   b520e:	4293      	cmp	r3, r2
   b5210:	d192      	bne.n	b5138 <_ZN16Adafruit_SSD13065beginEhhbb+0x158>
    ssd1306_commandList(init4c, sizeof(init4c));
   b5212:	4917      	ldr	r1, [pc, #92]	; (b5270 <_ZN16Adafruit_SSD13065beginEhhbb+0x290>)
   b5214:	2203      	movs	r2, #3
   b5216:	4620      	mov	r0, r4
   b5218:	f7ff fe77 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    ssd1306_command1((vccstate == SSD1306_EXTERNALVCC) ? 0x10 : 0xAF);
   b521c:	f994 3031 	ldrsb.w	r3, [r4, #49]	; 0x31
   b5220:	2b01      	cmp	r3, #1
   b5222:	bf0c      	ite	eq
   b5224:	2110      	moveq	r1, #16
   b5226:	21af      	movne	r1, #175	; 0xaf
   b5228:	e7ec      	b.n	b5204 <_ZN16Adafruit_SSD13065beginEhhbb+0x224>
  TRANSACTION_END
   b522a:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b522e:	2101      	movs	r1, #1
   b5230:	b280      	uxth	r0, r0
   b5232:	f001 fcc2 	bl	b6bba <digitalWrite>
   b5236:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5238:	2800      	cmp	r0, #0
   b523a:	d095      	beq.n	b5168 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b523c:	f000 fcc8 	bl	b5bd0 <_ZN8SPIClass14endTransactionEv>
   b5240:	e792      	b.n	b5168 <_ZN16Adafruit_SSD13065beginEhhbb+0x188>
   b5242:	bf00      	nop
   b5244:	000b79ac 	.word	0x000b79ac
   b5248:	000b76ec 	.word	0x000b76ec
   b524c:	000b7bf4 	.word	0x000b7bf4
   b5250:	000b7bf8 	.word	0x000b7bf8
   b5254:	000b7bfc 	.word	0x000b7bfc
   b5258:	00200080 	.word	0x00200080
   b525c:	000b7c06 	.word	0x000b7c06
   b5260:	000b7c00 	.word	0x000b7c00
   b5264:	00400080 	.word	0x00400080
   b5268:	000b7c0a 	.word	0x000b7c0a
   b526c:	00100060 	.word	0x00100060
   b5270:	000b7c0d 	.word	0x000b7c0d

000b5274 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5274:	b570      	push	{r4, r5, r6, lr}
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b5276:	2a00      	cmp	r2, #0
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5278:	f8bd 5010 	ldrh.w	r5, [sp, #16]
  if((y >= 0) && (y < HEIGHT)) { // Y coord in bounds?
   b527c:	db3d      	blt.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b527e:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b5282:	4294      	cmp	r4, r2
   b5284:	dd39      	ble.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
    if(x < 0) { // Clip left
   b5286:	2900      	cmp	r1, #0
      w += x;
   b5288:	bfbe      	ittt	lt
   b528a:	185b      	addlt	r3, r3, r1
   b528c:	b21b      	sxthlt	r3, r3
      x  = 0;
   b528e:	2100      	movlt	r1, #0
    if((x + w) > WIDTH) { // Clip right
   b5290:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
   b5294:	18ce      	adds	r6, r1, r3
   b5296:	42a6      	cmp	r6, r4
      w = (WIDTH - x);
   b5298:	bfc4      	itt	gt
   b529a:	1a63      	subgt	r3, r4, r1
   b529c:	b21b      	sxthgt	r3, r3
    if(w > 0) { // Proceed only if width is positive
   b529e:	2b00      	cmp	r3, #0
   b52a0:	dd2b      	ble.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x],
   b52a2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   b52a4:	10d6      	asrs	r6, r2, #3
   b52a6:	fb14 1106 	smlabb	r1, r4, r6, r1
   b52aa:	4401      	add	r1, r0
               mask = 1 << (y & 7);
   b52ac:	f002 0007 	and.w	r0, r2, #7
   b52b0:	2201      	movs	r2, #1
   b52b2:	4082      	lsls	r2, r0
      switch(color) {
   b52b4:	2d01      	cmp	r5, #1
               mask = 1 << (y & 7);
   b52b6:	b2d2      	uxtb	r2, r2
      switch(color) {
   b52b8:	d016      	beq.n	b52e8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x74>
   b52ba:	2d02      	cmp	r5, #2
   b52bc:	d00b      	beq.n	b52d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x62>
   b52be:	b9e5      	cbnz	r5, b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
       case BLACK: mask = ~mask; while(w--) { *pBuf++ &= mask; }; break;
   b52c0:	43d2      	mvns	r2, r2
   b52c2:	b2d2      	uxtb	r2, r2
   b52c4:	440b      	add	r3, r1
   b52c6:	4299      	cmp	r1, r3
   b52c8:	d017      	beq.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52ca:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52ce:	4010      	ands	r0, r2
   b52d0:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52d4:	e7f7      	b.n	b52c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x52>
   b52d6:	440b      	add	r3, r1
       case INVERSE:             while(w--) { *pBuf++ ^= mask; }; break;
   b52d8:	4299      	cmp	r1, r3
   b52da:	d00e      	beq.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52dc:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52e0:	4050      	eors	r0, r2
   b52e2:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52e6:	e7f7      	b.n	b52d8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x64>
   b52e8:	440b      	add	r3, r1
       case WHITE:               while(w--) { *pBuf++ |= mask; }; break;
   b52ea:	4299      	cmp	r1, r3
   b52ec:	d005      	beq.n	b52fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x86>
   b52ee:	f811 0b01 	ldrb.w	r0, [r1], #1
   b52f2:	4310      	orrs	r0, r2
   b52f4:	f801 0c01 	strb.w	r0, [r1, #-1]
   b52f8:	e7f7      	b.n	b52ea <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst+0x76>
}
   b52fa:	bd70      	pop	{r4, r5, r6, pc}

000b52fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>:
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b52fe:	2900      	cmp	r1, #0
  int16_t x, int16_t __y, int16_t __h, uint16_t color) {
   b5300:	f8bd 5014 	ldrh.w	r5, [sp, #20]
  if((x >= 0) && (x < WIDTH)) { // X coord in bounds?
   b5304:	db76      	blt.n	b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
   b5306:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
   b530a:	42b1      	cmp	r1, r6
   b530c:	da72      	bge.n	b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
    if(__y < 0) { // Clip top
   b530e:	2a00      	cmp	r2, #0
      __h += __y;
   b5310:	bfbe      	ittt	lt
   b5312:	189b      	addlt	r3, r3, r2
   b5314:	b21b      	sxthlt	r3, r3
      __y = 0;
   b5316:	2200      	movlt	r2, #0
    if((__y + __h) > HEIGHT) { // Clip bottom
   b5318:	f9b0 400a 	ldrsh.w	r4, [r0, #10]
   b531c:	18d7      	adds	r7, r2, r3
   b531e:	42a7      	cmp	r7, r4
      __h = (HEIGHT - __y);
   b5320:	bfc4      	itt	gt
   b5322:	1aa3      	subgt	r3, r4, r2
   b5324:	b21b      	sxthgt	r3, r3
    if(__h > 0) { // Proceed only if height is now positive
   b5326:	2b00      	cmp	r3, #0
   b5328:	dd64      	ble.n	b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b532a:	f3c2 04c4 	ubfx	r4, r2, #3, #5
   b532e:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   b5330:	fb16 1604 	smlabb	r6, r6, r4, r1
      if(mod) {
   b5334:	f012 0207 	ands.w	r2, r2, #7
      uint8_t  y = __y, h = __h;
   b5338:	b2db      	uxtb	r3, r3
      uint8_t *pBuf = &buffer[(y / 8) * WIDTH + x];
   b533a:	eb07 0406 	add.w	r4, r7, r6
      if(mod) {
   b533e:	d023      	beq.n	b5388 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x8c>
        mod = 8 - mod;
   b5340:	f1c2 0208 	rsb	r2, r2, #8
   b5344:	b2d2      	uxtb	r2, r2
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5346:	492d      	ldr	r1, [pc, #180]	; (b53fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x100>)
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5348:	4293      	cmp	r3, r2
   b534a:	bf3c      	itt	cc
   b534c:	f04f 0cff 	movcc.w	ip, #255	; 0xff
   b5350:	eba2 0e03 	subcc.w	lr, r2, r3
        uint8_t mask = pgm_read_byte(&premask[mod]);
   b5354:	5c89      	ldrb	r1, [r1, r2]
        if(h < mod) mask &= (0XFF >> (mod - h));
   b5356:	bf3c      	itt	cc
   b5358:	fa4c fc0e 	asrcc.w	ip, ip, lr
   b535c:	ea0c 0101 	andcc.w	r1, ip, r1
        switch(color) {
   b5360:	2d01      	cmp	r5, #1
   b5362:	d007      	beq.n	b5374 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x78>
   b5364:	2d02      	cmp	r5, #2
   b5366:	d02e      	beq.n	b53c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xca>
   b5368:	b94d      	cbnz	r5, b537e <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x82>
         case BLACK:   *pBuf &= ~mask; break;
   b536a:	f817 c006 	ldrb.w	ip, [r7, r6]
   b536e:	ea2c 0101 	bic.w	r1, ip, r1
   b5372:	e003      	b.n	b537c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
         case WHITE:   *pBuf |=  mask; break;
   b5374:	f817 c006 	ldrb.w	ip, [r7, r6]
   b5378:	ea41 010c 	orr.w	r1, r1, ip
         case INVERSE: *pBuf ^=  mask; break;
   b537c:	55b9      	strb	r1, [r7, r6]
      if(h >= mod) { // More to go?
   b537e:	4293      	cmp	r3, r2
   b5380:	d338      	bcc.n	b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
        pBuf += WIDTH;
   b5382:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
   b5386:	440c      	add	r4, r1
        h -= mod;
   b5388:	1a9a      	subs	r2, r3, r2
   b538a:	b2d2      	uxtb	r2, r2
        if(h >= 8) {
   b538c:	2a07      	cmp	r2, #7
   b538e:	d90e      	bls.n	b53ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xb2>
          if(color == INVERSE) {
   b5390:	2d02      	cmp	r5, #2
   b5392:	d11d      	bne.n	b53d0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xd4>
   b5394:	4613      	mov	r3, r2
              *pBuf ^= 0xFF;  // Invert byte
   b5396:	7821      	ldrb	r1, [r4, #0]
   b5398:	43c9      	mvns	r1, r1
   b539a:	7021      	strb	r1, [r4, #0]
              h     -= 8;     // Subtract 8 rows from height
   b539c:	3b08      	subs	r3, #8
              pBuf  += WIDTH; // Advance pointer 8 rows
   b539e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
              h     -= 8;     // Subtract 8 rows from height
   b53a2:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b53a4:	2b07      	cmp	r3, #7
              pBuf  += WIDTH; // Advance pointer 8 rows
   b53a6:	440c      	add	r4, r1
            } while(h >= 8);
   b53a8:	d8f5      	bhi.n	b5396 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x9a>
              h    -= 8;      // Subtract 8 rows from height
   b53aa:	f002 0207 	and.w	r2, r2, #7
        if(h) { // Do the final partial byte, if necessary
   b53ae:	b30a      	cbz	r2, b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b53b0:	4b13      	ldr	r3, [pc, #76]	; (b5400 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x104>)
          switch(color) {
   b53b2:	2d01      	cmp	r5, #1
          uint8_t mask = pgm_read_byte(&postmask[mod]);
   b53b4:	5c9b      	ldrb	r3, [r3, r2]
          switch(color) {
   b53b6:	d01a      	beq.n	b53ee <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf2>
   b53b8:	2d02      	cmp	r5, #2
   b53ba:	d01c      	beq.n	b53f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xfa>
   b53bc:	b9d5      	cbnz	r5, b53f4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf8>
           case BLACK:   *pBuf &= ~mask; break;
   b53be:	7822      	ldrb	r2, [r4, #0]
   b53c0:	ea22 0303 	bic.w	r3, r2, r3
   b53c4:	e015      	b.n	b53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
         case INVERSE: *pBuf ^=  mask; break;
   b53c6:	f817 c006 	ldrb.w	ip, [r7, r6]
   b53ca:	ea81 010c 	eor.w	r1, r1, ip
   b53ce:	e7d5      	b.n	b537c <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0x80>
            uint8_t val = (color != BLACK) ? 255 : 0;
   b53d0:	1e29      	subs	r1, r5, #0
   b53d2:	bf18      	it	ne
   b53d4:	2101      	movne	r1, #1
   b53d6:	4249      	negs	r1, r1
   b53d8:	b2c9      	uxtb	r1, r1
   b53da:	4613      	mov	r3, r2
              *pBuf = val;    // Set byte
   b53dc:	7021      	strb	r1, [r4, #0]
              h    -= 8;      // Subtract 8 rows from height
   b53de:	3b08      	subs	r3, #8
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53e0:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
              h    -= 8;      // Subtract 8 rows from height
   b53e4:	b2db      	uxtb	r3, r3
            } while(h >= 8);
   b53e6:	2b07      	cmp	r3, #7
              pBuf += WIDTH;  // Advance pointer 8 rows
   b53e8:	4434      	add	r4, r6
            } while(h >= 8);
   b53ea:	d8f7      	bhi.n	b53dc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xe0>
   b53ec:	e7dd      	b.n	b53aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xae>
           case WHITE:   *pBuf |=  mask; break;
   b53ee:	7822      	ldrb	r2, [r4, #0]
   b53f0:	4313      	orrs	r3, r2
           case INVERSE: *pBuf ^=  mask; break;
   b53f2:	7023      	strb	r3, [r4, #0]
}
   b53f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
           case INVERSE: *pBuf ^=  mask; break;
   b53f6:	7822      	ldrb	r2, [r4, #0]
   b53f8:	4053      	eors	r3, r2
   b53fa:	e7fa      	b.n	b53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst+0xf6>
   b53fc:	000b7be4 	.word	0x000b7be4
   b5400:	000b7bec 	.word	0x000b7bec

000b5404 <_ZN16Adafruit_SSD130613drawFastHLineEssst>:
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b5404:	b470      	push	{r4, r5, r6}
   b5406:	4614      	mov	r4, r2
  switch(rotation) {
   b5408:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t w, uint16_t color) {
   b540a:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  switch(rotation) {
   b540e:	2a02      	cmp	r2, #2
   b5410:	d00d      	beq.n	b542e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x2a>
   b5412:	2a03      	cmp	r2, #3
   b5414:	d018      	beq.n	b5448 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x44>
   b5416:	2a01      	cmp	r2, #1
   b5418:	d111      	bne.n	b543e <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x3a>
    x = WIDTH - x - 1;
   b541a:	8902      	ldrh	r2, [r0, #8]
   b541c:	43e4      	mvns	r4, r4
   b541e:	4414      	add	r4, r2
   b5420:	b224      	sxth	r4, r4
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b5422:	9603      	str	r6, [sp, #12]
   b5424:	460a      	mov	r2, r1
   b5426:	4621      	mov	r1, r4
}
   b5428:	bc70      	pop	{r4, r5, r6}
  if(bSwap) drawFastVLineInternal(x, y, w, color);
   b542a:	f7ff bf67 	b.w	b52fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y  = HEIGHT - y - 1;
   b542e:	8942      	ldrh	r2, [r0, #10]
    x -= (w-1);
   b5430:	8905      	ldrh	r5, [r0, #8]
    y  = HEIGHT - y - 1;
   b5432:	43e4      	mvns	r4, r4
    x -= (w-1);
   b5434:	4419      	add	r1, r3
    y  = HEIGHT - y - 1;
   b5436:	4414      	add	r4, r2
    x -= (w-1);
   b5438:	1a69      	subs	r1, r5, r1
    y  = HEIGHT - y - 1;
   b543a:	b224      	sxth	r4, r4
    x -= (w-1);
   b543c:	b209      	sxth	r1, r1
  else      drawFastHLineInternal(x, y, w, color);
   b543e:	9603      	str	r6, [sp, #12]
   b5440:	4622      	mov	r2, r4
}
   b5442:	bc70      	pop	{r4, r5, r6}
  else      drawFastHLineInternal(x, y, w, color);
   b5444:	f7ff bf16 	b.w	b5274 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    y -= (w-1);
   b5448:	8945      	ldrh	r5, [r0, #10]
   b544a:	4419      	add	r1, r3
   b544c:	1a69      	subs	r1, r5, r1
   b544e:	b209      	sxth	r1, r1
    break;
   b5450:	e7e7      	b.n	b5422 <_ZN16Adafruit_SSD130613drawFastHLineEssst+0x1e>

000b5452 <_ZN16Adafruit_SSD130613drawFastVLineEssst>:
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5452:	b430      	push	{r4, r5}
   b5454:	4614      	mov	r4, r2
  switch(rotation) {
   b5456:	7e82      	ldrb	r2, [r0, #26]
  int16_t x, int16_t y, int16_t h, uint16_t color) {
   b5458:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  switch(rotation) {
   b545c:	2a02      	cmp	r2, #2
   b545e:	d00d      	beq.n	b547c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x2a>
   b5460:	2a03      	cmp	r2, #3
   b5462:	d018      	beq.n	b5496 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x44>
   b5464:	2a01      	cmp	r2, #1
   b5466:	d111      	bne.n	b548c <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x3a>
    x -= (h-1);
   b5468:	18e2      	adds	r2, r4, r3
   b546a:	8904      	ldrh	r4, [r0, #8]
   b546c:	1aa4      	subs	r4, r4, r2
   b546e:	b224      	sxth	r4, r4
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5470:	9502      	str	r5, [sp, #8]
   b5472:	460a      	mov	r2, r1
   b5474:	4621      	mov	r1, r4
}
   b5476:	bc30      	pop	{r4, r5}
  if(bSwap) drawFastHLineInternal(x, y, h, color);
   b5478:	f7ff befc 	b.w	b5274 <_ZN16Adafruit_SSD130621drawFastHLineInternalEssst>
    x = WIDTH  - x - 1;
   b547c:	8902      	ldrh	r2, [r0, #8]
   b547e:	43c9      	mvns	r1, r1
   b5480:	4411      	add	r1, r2
    y -= (h-1);
   b5482:	18e2      	adds	r2, r4, r3
   b5484:	8944      	ldrh	r4, [r0, #10]
   b5486:	1aa4      	subs	r4, r4, r2
    x = WIDTH  - x - 1;
   b5488:	b209      	sxth	r1, r1
    y -= (h-1);
   b548a:	b224      	sxth	r4, r4
  else      drawFastVLineInternal(x, y, h, color);
   b548c:	9502      	str	r5, [sp, #8]
   b548e:	4622      	mov	r2, r4
}
   b5490:	bc30      	pop	{r4, r5}
  else      drawFastVLineInternal(x, y, h, color);
   b5492:	f7ff bf33 	b.w	b52fc <_ZN16Adafruit_SSD130621drawFastVLineInternalEssst>
    y = HEIGHT - y - 1;
   b5496:	8942      	ldrh	r2, [r0, #10]
   b5498:	43c9      	mvns	r1, r1
   b549a:	4411      	add	r1, r2
   b549c:	b209      	sxth	r1, r1
    break;
   b549e:	e7e7      	b.n	b5470 <_ZN16Adafruit_SSD130613drawFastVLineEssst+0x1e>

000b54a0 <_ZN16Adafruit_SSD13067displayEv>:
void Adafruit_SSD1306::display(void) {
   b54a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b54a4:	4604      	mov	r4, r0
  TRANSACTION_START
   b54a6:	6a80      	ldr	r0, [r0, #40]	; 0x28
   b54a8:	2800      	cmp	r0, #0
   b54aa:	d042      	beq.n	b5532 <_ZN16Adafruit_SSD13067displayEv+0x92>
   b54ac:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   b54ae:	f000 ff61 	bl	b6374 <_ZN7TwoWire8setSpeedEm>
  ssd1306_commandList(dlist1, sizeof(dlist1));
   b54b2:	4947      	ldr	r1, [pc, #284]	; (b55d0 <_ZN16Adafruit_SSD13067displayEv+0x130>)
   b54b4:	2205      	movs	r2, #5
   b54b6:	4620      	mov	r0, r4
   b54b8:	f7ff fd27 	bl	b4f0a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
   b54bc:	8921      	ldrh	r1, [r4, #8]
   b54be:	3901      	subs	r1, #1
   b54c0:	4620      	mov	r0, r4
   b54c2:	b2c9      	uxtb	r1, r1
   b54c4:	f7ff fcb2 	bl	b4e2c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b54c8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   b54cc:	1dde      	adds	r6, r3, #7
   b54ce:	bf48      	it	mi
   b54d0:	f103 060e 	addmi.w	r6, r3, #14
  if(wire) { // I2C
   b54d4:	e9d4 050a 	ldrd	r0, r5, [r4, #40]	; 0x28
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
   b54d8:	8923      	ldrh	r3, [r4, #8]
   b54da:	10f6      	asrs	r6, r6, #3
   b54dc:	fb13 f606 	smulbb	r6, r3, r6
  uint8_t *ptr   = buffer;
   b54e0:	fa15 f686 	uxtah	r6, r5, r6
  if(wire) { // I2C
   b54e4:	2800      	cmp	r0, #0
   b54e6:	d03a      	beq.n	b555e <_ZN16Adafruit_SSD13067displayEv+0xbe>
    wire->beginTransmission(i2caddr);
   b54e8:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b54ec:	f000 ff50 	bl	b6390 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
   b54f0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b54f2:	6803      	ldr	r3, [r0, #0]
   b54f4:	2140      	movs	r1, #64	; 0x40
   b54f6:	689b      	ldr	r3, [r3, #8]
   b54f8:	4798      	blx	r3
    uint8_t bytesOut = 1;
   b54fa:	2701      	movs	r7, #1
    while(count--) {
   b54fc:	42b5      	cmp	r5, r6
        wire->endTransmission();
   b54fe:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    while(count--) {
   b5500:	d024      	beq.n	b554c <_ZN16Adafruit_SSD13067displayEv+0xac>
      if(bytesOut >= WIRE_MAX) {
   b5502:	2f1f      	cmp	r7, #31
   b5504:	d90c      	bls.n	b5520 <_ZN16Adafruit_SSD13067displayEv+0x80>
        wire->endTransmission();
   b5506:	f000 ff4a 	bl	b639e <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
   b550a:	f994 1030 	ldrsb.w	r1, [r4, #48]	; 0x30
   b550e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5510:	f000 ff3e 	bl	b6390 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
   b5514:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5516:	6803      	ldr	r3, [r0, #0]
   b5518:	2140      	movs	r1, #64	; 0x40
   b551a:	689b      	ldr	r3, [r3, #8]
   b551c:	4798      	blx	r3
        bytesOut = 1;
   b551e:	2701      	movs	r7, #1
      WIRE_WRITE(*ptr++);
   b5520:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5522:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5526:	6803      	ldr	r3, [r0, #0]
      bytesOut++;
   b5528:	3701      	adds	r7, #1
      WIRE_WRITE(*ptr++);
   b552a:	689b      	ldr	r3, [r3, #8]
   b552c:	4798      	blx	r3
      bytesOut++;
   b552e:	b2ff      	uxtb	r7, r7
    while(count--) {
   b5530:	e7e4      	b.n	b54fc <_ZN16Adafruit_SSD13067displayEv+0x5c>
  TRANSACTION_START
   b5532:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b5534:	b118      	cbz	r0, b553e <_ZN16Adafruit_SSD13067displayEv+0x9e>
   b5536:	f104 0138 	add.w	r1, r4, #56	; 0x38
   b553a:	f000 fb63 	bl	b5c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
   b553e:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b5542:	2100      	movs	r1, #0
   b5544:	b280      	uxth	r0, r0
   b5546:	f001 fb38 	bl	b6bba <digitalWrite>
   b554a:	e7b2      	b.n	b54b2 <_ZN16Adafruit_SSD13067displayEv+0x12>
    wire->endTransmission();
   b554c:	f000 ff27 	bl	b639e <_ZN7TwoWire15endTransmissionEv>
  TRANSACTION_END
   b5550:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   b5552:	b378      	cbz	r0, b55b4 <_ZN16Adafruit_SSD13067displayEv+0x114>
   b5554:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
}
   b5556:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b555a:	f000 bf0b 	b.w	b6374 <_ZN7TwoWire8setSpeedEm>
    SSD1306_MODE_DATA
   b555e:	f994 0035 	ldrsb.w	r0, [r4, #53]	; 0x35
   b5562:	2101      	movs	r1, #1
   b5564:	b280      	uxth	r0, r0
   b5566:	f001 fb28 	bl	b6bba <digitalWrite>
    while(count--) SPIwrite(*ptr++);
   b556a:	42ae      	cmp	r6, r5
   b556c:	d0f0      	beq.n	b5550 <_ZN16Adafruit_SSD13067displayEv+0xb0>
  if(spi) {
   b556e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    while(count--) SPIwrite(*ptr++);
   b5570:	f815 9b01 	ldrb.w	r9, [r5], #1
  if(spi) {
   b5574:	b118      	cbz	r0, b557e <_ZN16Adafruit_SSD13067displayEv+0xde>
    (void)spi->transfer(d);
   b5576:	4649      	mov	r1, r9
   b5578:	f000 fbb2 	bl	b5ce0 <_ZN8SPIClass8transferEh>
   b557c:	e7f5      	b.n	b556a <_ZN16Adafruit_SSD13067displayEv+0xca>
   b557e:	2708      	movs	r7, #8
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b5580:	f04f 0880 	mov.w	r8, #128	; 0x80
      digitalWrite(mosiPin, d & bit);
   b5584:	f994 0033 	ldrsb.w	r0, [r4, #51]	; 0x33
   b5588:	ea09 0108 	and.w	r1, r9, r8
   b558c:	b280      	uxth	r0, r0
   b558e:	f001 fb14 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , HIGH);
   b5592:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b5596:	2101      	movs	r1, #1
   b5598:	b280      	uxth	r0, r0
   b559a:	f001 fb0e 	bl	b6bba <digitalWrite>
      digitalWrite(clkPin , LOW);
   b559e:	f994 0034 	ldrsb.w	r0, [r4, #52]	; 0x34
   b55a2:	2100      	movs	r1, #0
   b55a4:	b280      	uxth	r0, r0
   b55a6:	f001 fb08 	bl	b6bba <digitalWrite>
    for(uint8_t bit = 0x80; bit; bit >>= 1) {
   b55aa:	3f01      	subs	r7, #1
   b55ac:	ea4f 0858 	mov.w	r8, r8, lsr #1
   b55b0:	d1e8      	bne.n	b5584 <_ZN16Adafruit_SSD13067displayEv+0xe4>
   b55b2:	e7da      	b.n	b556a <_ZN16Adafruit_SSD13067displayEv+0xca>
  TRANSACTION_END
   b55b4:	f994 0036 	ldrsb.w	r0, [r4, #54]	; 0x36
   b55b8:	2101      	movs	r1, #1
   b55ba:	b280      	uxth	r0, r0
   b55bc:	f001 fafd 	bl	b6bba <digitalWrite>
   b55c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   b55c2:	b118      	cbz	r0, b55cc <_ZN16Adafruit_SSD13067displayEv+0x12c>
}
   b55c4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  TRANSACTION_END
   b55c8:	f000 bb02 	b.w	b5bd0 <_ZN8SPIClass14endTransactionEv>
}
   b55cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b55d0:	000b7c10 	.word	0x000b7c10

000b55d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b55d4:	b508      	push	{r3, lr}
   b55d6:	4b02      	ldr	r3, [pc, #8]	; (b55e0 <netdb_freeaddrinfo+0xc>)
   b55d8:	681b      	ldr	r3, [r3, #0]
   b55da:	689b      	ldr	r3, [r3, #8]
   b55dc:	9301      	str	r3, [sp, #4]
   b55de:	bd08      	pop	{r3, pc}
   b55e0:	00030268 	.word	0x00030268

000b55e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b55e4:	b508      	push	{r3, lr}
   b55e6:	4b02      	ldr	r3, [pc, #8]	; (b55f0 <netdb_getaddrinfo+0xc>)
   b55e8:	681b      	ldr	r3, [r3, #0]
   b55ea:	68db      	ldr	r3, [r3, #12]
   b55ec:	9301      	str	r3, [sp, #4]
   b55ee:	bd08      	pop	{r3, pc}
   b55f0:	00030268 	.word	0x00030268

000b55f4 <HAL_Validate_Pin_Function>:
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   b55f4:	b508      	push	{r3, lr}
   b55f6:	4b02      	ldr	r3, [pc, #8]	; (b5600 <HAL_Validate_Pin_Function+0xc>)
   b55f8:	681b      	ldr	r3, [r3, #0]
   b55fa:	685b      	ldr	r3, [r3, #4]
   b55fc:	9301      	str	r3, [sp, #4]
   b55fe:	bd08      	pop	{r3, pc}
   b5600:	0003022c 	.word	0x0003022c

000b5604 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b5604:	b508      	push	{r3, lr}
   b5606:	4b02      	ldr	r3, [pc, #8]	; (b5610 <HAL_Pin_Mode+0xc>)
   b5608:	681b      	ldr	r3, [r3, #0]
   b560a:	689b      	ldr	r3, [r3, #8]
   b560c:	9301      	str	r3, [sp, #4]
   b560e:	bd08      	pop	{r3, pc}
   b5610:	0003022c 	.word	0x0003022c

000b5614 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b5614:	b508      	push	{r3, lr}
   b5616:	4b02      	ldr	r3, [pc, #8]	; (b5620 <HAL_Get_Pin_Mode+0xc>)
   b5618:	681b      	ldr	r3, [r3, #0]
   b561a:	68db      	ldr	r3, [r3, #12]
   b561c:	9301      	str	r3, [sp, #4]
   b561e:	bd08      	pop	{r3, pc}
   b5620:	0003022c 	.word	0x0003022c

000b5624 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b5624:	b508      	push	{r3, lr}
   b5626:	4b02      	ldr	r3, [pc, #8]	; (b5630 <HAL_GPIO_Write+0xc>)
   b5628:	681b      	ldr	r3, [r3, #0]
   b562a:	691b      	ldr	r3, [r3, #16]
   b562c:	9301      	str	r3, [sp, #4]
   b562e:	bd08      	pop	{r3, pc}
   b5630:	0003022c 	.word	0x0003022c

000b5634 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   b5634:	b508      	push	{r3, lr}
   b5636:	4b02      	ldr	r3, [pc, #8]	; (b5640 <HAL_GPIO_Read+0xc>)
   b5638:	681b      	ldr	r3, [r3, #0]
   b563a:	695b      	ldr	r3, [r3, #20]
   b563c:	9301      	str	r3, [sp, #4]
   b563e:	bd08      	pop	{r3, pc}
   b5640:	0003022c 	.word	0x0003022c

000b5644 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   b5644:	b508      	push	{r3, lr}
   b5646:	4b02      	ldr	r3, [pc, #8]	; (b5650 <if_index_to_name+0xc>)
   b5648:	681b      	ldr	r3, [r3, #0]
   b564a:	695b      	ldr	r3, [r3, #20]
   b564c:	9301      	str	r3, [sp, #4]
   b564e:	bd08      	pop	{r3, pc}
   b5650:	0003026c 	.word	0x0003026c

000b5654 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5654:	b508      	push	{r3, lr}
   b5656:	4b02      	ldr	r3, [pc, #8]	; (b5660 <HAL_RNG_GetRandomNumber+0xc>)
   b5658:	681b      	ldr	r3, [r3, #0]
   b565a:	685b      	ldr	r3, [r3, #4]
   b565c:	9301      	str	r3, [sp, #4]
   b565e:	bd08      	pop	{r3, pc}
   b5660:	00030218 	.word	0x00030218

000b5664 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b5664:	b508      	push	{r3, lr}
   b5666:	4b02      	ldr	r3, [pc, #8]	; (b5670 <HAL_Delay_Microseconds+0xc>)
   b5668:	681b      	ldr	r3, [r3, #0]
   b566a:	68db      	ldr	r3, [r3, #12]
   b566c:	9301      	str	r3, [sp, #4]
   b566e:	bd08      	pop	{r3, pc}
   b5670:	00030218 	.word	0x00030218

000b5674 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5674:	b508      	push	{r3, lr}
   b5676:	4b02      	ldr	r3, [pc, #8]	; (b5680 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b5678:	681b      	ldr	r3, [r3, #0]
   b567a:	695b      	ldr	r3, [r3, #20]
   b567c:	9301      	str	r3, [sp, #4]
   b567e:	bd08      	pop	{r3, pc}
   b5680:	00030218 	.word	0x00030218

000b5684 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   b5684:	b508      	push	{r3, lr}
   b5686:	4b02      	ldr	r3, [pc, #8]	; (b5690 <os_mutex_create+0xc>)
   b5688:	681b      	ldr	r3, [r3, #0]
   b568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b568c:	9301      	str	r3, [sp, #4]
   b568e:	bd08      	pop	{r3, pc}
   b5690:	00030248 	.word	0x00030248

000b5694 <os_mutex_destroy>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
   b5694:	b508      	push	{r3, lr}
   b5696:	4b02      	ldr	r3, [pc, #8]	; (b56a0 <os_mutex_destroy+0xc>)
   b5698:	681b      	ldr	r3, [r3, #0]
   b569a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b569c:	9301      	str	r3, [sp, #4]
   b569e:	bd08      	pop	{r3, pc}
   b56a0:	00030248 	.word	0x00030248

000b56a4 <os_mutex_recursive_create>:
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b56a4:	b508      	push	{r3, lr}
   b56a6:	4b02      	ldr	r3, [pc, #8]	; (b56b0 <os_mutex_recursive_create+0xc>)
   b56a8:	681b      	ldr	r3, [r3, #0]
   b56aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b56ac:	9301      	str	r3, [sp, #4]
   b56ae:	bd08      	pop	{r3, pc}
   b56b0:	00030248 	.word	0x00030248

000b56b4 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b56b4:	b508      	push	{r3, lr}
   b56b6:	4b02      	ldr	r3, [pc, #8]	; (b56c0 <inet_inet_ntop+0xc>)
   b56b8:	681b      	ldr	r3, [r3, #0]
   b56ba:	695b      	ldr	r3, [r3, #20]
   b56bc:	9301      	str	r3, [sp, #4]
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	00030264 	.word	0x00030264

000b56c4 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   b56c4:	b508      	push	{r3, lr}
   b56c6:	4b02      	ldr	r3, [pc, #8]	; (b56d0 <inet_htonl+0xc>)
   b56c8:	681b      	ldr	r3, [r3, #0]
   b56ca:	6a1b      	ldr	r3, [r3, #32]
   b56cc:	9301      	str	r3, [sp, #4]
   b56ce:	bd08      	pop	{r3, pc}
   b56d0:	00030264 	.word	0x00030264

000b56d4 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   b56d4:	b508      	push	{r3, lr}
   b56d6:	4b02      	ldr	r3, [pc, #8]	; (b56e0 <inet_htons+0xc>)
   b56d8:	681b      	ldr	r3, [r3, #0]
   b56da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b56dc:	9301      	str	r3, [sp, #4]
   b56de:	bd08      	pop	{r3, pc}
   b56e0:	00030264 	.word	0x00030264

000b56e4 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b56e4:	b508      	push	{r3, lr}
   b56e6:	4b02      	ldr	r3, [pc, #8]	; (b56f0 <hal_usart_write+0xc>)
   b56e8:	681b      	ldr	r3, [r3, #0]
   b56ea:	68db      	ldr	r3, [r3, #12]
   b56ec:	9301      	str	r3, [sp, #4]
   b56ee:	bd08      	pop	{r3, pc}
   b56f0:	0003023c 	.word	0x0003023c

000b56f4 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b56f4:	b508      	push	{r3, lr}
   b56f6:	4b02      	ldr	r3, [pc, #8]	; (b5700 <hal_usart_available+0xc>)
   b56f8:	681b      	ldr	r3, [r3, #0]
   b56fa:	691b      	ldr	r3, [r3, #16]
   b56fc:	9301      	str	r3, [sp, #4]
   b56fe:	bd08      	pop	{r3, pc}
   b5700:	0003023c 	.word	0x0003023c

000b5704 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5704:	b508      	push	{r3, lr}
   b5706:	4b02      	ldr	r3, [pc, #8]	; (b5710 <hal_usart_read+0xc>)
   b5708:	681b      	ldr	r3, [r3, #0]
   b570a:	695b      	ldr	r3, [r3, #20]
   b570c:	9301      	str	r3, [sp, #4]
   b570e:	bd08      	pop	{r3, pc}
   b5710:	0003023c 	.word	0x0003023c

000b5714 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5714:	b508      	push	{r3, lr}
   b5716:	4b02      	ldr	r3, [pc, #8]	; (b5720 <hal_usart_peek+0xc>)
   b5718:	681b      	ldr	r3, [r3, #0]
   b571a:	699b      	ldr	r3, [r3, #24]
   b571c:	9301      	str	r3, [sp, #4]
   b571e:	bd08      	pop	{r3, pc}
   b5720:	0003023c 	.word	0x0003023c

000b5724 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5724:	b508      	push	{r3, lr}
   b5726:	4b02      	ldr	r3, [pc, #8]	; (b5730 <hal_usart_flush+0xc>)
   b5728:	681b      	ldr	r3, [r3, #0]
   b572a:	69db      	ldr	r3, [r3, #28]
   b572c:	9301      	str	r3, [sp, #4]
   b572e:	bd08      	pop	{r3, pc}
   b5730:	0003023c 	.word	0x0003023c

000b5734 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b5734:	b508      	push	{r3, lr}
   b5736:	4b02      	ldr	r3, [pc, #8]	; (b5740 <hal_usart_is_enabled+0xc>)
   b5738:	681b      	ldr	r3, [r3, #0]
   b573a:	6a1b      	ldr	r3, [r3, #32]
   b573c:	9301      	str	r3, [sp, #4]
   b573e:	bd08      	pop	{r3, pc}
   b5740:	0003023c 	.word	0x0003023c

000b5744 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5744:	b508      	push	{r3, lr}
   b5746:	4b02      	ldr	r3, [pc, #8]	; (b5750 <hal_usart_available_data_for_write+0xc>)
   b5748:	681b      	ldr	r3, [r3, #0]
   b574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b574c:	9301      	str	r3, [sp, #4]
   b574e:	bd08      	pop	{r3, pc}
   b5750:	0003023c 	.word	0x0003023c

000b5754 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5754:	b508      	push	{r3, lr}
   b5756:	4b02      	ldr	r3, [pc, #8]	; (b5760 <hal_usart_init_ex+0xc>)
   b5758:	681b      	ldr	r3, [r3, #0]
   b575a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b575c:	9301      	str	r3, [sp, #4]
   b575e:	bd08      	pop	{r3, pc}
   b5760:	0003023c 	.word	0x0003023c

000b5764 <hal_i2c_set_speed>:
#define BASE_IDX 16 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b5764:	b508      	push	{r3, lr}
   b5766:	4b02      	ldr	r3, [pc, #8]	; (b5770 <hal_i2c_set_speed+0xc>)
   b5768:	681b      	ldr	r3, [r3, #0]
   b576a:	681b      	ldr	r3, [r3, #0]
   b576c:	9301      	str	r3, [sp, #4]
   b576e:	bd08      	pop	{r3, pc}
   b5770:	00030228 	.word	0x00030228

000b5774 <hal_i2c_begin>:
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5774:	b508      	push	{r3, lr}
   b5776:	4b02      	ldr	r3, [pc, #8]	; (b5780 <hal_i2c_begin+0xc>)
   b5778:	681b      	ldr	r3, [r3, #0]
   b577a:	68db      	ldr	r3, [r3, #12]
   b577c:	9301      	str	r3, [sp, #4]
   b577e:	bd08      	pop	{r3, pc}
   b5780:	00030228 	.word	0x00030228

000b5784 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5784:	b508      	push	{r3, lr}
   b5786:	4b02      	ldr	r3, [pc, #8]	; (b5790 <hal_i2c_begin_transmission+0xc>)
   b5788:	681b      	ldr	r3, [r3, #0]
   b578a:	699b      	ldr	r3, [r3, #24]
   b578c:	9301      	str	r3, [sp, #4]
   b578e:	bd08      	pop	{r3, pc}
   b5790:	00030228 	.word	0x00030228

000b5794 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5794:	b508      	push	{r3, lr}
   b5796:	4b02      	ldr	r3, [pc, #8]	; (b57a0 <hal_i2c_end_transmission+0xc>)
   b5798:	681b      	ldr	r3, [r3, #0]
   b579a:	69db      	ldr	r3, [r3, #28]
   b579c:	9301      	str	r3, [sp, #4]
   b579e:	bd08      	pop	{r3, pc}
   b57a0:	00030228 	.word	0x00030228

000b57a4 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b57a4:	b508      	push	{r3, lr}
   b57a6:	4b02      	ldr	r3, [pc, #8]	; (b57b0 <hal_i2c_write+0xc>)
   b57a8:	681b      	ldr	r3, [r3, #0]
   b57aa:	6a1b      	ldr	r3, [r3, #32]
   b57ac:	9301      	str	r3, [sp, #4]
   b57ae:	bd08      	pop	{r3, pc}
   b57b0:	00030228 	.word	0x00030228

000b57b4 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b57b4:	b508      	push	{r3, lr}
   b57b6:	4b02      	ldr	r3, [pc, #8]	; (b57c0 <hal_i2c_available+0xc>)
   b57b8:	681b      	ldr	r3, [r3, #0]
   b57ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b57bc:	9301      	str	r3, [sp, #4]
   b57be:	bd08      	pop	{r3, pc}
   b57c0:	00030228 	.word	0x00030228

000b57c4 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b57c4:	b508      	push	{r3, lr}
   b57c6:	4b02      	ldr	r3, [pc, #8]	; (b57d0 <hal_i2c_read+0xc>)
   b57c8:	681b      	ldr	r3, [r3, #0]
   b57ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b57cc:	9301      	str	r3, [sp, #4]
   b57ce:	bd08      	pop	{r3, pc}
   b57d0:	00030228 	.word	0x00030228

000b57d4 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b57d4:	b508      	push	{r3, lr}
   b57d6:	4b02      	ldr	r3, [pc, #8]	; (b57e0 <hal_i2c_peek+0xc>)
   b57d8:	681b      	ldr	r3, [r3, #0]
   b57da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b57dc:	9301      	str	r3, [sp, #4]
   b57de:	bd08      	pop	{r3, pc}
   b57e0:	00030228 	.word	0x00030228

000b57e4 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b57e4:	b508      	push	{r3, lr}
   b57e6:	4b02      	ldr	r3, [pc, #8]	; (b57f0 <hal_i2c_flush+0xc>)
   b57e8:	681b      	ldr	r3, [r3, #0]
   b57ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b57ec:	9301      	str	r3, [sp, #4]
   b57ee:	bd08      	pop	{r3, pc}
   b57f0:	00030228 	.word	0x00030228

000b57f4 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b57f4:	b508      	push	{r3, lr}
   b57f6:	4b02      	ldr	r3, [pc, #8]	; (b5800 <hal_i2c_is_enabled+0xc>)
   b57f8:	681b      	ldr	r3, [r3, #0]
   b57fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b57fc:	9301      	str	r3, [sp, #4]
   b57fe:	bd08      	pop	{r3, pc}
   b5800:	00030228 	.word	0x00030228

000b5804 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b5804:	b508      	push	{r3, lr}
   b5806:	4b02      	ldr	r3, [pc, #8]	; (b5810 <hal_i2c_init+0xc>)
   b5808:	681b      	ldr	r3, [r3, #0]
   b580a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b580c:	9301      	str	r3, [sp, #4]
   b580e:	bd08      	pop	{r3, pc}
   b5810:	00030228 	.word	0x00030228

000b5814 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   b5814:	b508      	push	{r3, lr}
   b5816:	4b02      	ldr	r3, [pc, #8]	; (b5820 <sock_setsockopt+0xc>)
   b5818:	681b      	ldr	r3, [r3, #0]
   b581a:	699b      	ldr	r3, [r3, #24]
   b581c:	9301      	str	r3, [sp, #4]
   b581e:	bd08      	pop	{r3, pc}
   b5820:	00030238 	.word	0x00030238

000b5824 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   b5824:	b508      	push	{r3, lr}
   b5826:	4b02      	ldr	r3, [pc, #8]	; (b5830 <sock_close+0xc>)
   b5828:	681b      	ldr	r3, [r3, #0]
   b582a:	69db      	ldr	r3, [r3, #28]
   b582c:	9301      	str	r3, [sp, #4]
   b582e:	bd08      	pop	{r3, pc}
   b5830:	00030238 	.word	0x00030238

000b5834 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   b5834:	b508      	push	{r3, lr}
   b5836:	4b02      	ldr	r3, [pc, #8]	; (b5840 <sock_connect+0xc>)
   b5838:	681b      	ldr	r3, [r3, #0]
   b583a:	6a1b      	ldr	r3, [r3, #32]
   b583c:	9301      	str	r3, [sp, #4]
   b583e:	bd08      	pop	{r3, pc}
   b5840:	00030238 	.word	0x00030238

000b5844 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   b5844:	b508      	push	{r3, lr}
   b5846:	4b02      	ldr	r3, [pc, #8]	; (b5850 <sock_recv+0xc>)
   b5848:	681b      	ldr	r3, [r3, #0]
   b584a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b584c:	9301      	str	r3, [sp, #4]
   b584e:	bd08      	pop	{r3, pc}
   b5850:	00030238 	.word	0x00030238

000b5854 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   b5854:	b508      	push	{r3, lr}
   b5856:	4b02      	ldr	r3, [pc, #8]	; (b5860 <sock_send+0xc>)
   b5858:	681b      	ldr	r3, [r3, #0]
   b585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b585c:	9301      	str	r3, [sp, #4]
   b585e:	bd08      	pop	{r3, pc}
   b5860:	00030238 	.word	0x00030238

000b5864 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   b5864:	b508      	push	{r3, lr}
   b5866:	4b02      	ldr	r3, [pc, #8]	; (b5870 <sock_socket+0xc>)
   b5868:	681b      	ldr	r3, [r3, #0]
   b586a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   b586c:	9301      	str	r3, [sp, #4]
   b586e:	bd08      	pop	{r3, pc}
   b5870:	00030238 	.word	0x00030238

000b5874 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   b5874:	b508      	push	{r3, lr}
   b5876:	4b02      	ldr	r3, [pc, #8]	; (b5880 <hal_spi_begin+0xc>)
   b5878:	681b      	ldr	r3, [r3, #0]
   b587a:	681b      	ldr	r3, [r3, #0]
   b587c:	9301      	str	r3, [sp, #4]
   b587e:	bd08      	pop	{r3, pc}
   b5880:	00030230 	.word	0x00030230

000b5884 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   b5884:	b508      	push	{r3, lr}
   b5886:	4b02      	ldr	r3, [pc, #8]	; (b5890 <hal_spi_transfer+0xc>)
   b5888:	681b      	ldr	r3, [r3, #0]
   b588a:	695b      	ldr	r3, [r3, #20]
   b588c:	9301      	str	r3, [sp, #4]
   b588e:	bd08      	pop	{r3, pc}
   b5890:	00030230 	.word	0x00030230

000b5894 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b5894:	b508      	push	{r3, lr}
   b5896:	4b02      	ldr	r3, [pc, #8]	; (b58a0 <hal_spi_init+0xc>)
   b5898:	681b      	ldr	r3, [r3, #0]
   b589a:	69db      	ldr	r3, [r3, #28]
   b589c:	9301      	str	r3, [sp, #4]
   b589e:	bd08      	pop	{r3, pc}
   b58a0:	00030230 	.word	0x00030230

000b58a4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b58a4:	b508      	push	{r3, lr}
   b58a6:	4b02      	ldr	r3, [pc, #8]	; (b58b0 <hal_spi_is_enabled+0xc>)
   b58a8:	681b      	ldr	r3, [r3, #0]
   b58aa:	6a1b      	ldr	r3, [r3, #32]
   b58ac:	9301      	str	r3, [sp, #4]
   b58ae:	bd08      	pop	{r3, pc}
   b58b0:	00030230 	.word	0x00030230

000b58b4 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   b58b4:	b508      	push	{r3, lr}
   b58b6:	4b02      	ldr	r3, [pc, #8]	; (b58c0 <hal_spi_info+0xc>)
   b58b8:	681b      	ldr	r3, [r3, #0]
   b58ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b58bc:	9301      	str	r3, [sp, #4]
   b58be:	bd08      	pop	{r3, pc}
   b58c0:	00030230 	.word	0x00030230

000b58c4 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   b58c4:	b508      	push	{r3, lr}
   b58c6:	4b02      	ldr	r3, [pc, #8]	; (b58d0 <hal_spi_set_settings+0xc>)
   b58c8:	681b      	ldr	r3, [r3, #0]
   b58ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b58cc:	9301      	str	r3, [sp, #4]
   b58ce:	bd08      	pop	{r3, pc}
   b58d0:	00030230 	.word	0x00030230

000b58d4 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   b58d4:	b508      	push	{r3, lr}
   b58d6:	4b02      	ldr	r3, [pc, #8]	; (b58e0 <hal_spi_acquire+0xc>)
   b58d8:	681b      	ldr	r3, [r3, #0]
   b58da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b58dc:	9301      	str	r3, [sp, #4]
   b58de:	bd08      	pop	{r3, pc}
   b58e0:	00030230 	.word	0x00030230

000b58e4 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   b58e4:	b508      	push	{r3, lr}
   b58e6:	4b02      	ldr	r3, [pc, #8]	; (b58f0 <hal_spi_release+0xc>)
   b58e8:	681b      	ldr	r3, [r3, #0]
   b58ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b58ec:	9301      	str	r3, [sp, #4]
   b58ee:	bd08      	pop	{r3, pc}
   b58f0:	00030230 	.word	0x00030230

000b58f4 <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   b58f4:	b508      	push	{r3, lr}
   b58f6:	4b02      	ldr	r3, [pc, #8]	; (b5900 <HAL_Tone_Start+0xc>)
   b58f8:	681b      	ldr	r3, [r3, #0]
   b58fa:	681b      	ldr	r3, [r3, #0]
   b58fc:	9301      	str	r3, [sp, #4]
   b58fe:	bd08      	pop	{r3, pc}
   b5900:	00030224 	.word	0x00030224

000b5904 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5904:	b508      	push	{r3, lr}
   b5906:	4b02      	ldr	r3, [pc, #8]	; (b5910 <HAL_USB_USART_Init+0xc>)
   b5908:	681b      	ldr	r3, [r3, #0]
   b590a:	681b      	ldr	r3, [r3, #0]
   b590c:	9301      	str	r3, [sp, #4]
   b590e:	bd08      	pop	{r3, pc}
   b5910:	0003024c 	.word	0x0003024c

000b5914 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b5914:	b508      	push	{r3, lr}
   b5916:	4b02      	ldr	r3, [pc, #8]	; (b5920 <HAL_USB_USART_Available_Data+0xc>)
   b5918:	681b      	ldr	r3, [r3, #0]
   b591a:	691b      	ldr	r3, [r3, #16]
   b591c:	9301      	str	r3, [sp, #4]
   b591e:	bd08      	pop	{r3, pc}
   b5920:	0003024c 	.word	0x0003024c

000b5924 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b5924:	b508      	push	{r3, lr}
   b5926:	4b02      	ldr	r3, [pc, #8]	; (b5930 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b5928:	681b      	ldr	r3, [r3, #0]
   b592a:	695b      	ldr	r3, [r3, #20]
   b592c:	9301      	str	r3, [sp, #4]
   b592e:	bd08      	pop	{r3, pc}
   b5930:	0003024c 	.word	0x0003024c

000b5934 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5934:	b508      	push	{r3, lr}
   b5936:	4b02      	ldr	r3, [pc, #8]	; (b5940 <HAL_USB_USART_Receive_Data+0xc>)
   b5938:	681b      	ldr	r3, [r3, #0]
   b593a:	699b      	ldr	r3, [r3, #24]
   b593c:	9301      	str	r3, [sp, #4]
   b593e:	bd08      	pop	{r3, pc}
   b5940:	0003024c 	.word	0x0003024c

000b5944 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b5944:	b508      	push	{r3, lr}
   b5946:	4b02      	ldr	r3, [pc, #8]	; (b5950 <HAL_USB_USART_Send_Data+0xc>)
   b5948:	681b      	ldr	r3, [r3, #0]
   b594a:	69db      	ldr	r3, [r3, #28]
   b594c:	9301      	str	r3, [sp, #4]
   b594e:	bd08      	pop	{r3, pc}
   b5950:	0003024c 	.word	0x0003024c

000b5954 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b5954:	b508      	push	{r3, lr}
   b5956:	4b02      	ldr	r3, [pc, #8]	; (b5960 <HAL_USB_USART_Flush_Data+0xc>)
   b5958:	681b      	ldr	r3, [r3, #0]
   b595a:	6a1b      	ldr	r3, [r3, #32]
   b595c:	9301      	str	r3, [sp, #4]
   b595e:	bd08      	pop	{r3, pc}
   b5960:	0003024c 	.word	0x0003024c

000b5964 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b5964:	b508      	push	{r3, lr}
   b5966:	4b02      	ldr	r3, [pc, #8]	; (b5970 <panic_+0xc>)
   b5968:	681b      	ldr	r3, [r3, #0]
   b596a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b596c:	9301      	str	r3, [sp, #4]
   b596e:	bd08      	pop	{r3, pc}
   b5970:	00030260 	.word	0x00030260

000b5974 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b5974:	b508      	push	{r3, lr}
   b5976:	4b02      	ldr	r3, [pc, #8]	; (b5980 <log_message+0xc>)
   b5978:	681b      	ldr	r3, [r3, #0]
   b597a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b597c:	9301      	str	r3, [sp, #4]
   b597e:	bd08      	pop	{r3, pc}
   b5980:	00030260 	.word	0x00030260

000b5984 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5984:	b508      	push	{r3, lr}
   b5986:	4b02      	ldr	r3, [pc, #8]	; (b5990 <set_system_mode+0xc>)
   b5988:	681b      	ldr	r3, [r3, #0]
   b598a:	685b      	ldr	r3, [r3, #4]
   b598c:	9301      	str	r3, [sp, #4]
   b598e:	bd08      	pop	{r3, pc}
   b5990:	00030220 	.word	0x00030220

000b5994 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5994:	b508      	push	{r3, lr}
   b5996:	4b02      	ldr	r3, [pc, #8]	; (b59a0 <system_delay_ms+0xc>)
   b5998:	681b      	ldr	r3, [r3, #0]
   b599a:	695b      	ldr	r3, [r3, #20]
   b599c:	9301      	str	r3, [sp, #4]
   b599e:	bd08      	pop	{r3, pc}
   b59a0:	00030220 	.word	0x00030220

000b59a4 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b59a4:	b508      	push	{r3, lr}
   b59a6:	4b02      	ldr	r3, [pc, #8]	; (b59b0 <system_thread_set_state+0xc>)
   b59a8:	681b      	ldr	r3, [r3, #0]
   b59aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b59ac:	9301      	str	r3, [sp, #4]
   b59ae:	bd08      	pop	{r3, pc}
   b59b0:	00030220 	.word	0x00030220

000b59b4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b59b4:	b508      	push	{r3, lr}
   b59b6:	4b03      	ldr	r3, [pc, #12]	; (b59c4 <system_ctrl_set_app_request_handler+0x10>)
   b59b8:	681b      	ldr	r3, [r3, #0]
   b59ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b59be:	9301      	str	r3, [sp, #4]
   b59c0:	bd08      	pop	{r3, pc}
   b59c2:	0000      	.short	0x0000
   b59c4:	00030220 	.word	0x00030220

000b59c8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b59c8:	b508      	push	{r3, lr}
   b59ca:	4b03      	ldr	r3, [pc, #12]	; (b59d8 <system_ctrl_set_result+0x10>)
   b59cc:	681b      	ldr	r3, [r3, #0]
   b59ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b59d2:	9301      	str	r3, [sp, #4]
   b59d4:	bd08      	pop	{r3, pc}
   b59d6:	0000      	.short	0x0000
   b59d8:	00030220 	.word	0x00030220

000b59dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b59dc:	b508      	push	{r3, lr}
   b59de:	4b02      	ldr	r3, [pc, #8]	; (b59e8 <network_connect+0xc>)
   b59e0:	681b      	ldr	r3, [r3, #0]
   b59e2:	685b      	ldr	r3, [r3, #4]
   b59e4:	9301      	str	r3, [sp, #4]
   b59e6:	bd08      	pop	{r3, pc}
   b59e8:	00030240 	.word	0x00030240

000b59ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b59ec:	b508      	push	{r3, lr}
   b59ee:	4b02      	ldr	r3, [pc, #8]	; (b59f8 <network_connecting+0xc>)
   b59f0:	681b      	ldr	r3, [r3, #0]
   b59f2:	689b      	ldr	r3, [r3, #8]
   b59f4:	9301      	str	r3, [sp, #4]
   b59f6:	bd08      	pop	{r3, pc}
   b59f8:	00030240 	.word	0x00030240

000b59fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b59fc:	b508      	push	{r3, lr}
   b59fe:	4b02      	ldr	r3, [pc, #8]	; (b5a08 <network_disconnect+0xc>)
   b5a00:	681b      	ldr	r3, [r3, #0]
   b5a02:	68db      	ldr	r3, [r3, #12]
   b5a04:	9301      	str	r3, [sp, #4]
   b5a06:	bd08      	pop	{r3, pc}
   b5a08:	00030240 	.word	0x00030240

000b5a0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5a0c:	b508      	push	{r3, lr}
   b5a0e:	4b02      	ldr	r3, [pc, #8]	; (b5a18 <network_ready+0xc>)
   b5a10:	681b      	ldr	r3, [r3, #0]
   b5a12:	691b      	ldr	r3, [r3, #16]
   b5a14:	9301      	str	r3, [sp, #4]
   b5a16:	bd08      	pop	{r3, pc}
   b5a18:	00030240 	.word	0x00030240

000b5a1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a1c:	b508      	push	{r3, lr}
   b5a1e:	4b02      	ldr	r3, [pc, #8]	; (b5a28 <network_on+0xc>)
   b5a20:	681b      	ldr	r3, [r3, #0]
   b5a22:	695b      	ldr	r3, [r3, #20]
   b5a24:	9301      	str	r3, [sp, #4]
   b5a26:	bd08      	pop	{r3, pc}
   b5a28:	00030240 	.word	0x00030240

000b5a2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5a2c:	b508      	push	{r3, lr}
   b5a2e:	4b02      	ldr	r3, [pc, #8]	; (b5a38 <network_off+0xc>)
   b5a30:	681b      	ldr	r3, [r3, #0]
   b5a32:	699b      	ldr	r3, [r3, #24]
   b5a34:	9301      	str	r3, [sp, #4]
   b5a36:	bd08      	pop	{r3, pc}
   b5a38:	00030240 	.word	0x00030240

000b5a3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5a3c:	b508      	push	{r3, lr}
   b5a3e:	4b02      	ldr	r3, [pc, #8]	; (b5a48 <network_listen+0xc>)
   b5a40:	681b      	ldr	r3, [r3, #0]
   b5a42:	69db      	ldr	r3, [r3, #28]
   b5a44:	9301      	str	r3, [sp, #4]
   b5a46:	bd08      	pop	{r3, pc}
   b5a48:	00030240 	.word	0x00030240

000b5a4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5a4c:	b508      	push	{r3, lr}
   b5a4e:	4b02      	ldr	r3, [pc, #8]	; (b5a58 <network_listening+0xc>)
   b5a50:	681b      	ldr	r3, [r3, #0]
   b5a52:	6a1b      	ldr	r3, [r3, #32]
   b5a54:	9301      	str	r3, [sp, #4]
   b5a56:	bd08      	pop	{r3, pc}
   b5a58:	00030240 	.word	0x00030240

000b5a5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5a5c:	b508      	push	{r3, lr}
   b5a5e:	4b02      	ldr	r3, [pc, #8]	; (b5a68 <network_set_listen_timeout+0xc>)
   b5a60:	681b      	ldr	r3, [r3, #0]
   b5a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5a64:	9301      	str	r3, [sp, #4]
   b5a66:	bd08      	pop	{r3, pc}
   b5a68:	00030240 	.word	0x00030240

000b5a6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5a6c:	b508      	push	{r3, lr}
   b5a6e:	4b02      	ldr	r3, [pc, #8]	; (b5a78 <network_get_listen_timeout+0xc>)
   b5a70:	681b      	ldr	r3, [r3, #0]
   b5a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5a74:	9301      	str	r3, [sp, #4]
   b5a76:	bd08      	pop	{r3, pc}
   b5a78:	00030240 	.word	0x00030240

000b5a7c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5a7c:	b508      	push	{r3, lr}
   b5a7e:	4b02      	ldr	r3, [pc, #8]	; (b5a88 <network_is_on+0xc>)
   b5a80:	681b      	ldr	r3, [r3, #0]
   b5a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5a84:	9301      	str	r3, [sp, #4]
   b5a86:	bd08      	pop	{r3, pc}
   b5a88:	00030240 	.word	0x00030240

000b5a8c <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5a8c:	b508      	push	{r3, lr}
   b5a8e:	4b02      	ldr	r3, [pc, #8]	; (b5a98 <network_is_off+0xc>)
   b5a90:	681b      	ldr	r3, [r3, #0]
   b5a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5a94:	9301      	str	r3, [sp, #4]
   b5a96:	bd08      	pop	{r3, pc}
   b5a98:	00030240 	.word	0x00030240

000b5a9c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5a9c:	b508      	push	{r3, lr}
   b5a9e:	4b02      	ldr	r3, [pc, #8]	; (b5aa8 <spark_set_random_seed_from_cloud_handler+0xc>)
   b5aa0:	681b      	ldr	r3, [r3, #0]
   b5aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5aa4:	9301      	str	r3, [sp, #4]
   b5aa6:	bd08      	pop	{r3, pc}
   b5aa8:	00030244 	.word	0x00030244

000b5aac <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5aac:	b508      	push	{r3, lr}
   b5aae:	4b02      	ldr	r3, [pc, #8]	; (b5ab8 <malloc+0xc>)
   b5ab0:	681b      	ldr	r3, [r3, #0]
   b5ab2:	681b      	ldr	r3, [r3, #0]
   b5ab4:	9301      	str	r3, [sp, #4]
   b5ab6:	bd08      	pop	{r3, pc}
   b5ab8:	0003021c 	.word	0x0003021c

000b5abc <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5abc:	b508      	push	{r3, lr}
   b5abe:	4b02      	ldr	r3, [pc, #8]	; (b5ac8 <free+0xc>)
   b5ac0:	681b      	ldr	r3, [r3, #0]
   b5ac2:	685b      	ldr	r3, [r3, #4]
   b5ac4:	9301      	str	r3, [sp, #4]
   b5ac6:	bd08      	pop	{r3, pc}
   b5ac8:	0003021c 	.word	0x0003021c

000b5acc <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   b5acc:	b508      	push	{r3, lr}
   b5ace:	4b02      	ldr	r3, [pc, #8]	; (b5ad8 <vsnprintf+0xc>)
   b5ad0:	681b      	ldr	r3, [r3, #0]
   b5ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b5ad4:	9301      	str	r3, [sp, #4]
   b5ad6:	bd08      	pop	{r3, pc}
   b5ad8:	0003021c 	.word	0x0003021c

000b5adc <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   b5adc:	b508      	push	{r3, lr}
   b5ade:	4b02      	ldr	r3, [pc, #8]	; (b5ae8 <__errno+0xc>)
   b5ae0:	681b      	ldr	r3, [r3, #0]
   b5ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5ae4:	9301      	str	r3, [sp, #4]
   b5ae6:	bd08      	pop	{r3, pc}
   b5ae8:	0003021c 	.word	0x0003021c

000b5aec <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5aec:	b508      	push	{r3, lr}
   b5aee:	4b02      	ldr	r3, [pc, #8]	; (b5af8 <__assert_func+0xc>)
   b5af0:	681b      	ldr	r3, [r3, #0]
   b5af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5af4:	9301      	str	r3, [sp, #4]
   b5af6:	bd08      	pop	{r3, pc}
   b5af8:	0003021c 	.word	0x0003021c

000b5afc <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5afc:	b508      	push	{r3, lr}
   b5afe:	4b02      	ldr	r3, [pc, #8]	; (b5b08 <newlib_impure_ptr_callback+0xc>)
   b5b00:	681b      	ldr	r3, [r3, #0]
   b5b02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5b04:	9301      	str	r3, [sp, #4]
   b5b06:	bd08      	pop	{r3, pc}
   b5b08:	0003021c 	.word	0x0003021c

000b5b0c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b0c:	2200      	movs	r2, #0
   b5b0e:	6840      	ldr	r0, [r0, #4]
   b5b10:	4611      	mov	r1, r2
   b5b12:	f7ff bf9b 	b.w	b5a4c <network_listening>

000b5b16 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b16:	2200      	movs	r2, #0
   b5b18:	6840      	ldr	r0, [r0, #4]
   b5b1a:	4611      	mov	r1, r2
   b5b1c:	f7ff bfa6 	b.w	b5a6c <network_get_listen_timeout>

000b5b20 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b20:	6840      	ldr	r0, [r0, #4]
   b5b22:	2200      	movs	r2, #0
   b5b24:	f7ff bf9a 	b.w	b5a5c <network_set_listen_timeout>

000b5b28 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5b28:	6840      	ldr	r0, [r0, #4]
   b5b2a:	2200      	movs	r2, #0
   b5b2c:	f081 0101 	eor.w	r1, r1, #1
   b5b30:	f7ff bf84 	b.w	b5a3c <network_listen>

000b5b34 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5b34:	2300      	movs	r3, #0
   b5b36:	6840      	ldr	r0, [r0, #4]
   b5b38:	461a      	mov	r2, r3
   b5b3a:	4619      	mov	r1, r3
   b5b3c:	f7ff bf76 	b.w	b5a2c <network_off>

000b5b40 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5b40:	2300      	movs	r3, #0
   b5b42:	6840      	ldr	r0, [r0, #4]
   b5b44:	461a      	mov	r2, r3
   b5b46:	4619      	mov	r1, r3
   b5b48:	f7ff bf68 	b.w	b5a1c <network_on>

000b5b4c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5b4c:	2200      	movs	r2, #0
   b5b4e:	6840      	ldr	r0, [r0, #4]
   b5b50:	4611      	mov	r1, r2
   b5b52:	f7ff bf5b 	b.w	b5a0c <network_ready>

000b5b56 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5b56:	2200      	movs	r2, #0
   b5b58:	6840      	ldr	r0, [r0, #4]
   b5b5a:	4611      	mov	r1, r2
   b5b5c:	f7ff bf46 	b.w	b59ec <network_connecting>

000b5b60 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5b60:	6840      	ldr	r0, [r0, #4]
   b5b62:	2200      	movs	r2, #0
   b5b64:	2102      	movs	r1, #2
   b5b66:	f7ff bf49 	b.w	b59fc <network_disconnect>

000b5b6a <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5b6a:	2300      	movs	r3, #0
   b5b6c:	6840      	ldr	r0, [r0, #4]
   b5b6e:	461a      	mov	r2, r3
   b5b70:	f7ff bf34 	b.w	b59dc <network_connect>

000b5b74 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5b74:	4b02      	ldr	r3, [pc, #8]	; (b5b80 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5b76:	2203      	movs	r2, #3
   b5b78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5b7a:	4a02      	ldr	r2, [pc, #8]	; (b5b84 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5b7c:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5b7e:	4770      	bx	lr
   b5b80:	2003e6c4 	.word	0x2003e6c4
   b5b84:	000b7c20 	.word	0x000b7c20

000b5b88 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   b5b88:	2100      	movs	r1, #0
   b5b8a:	f7ff beab 	b.w	b58e4 <hal_spi_release>

000b5b8e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
   b5b8e:	2100      	movs	r1, #0
   b5b90:	f7ff bea0 	b.w	b58d4 <hal_spi_acquire>

000b5b94 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5b94:	b510      	push	{r4, lr}
   b5b96:	4604      	mov	r4, r0
   b5b98:	4608      	mov	r0, r1
{
    _spi = spi;
   b5b9a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5b9c:	f7ff fe7a 	bl	b5894 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5ba0:	2300      	movs	r3, #0
   b5ba2:	6063      	str	r3, [r4, #4]
}
   b5ba4:	4620      	mov	r0, r4
   b5ba6:	bd10      	pop	{r4, pc}

000b5ba8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   b5ba8:	b513      	push	{r0, r1, r4, lr}
   b5baa:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   b5bac:	7800      	ldrb	r0, [r0, #0]
   b5bae:	f7ff ffee 	bl	b5b8e <_ZN8SPIClass4lockEv.isra.0>
   b5bb2:	b958      	cbnz	r0, b5bcc <_ZN8SPIClass5beginEv+0x24>
   b5bb4:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   b5bb6:	9001      	str	r0, [sp, #4]
   b5bb8:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b5bbc:	f7ff fe5a 	bl	b5874 <hal_spi_begin>
        unlock();
   b5bc0:	9801      	ldr	r0, [sp, #4]
    }
}
   b5bc2:	b002      	add	sp, #8
   b5bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b5bc8:	f7ff bfde 	b.w	b5b88 <_ZN8SPIClass6unlockEv.isra.0>
   b5bcc:	b002      	add	sp, #8
   b5bce:	bd10      	pop	{r4, pc}

000b5bd0 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   b5bd0:	7800      	ldrb	r0, [r0, #0]
   b5bd2:	f7ff bfd9 	b.w	b5b88 <_ZN8SPIClass6unlockEv.isra.0>
	...

000b5bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   b5bd8:	0840      	lsrs	r0, r0, #1
{
   b5bda:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   b5bdc:	6018      	str	r0, [r3, #0]
   b5bde:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   b5be0:	6818      	ldr	r0, [r3, #0]
   b5be2:	4288      	cmp	r0, r1
   b5be4:	b2e5      	uxtb	r5, r4
   b5be6:	d906      	bls.n	b5bf6 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   b5be8:	3401      	adds	r4, #1
   b5bea:	2c08      	cmp	r4, #8
   b5bec:	d002      	beq.n	b5bf4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   b5bee:	0840      	lsrs	r0, r0, #1
   b5bf0:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   b5bf2:	e7f5      	b.n	b5be0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   b5bf4:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   b5bf6:	4b02      	ldr	r3, [pc, #8]	; (b5c00 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   b5bf8:	5d5b      	ldrb	r3, [r3, r5]
   b5bfa:	7013      	strb	r3, [r2, #0]
}
   b5bfc:	bd30      	pop	{r4, r5, pc}
   b5bfe:	bf00      	nop
   b5c00:	000b7c54 	.word	0x000b7c54

000b5c04 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   b5c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5c08:	4606      	mov	r6, r0
   b5c0a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   b5c0c:	7800      	ldrb	r0, [r0, #0]
{
   b5c0e:	460c      	mov	r4, r1
    CHECK(lock());
   b5c10:	f7ff ffbd 	bl	b5b8e <_ZN8SPIClass4lockEv.isra.0>
   b5c14:	2800      	cmp	r0, #0
   b5c16:	db1b      	blt.n	b5c50 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   b5c18:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   b5c1a:	2214      	movs	r2, #20
   b5c1c:	2100      	movs	r1, #0
   b5c1e:	a809      	add	r0, sp, #36	; 0x24
   b5c20:	f001 f99a 	bl	b6f58 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c24:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   b5c26:	2200      	movs	r2, #0
   b5c28:	a909      	add	r1, sp, #36	; 0x24
   b5c2a:	4628      	mov	r0, r5
    info->version = HAL_SPI_INFO_VERSION_1;
   b5c2c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   b5c30:	f7ff fe40 	bl	b58b4 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   b5c34:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   b5c38:	b113      	cbz	r3, b5c40 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   b5c3a:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   b5c3e:	b155      	cbz	r5, b5c56 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   b5c40:	2700      	movs	r7, #0
   b5c42:	46b9      	mov	r9, r7
   b5c44:	46b8      	mov	r8, r7
   b5c46:	2501      	movs	r5, #1
    if (default_ && other.default_)
   b5c48:	7923      	ldrb	r3, [r4, #4]
   b5c4a:	b15d      	cbz	r5, b5c64 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   b5c4c:	b1c3      	cbz	r3, b5c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   b5c4e:	2000      	movs	r0, #0
}
   b5c50:	b00f      	add	sp, #60	; 0x3c
   b5c52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   b5c56:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   b5c5a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   b5c5e:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   b5c62:	e7f1      	b.n	b5c48 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   b5c64:	2b00      	cmp	r3, #0
   b5c66:	d135      	bne.n	b5cd4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   b5c68:	68a3      	ldr	r3, [r4, #8]
   b5c6a:	4543      	cmp	r3, r8
   b5c6c:	d108      	bne.n	b5c80 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   b5c6e:	f88d 9020 	strb.w	r9, [sp, #32]
   b5c72:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5c76:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5c7a:	89a3      	ldrh	r3, [r4, #12]
   b5c7c:	429a      	cmp	r2, r3
   b5c7e:	d0e6      	beq.n	b5c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   b5c80:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5c82:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
   b5c84:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   b5c88:	980a      	ldr	r0, [sp, #40]	; 0x28
   b5c8a:	ab04      	add	r3, sp, #16
   b5c8c:	f10d 020f 	add.w	r2, sp, #15
   b5c90:	f7ff ffa2 	bl	b5bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   b5c94:	7921      	ldrb	r1, [r4, #4]
   b5c96:	b985      	cbnz	r5, b5cba <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   b5c98:	b989      	cbnz	r1, b5cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5c9a:	68a3      	ldr	r3, [r4, #8]
   b5c9c:	4543      	cmp	r3, r8
   b5c9e:	d30e      	bcc.n	b5cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   b5ca0:	f88d 9020 	strb.w	r9, [sp, #32]
   b5ca4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   b5ca8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   b5cac:	89a3      	ldrh	r3, [r4, #12]
   b5cae:	429a      	cmp	r2, r3
   b5cb0:	d105      	bne.n	b5cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   b5cb2:	9b04      	ldr	r3, [sp, #16]
   b5cb4:	4543      	cmp	r3, r8
   b5cb6:	d102      	bne.n	b5cbe <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   b5cb8:	e7c9      	b.n	b5c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   b5cba:	2900      	cmp	r1, #0
   b5cbc:	d1f9      	bne.n	b5cb2 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   b5cbe:	2300      	movs	r3, #0
   b5cc0:	9301      	str	r3, [sp, #4]
   b5cc2:	7b63      	ldrb	r3, [r4, #13]
   b5cc4:	9300      	str	r3, [sp, #0]
   b5cc6:	f89d 200f 	ldrb.w	r2, [sp, #15]
   b5cca:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   b5ccc:	7830      	ldrb	r0, [r6, #0]
   b5cce:	f7ff fdf9 	bl	b58c4 <hal_spi_set_settings>
   b5cd2:	e7bc      	b.n	b5c4e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   b5cd4:	e9cd 5500 	strd	r5, r5, [sp]
   b5cd8:	462b      	mov	r3, r5
   b5cda:	462a      	mov	r2, r5
   b5cdc:	2101      	movs	r1, #1
   b5cde:	e7f5      	b.n	b5ccc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000b5ce0 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   b5ce0:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   b5ce2:	7800      	ldrb	r0, [r0, #0]
   b5ce4:	f7ff fdce 	bl	b5884 <hal_spi_transfer>
}
   b5ce8:	b2c0      	uxtb	r0, r0
   b5cea:	bd08      	pop	{r3, pc}

000b5cec <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5cec:	4b05      	ldr	r3, [pc, #20]	; (b5d04 <_GLOBAL__sub_I_System+0x18>)
   b5cee:	2202      	movs	r2, #2
   b5cf0:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5cf2:	4b05      	ldr	r3, [pc, #20]	; (b5d08 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5cf4:	4a05      	ldr	r2, [pc, #20]	; (b5d0c <_GLOBAL__sub_I_System+0x20>)
   b5cf6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5cf8:	2000      	movs	r0, #0
   b5cfa:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5cfe:	f7ff be41 	b.w	b5984 <set_system_mode>
   b5d02:	bf00      	nop
   b5d04:	2003e6d8 	.word	0x2003e6d8
   b5d08:	2003e6cc 	.word	0x2003e6cc
   b5d0c:	ffff0000 	.word	0xffff0000

000b5d10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
   b5d10:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b5d12:	6843      	ldr	r3, [r0, #4]
   b5d14:	3b01      	subs	r3, #1
    {
   b5d16:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b5d18:	6043      	str	r3, [r0, #4]
   b5d1a:	b963      	cbnz	r3, b5d36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
        {
          _M_dispose();
   b5d1c:	6803      	ldr	r3, [r0, #0]
   b5d1e:	689b      	ldr	r3, [r3, #8]
   b5d20:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b5d22:	68a3      	ldr	r3, [r4, #8]
   b5d24:	3b01      	subs	r3, #1
   b5d26:	60a3      	str	r3, [r4, #8]
   b5d28:	b92b      	cbnz	r3, b5d36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b5d2a:	6823      	ldr	r3, [r4, #0]
   b5d2c:	4620      	mov	r0, r4
   b5d2e:	68db      	ldr	r3, [r3, #12]
        }
    }
   b5d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b5d34:	4718      	bx	r3
    }
   b5d36:	bd10      	pop	{r4, pc}

000b5d38 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5d38:	4802      	ldr	r0, [pc, #8]	; (b5d44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b5d3a:	2300      	movs	r3, #0
   b5d3c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5d3e:	f7ff bcb1 	b.w	b56a4 <os_mutex_recursive_create>
   b5d42:	bf00      	nop
   b5d44:	2003e6dc 	.word	0x2003e6dc

000b5d48 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5d4a:	4606      	mov	r6, r0
   b5d4c:	460d      	mov	r5, r1
  size_t n = 0;
   b5d4e:	188f      	adds	r7, r1, r2
   b5d50:	2400      	movs	r4, #0
  while (size--) {
   b5d52:	42bd      	cmp	r5, r7
   b5d54:	d00c      	beq.n	b5d70 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5d56:	6833      	ldr	r3, [r6, #0]
   b5d58:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5d5c:	689b      	ldr	r3, [r3, #8]
   b5d5e:	4630      	mov	r0, r6
   b5d60:	4798      	blx	r3
     if (chunk>=0)
   b5d62:	1e03      	subs	r3, r0, #0
   b5d64:	db01      	blt.n	b5d6a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5d66:	441c      	add	r4, r3
  while (size--) {
   b5d68:	e7f3      	b.n	b5d52 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5d6a:	2c00      	cmp	r4, #0
   b5d6c:	bf08      	it	eq
   b5d6e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5d70:	4620      	mov	r0, r4
   b5d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5d74 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   b5d74:	b513      	push	{r0, r1, r4, lr}
   b5d76:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   b5d78:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5d7a:	b159      	cbz	r1, b5d94 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5d7c:	9101      	str	r1, [sp, #4]
   b5d7e:	f001 f92b 	bl	b6fd8 <strlen>
   b5d82:	6823      	ldr	r3, [r4, #0]
   b5d84:	9901      	ldr	r1, [sp, #4]
   b5d86:	68db      	ldr	r3, [r3, #12]
   b5d88:	4602      	mov	r2, r0
   b5d8a:	4620      	mov	r0, r4
    }
   b5d8c:	b002      	add	sp, #8
   b5d8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5d92:	4718      	bx	r3
    }
   b5d94:	b002      	add	sp, #8
   b5d96:	bd10      	pop	{r4, pc}

000b5d98 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   b5d98:	b508      	push	{r3, lr}
  return write(str);
   b5d9a:	f7ff ffeb 	bl	b5d74 <_ZN5Print5writeEPKc>
}
   b5d9e:	bd08      	pop	{r3, pc}

000b5da0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   b5da0:	6803      	ldr	r3, [r0, #0]
   b5da2:	689b      	ldr	r3, [r3, #8]
   b5da4:	4718      	bx	r3

000b5da6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5da6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5da8:	210d      	movs	r1, #13
{
   b5daa:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5dac:	f7ff fff8 	bl	b5da0 <_ZN5Print5printEc>
  n += print('\n');
   b5db0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5db2:	4604      	mov	r4, r0
  n += print('\n');
   b5db4:	4628      	mov	r0, r5
   b5db6:	f7ff fff3 	bl	b5da0 <_ZN5Print5printEc>
  return n;
}
   b5dba:	4420      	add	r0, r4
   b5dbc:	bd38      	pop	{r3, r4, r5, pc}

000b5dbe <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5dbe:	b538      	push	{r3, r4, r5, lr}
   b5dc0:	4605      	mov	r5, r0
  return write(str);
   b5dc2:	f7ff ffd7 	bl	b5d74 <_ZN5Print5writeEPKc>
   b5dc6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5dc8:	4628      	mov	r0, r5
   b5dca:	f7ff ffec 	bl	b5da6 <_ZN5Print7printlnEv>
  return n;
}
   b5dce:	4420      	add	r0, r4
   b5dd0:	bd38      	pop	{r3, r4, r5, pc}

000b5dd2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5dd2:	b530      	push	{r4, r5, lr}
   b5dd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5dd6:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5dd8:	2a01      	cmp	r2, #1
  *str = '\0';
   b5dda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5dde:	bf98      	it	ls
   b5de0:	220a      	movls	r2, #10
   b5de2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5de4:	460d      	mov	r5, r1
   b5de6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5dea:	fb01 5312 	mls	r3, r1, r2, r5
   b5dee:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5df2:	2b09      	cmp	r3, #9
   b5df4:	bf94      	ite	ls
   b5df6:	3330      	addls	r3, #48	; 0x30
   b5df8:	3337      	addhi	r3, #55	; 0x37
   b5dfa:	b2db      	uxtb	r3, r3
  } while(n);
   b5dfc:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5dfe:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5e02:	d9ef      	bls.n	b5de4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5e04:	4621      	mov	r1, r4
   b5e06:	f7ff ffb5 	bl	b5d74 <_ZN5Print5writeEPKc>
}
   b5e0a:	b00b      	add	sp, #44	; 0x2c
   b5e0c:	bd30      	pop	{r4, r5, pc}

000b5e0e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   b5e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b5e12:	b086      	sub	sp, #24
   b5e14:	af00      	add	r7, sp, #0
   b5e16:	4605      	mov	r5, r0
   b5e18:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e1a:	1d38      	adds	r0, r7, #4
   b5e1c:	2114      	movs	r1, #20
{
   b5e1e:	4614      	mov	r4, r2
    va_copy(args2, args);
   b5e20:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   b5e22:	f7ff fe53 	bl	b5acc <vsnprintf>

    if (n<bufsize)
   b5e26:	2813      	cmp	r0, #19
   b5e28:	d80e      	bhi.n	b5e48 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   b5e2a:	1d39      	adds	r1, r7, #4
   b5e2c:	4628      	mov	r0, r5
   b5e2e:	f7ff ffa1 	bl	b5d74 <_ZN5Print5writeEPKc>
   b5e32:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   b5e34:	b11e      	cbz	r6, b5e3e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   b5e36:	4628      	mov	r0, r5
   b5e38:	f7ff ffb5 	bl	b5da6 <_ZN5Print7printlnEv>
   b5e3c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   b5e3e:	4620      	mov	r0, r4
   b5e40:	3718      	adds	r7, #24
   b5e42:	46bd      	mov	sp, r7
   b5e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   b5e48:	f100 0308 	add.w	r3, r0, #8
   b5e4c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   b5e50:	46e8      	mov	r8, sp
        char bigger[n+1];
   b5e52:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   b5e56:	4622      	mov	r2, r4
   b5e58:	1c41      	adds	r1, r0, #1
   b5e5a:	683b      	ldr	r3, [r7, #0]
   b5e5c:	4668      	mov	r0, sp
   b5e5e:	f7ff fe35 	bl	b5acc <vsnprintf>
  return write(str);
   b5e62:	4669      	mov	r1, sp
   b5e64:	4628      	mov	r0, r5
   b5e66:	f7ff ff85 	bl	b5d74 <_ZN5Print5writeEPKc>
   b5e6a:	4604      	mov	r4, r0
   b5e6c:	46c5      	mov	sp, r8
   b5e6e:	e7e1      	b.n	b5e34 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000b5e70 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5e70:	4b01      	ldr	r3, [pc, #4]	; (b5e78 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5e72:	4a02      	ldr	r2, [pc, #8]	; (b5e7c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5e74:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5e76:	4770      	bx	lr
   b5e78:	2003e6e0 	.word	0x2003e6e0
   b5e7c:	000b7c64 	.word	0x000b7c64

000b5e80 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5e80:	4b02      	ldr	r3, [pc, #8]	; (b5e8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5e82:	681a      	ldr	r2, [r3, #0]
   b5e84:	4b02      	ldr	r3, [pc, #8]	; (b5e90 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5e86:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5e88:	4770      	bx	lr
   b5e8a:	bf00      	nop
   b5e8c:	2003e554 	.word	0x2003e554
   b5e90:	2003e6e4 	.word	0x2003e6e4

000b5e94 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5e94:	2100      	movs	r1, #0
   b5e96:	f7ff bd7d 	b.w	b5994 <system_delay_ms>
	...

000b5e9c <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   b5e9c:	b510      	push	{r4, lr}
   b5e9e:	4b04      	ldr	r3, [pc, #16]	; (b5eb0 <_ZN9TCPClientD1Ev+0x14>)
   b5ea0:	6003      	str	r3, [r0, #0]
   b5ea2:	4604      	mov	r4, r0
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   b5ea4:	6980      	ldr	r0, [r0, #24]
   b5ea6:	b108      	cbz	r0, b5eac <_ZN9TCPClientD1Ev+0x10>
	  _M_pi->_M_release();
   b5ea8:	f7ff ff32 	bl	b5d10 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
   b5eac:	4620      	mov	r0, r4
   b5eae:	bd10      	pop	{r4, pc}
   b5eb0:	000b7d5c 	.word	0x000b7d5c

000b5eb4 <_ZN9TCPClientD0Ev>:
   b5eb4:	b510      	push	{r4, lr}
   b5eb6:	4604      	mov	r4, r0
   b5eb8:	f7ff fff0 	bl	b5e9c <_ZN9TCPClientD1Ev>
   b5ebc:	4620      	mov	r0, r4
   b5ebe:	211c      	movs	r1, #28
   b5ec0:	f7fe f8eb 	bl	b409a <_ZdlPvj>
   b5ec4:	4620      	mov	r0, r4
   b5ec6:	bd10      	pop	{r4, pc}

000b5ec8 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5ec8:	4b01      	ldr	r3, [pc, #4]	; (b5ed0 <_GLOBAL__sub_I_RGB+0x8>)
   b5eca:	2200      	movs	r2, #0
   b5ecc:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5ece:	4770      	bx	lr
   b5ed0:	2003e6e8 	.word	0x2003e6e8

000b5ed4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b5ed4:	4b01      	ldr	r3, [pc, #4]	; (b5edc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b5ed6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5ed8:	4770      	bx	lr
   b5eda:	bf00      	nop
   b5edc:	2003e558 	.word	0x2003e558

000b5ee0 <serialEventRun>:
{
   b5ee0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b5ee2:	4b0b      	ldr	r3, [pc, #44]	; (b5f10 <serialEventRun+0x30>)
   b5ee4:	b143      	cbz	r3, b5ef8 <serialEventRun+0x18>
   b5ee6:	f000 f979 	bl	b61dc <_Z16_fetch_usbserialv>
   b5eea:	6803      	ldr	r3, [r0, #0]
   b5eec:	691b      	ldr	r3, [r3, #16]
   b5eee:	4798      	blx	r3
   b5ef0:	2800      	cmp	r0, #0
   b5ef2:	dd01      	ble.n	b5ef8 <serialEventRun+0x18>
        serialEvent();
   b5ef4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5ef8:	4b06      	ldr	r3, [pc, #24]	; (b5f14 <serialEventRun+0x34>)
   b5efa:	b143      	cbz	r3, b5f0e <serialEventRun+0x2e>
   b5efc:	f000 fea4 	bl	b6c48 <_Z22__fetch_global_Serial1v>
   b5f00:	6803      	ldr	r3, [r0, #0]
   b5f02:	691b      	ldr	r3, [r3, #16]
   b5f04:	4798      	blx	r3
   b5f06:	2800      	cmp	r0, #0
   b5f08:	dd01      	ble.n	b5f0e <serialEventRun+0x2e>
        serialEvent1();
   b5f0a:	f3af 8000 	nop.w
}
   b5f0e:	bd08      	pop	{r3, pc}
	...

000b5f18 <_post_loop>:
{
   b5f18:	b508      	push	{r3, lr}
	serialEventRun();
   b5f1a:	f7ff ffe1 	bl	b5ee0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b5f1e:	f7ff fba9 	bl	b5674 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b5f22:	4b01      	ldr	r3, [pc, #4]	; (b5f28 <_post_loop+0x10>)
   b5f24:	6018      	str	r0, [r3, #0]
}
   b5f26:	bd08      	pop	{r3, pc}
   b5f28:	2003e740 	.word	0x2003e740

000b5f2c <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f2c:	4805      	ldr	r0, [pc, #20]	; (b5f44 <_Z33system_initialize_user_backup_ramv+0x18>)
   b5f2e:	4a06      	ldr	r2, [pc, #24]	; (b5f48 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b5f30:	4906      	ldr	r1, [pc, #24]	; (b5f4c <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b5f32:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b5f34:	1a12      	subs	r2, r2, r0
   b5f36:	f001 f801 	bl	b6f3c <memcpy>
    __backup_sram_signature = signature;
   b5f3a:	4b05      	ldr	r3, [pc, #20]	; (b5f50 <_Z33system_initialize_user_backup_ramv+0x24>)
   b5f3c:	4a05      	ldr	r2, [pc, #20]	; (b5f54 <_Z33system_initialize_user_backup_ramv+0x28>)
   b5f3e:	601a      	str	r2, [r3, #0]
}
   b5f40:	bd08      	pop	{r3, pc}
   b5f42:	bf00      	nop
   b5f44:	2003f400 	.word	0x2003f400
   b5f48:	2003f404 	.word	0x2003f404
   b5f4c:	000b7ff4 	.word	0x000b7ff4
   b5f50:	2003f400 	.word	0x2003f400
   b5f54:	9a271c1e 	.word	0x9a271c1e

000b5f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b5f58:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f5a:	2300      	movs	r3, #0
   b5f5c:	9300      	str	r3, [sp, #0]
   b5f5e:	461a      	mov	r2, r3
   b5f60:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f64:	f7ff fd30 	bl	b59c8 <system_ctrl_set_result>
}
   b5f68:	b003      	add	sp, #12
   b5f6a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5f70 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5f70:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b5f72:	8843      	ldrh	r3, [r0, #2]
   b5f74:	2b0a      	cmp	r3, #10
   b5f76:	d008      	beq.n	b5f8a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5f78:	2b50      	cmp	r3, #80	; 0x50
   b5f7a:	d10b      	bne.n	b5f94 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5f7c:	4b09      	ldr	r3, [pc, #36]	; (b5fa4 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5f7e:	681b      	ldr	r3, [r3, #0]
   b5f80:	b14b      	cbz	r3, b5f96 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b5f82:	b003      	add	sp, #12
   b5f84:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5f88:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5f8a:	f7ff ffe5 	bl	b5f58 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5f8e:	b003      	add	sp, #12
   b5f90:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b5f94:	2300      	movs	r3, #0
   b5f96:	9300      	str	r3, [sp, #0]
   b5f98:	461a      	mov	r2, r3
   b5f9a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5f9e:	f7ff fd13 	bl	b59c8 <system_ctrl_set_result>
}
   b5fa2:	e7f4      	b.n	b5f8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b5fa4:	2003e6fc 	.word	0x2003e6fc

000b5fa8 <module_user_init_hook>:
{
   b5fa8:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5faa:	4812      	ldr	r0, [pc, #72]	; (b5ff4 <module_user_init_hook+0x4c>)
   b5fac:	2100      	movs	r1, #0
   b5fae:	f7ff fda5 	bl	b5afc <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b5fb2:	4b11      	ldr	r3, [pc, #68]	; (b5ff8 <module_user_init_hook+0x50>)
   b5fb4:	681a      	ldr	r2, [r3, #0]
   b5fb6:	4b11      	ldr	r3, [pc, #68]	; (b5ffc <module_user_init_hook+0x54>)
   b5fb8:	429a      	cmp	r2, r3
   b5fba:	4b11      	ldr	r3, [pc, #68]	; (b6000 <module_user_init_hook+0x58>)
   b5fbc:	bf0c      	ite	eq
   b5fbe:	2201      	moveq	r2, #1
   b5fc0:	2200      	movne	r2, #0
   b5fc2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b5fc4:	d001      	beq.n	b5fca <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b5fc6:	f7ff ffb1 	bl	b5f2c <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5fca:	f7ff fb43 	bl	b5654 <HAL_RNG_GetRandomNumber>
   b5fce:	4604      	mov	r4, r0
    srand(seed);
   b5fd0:	f000 ffca 	bl	b6f68 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b5fd4:	4b0b      	ldr	r3, [pc, #44]	; (b6004 <module_user_init_hook+0x5c>)
   b5fd6:	b113      	cbz	r3, b5fde <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5fd8:	4620      	mov	r0, r4
   b5fda:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5fde:	2100      	movs	r1, #0
   b5fe0:	4808      	ldr	r0, [pc, #32]	; (b6004 <module_user_init_hook+0x5c>)
   b5fe2:	f7ff fd5b 	bl	b5a9c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b5fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5fea:	4807      	ldr	r0, [pc, #28]	; (b6008 <module_user_init_hook+0x60>)
   b5fec:	2100      	movs	r1, #0
   b5fee:	f7ff bce1 	b.w	b59b4 <system_ctrl_set_app_request_handler>
   b5ff2:	bf00      	nop
   b5ff4:	000b5ed5 	.word	0x000b5ed5
   b5ff8:	2003f400 	.word	0x2003f400
   b5ffc:	9a271c1e 	.word	0x9a271c1e
   b6000:	2003e6f8 	.word	0x2003e6f8
   b6004:	00000000 	.word	0x00000000
   b6008:	000b5f71 	.word	0x000b5f71

000b600c <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b600c:	4770      	bx	lr

000b600e <_ZN9IPAddressD0Ev>:
   b600e:	b510      	push	{r4, lr}
   b6010:	2118      	movs	r1, #24
   b6012:	4604      	mov	r4, r0
   b6014:	f7fe f841 	bl	b409a <_ZdlPvj>
   b6018:	4620      	mov	r0, r4
   b601a:	bd10      	pop	{r4, pc}

000b601c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b601c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b601e:	7d03      	ldrb	r3, [r0, #20]
   b6020:	2b06      	cmp	r3, #6
{
   b6022:	b08d      	sub	sp, #52	; 0x34
   b6024:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6026:	f100 0704 	add.w	r7, r0, #4
   b602a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b602e:	d012      	beq.n	b6056 <_ZNK9IPAddress7printToER5Print+0x3a>
   b6030:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b6034:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b6038:	220a      	movs	r2, #10
   b603a:	4630      	mov	r0, r6
   b603c:	f7ff fec9 	bl	b5dd2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b6040:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b6042:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b6044:	d019      	beq.n	b607a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b6046:	2c00      	cmp	r4, #0
   b6048:	d0f4      	beq.n	b6034 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b604a:	212e      	movs	r1, #46	; 0x2e
   b604c:	4630      	mov	r0, r6
   b604e:	f7ff fea7 	bl	b5da0 <_ZN5Print5printEc>
   b6052:	4404      	add	r4, r0
   b6054:	e7ee      	b.n	b6034 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6056:	232f      	movs	r3, #47	; 0x2f
   b6058:	466a      	mov	r2, sp
   b605a:	4639      	mov	r1, r7
   b605c:	200a      	movs	r0, #10
		buf[0] = 0;
   b605e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b6062:	f7ff fb27 	bl	b56b4 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b6066:	4668      	mov	r0, sp
   b6068:	f000 ffb6 	bl	b6fd8 <strlen>
   b606c:	6833      	ldr	r3, [r6, #0]
   b606e:	4602      	mov	r2, r0
   b6070:	68db      	ldr	r3, [r3, #12]
   b6072:	4669      	mov	r1, sp
   b6074:	4630      	mov	r0, r6
   b6076:	4798      	blx	r3
   b6078:	4604      	mov	r4, r0
    }
    return n;
}
   b607a:	4620      	mov	r0, r4
   b607c:	b00d      	add	sp, #52	; 0x34
   b607e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6080 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b6080:	b510      	push	{r4, lr}
   b6082:	4b05      	ldr	r3, [pc, #20]	; (b6098 <_ZN9IPAddressC1Ev+0x18>)
   b6084:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b6086:	2211      	movs	r2, #17
   b6088:	f840 3b04 	str.w	r3, [r0], #4
   b608c:	2100      	movs	r1, #0
   b608e:	f000 ff63 	bl	b6f58 <memset>
}
   b6092:	4620      	mov	r0, r4
   b6094:	bd10      	pop	{r4, pc}
   b6096:	bf00      	nop
   b6098:	000b7c8c 	.word	0x000b7c8c

000b609c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b609c:	4603      	mov	r3, r0
   b609e:	4a07      	ldr	r2, [pc, #28]	; (b60bc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b60a0:	b510      	push	{r4, lr}
   b60a2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b60a6:	f101 0210 	add.w	r2, r1, #16
   b60aa:	f851 4b04 	ldr.w	r4, [r1], #4
   b60ae:	f843 4b04 	str.w	r4, [r3], #4
   b60b2:	4291      	cmp	r1, r2
   b60b4:	d1f9      	bne.n	b60aa <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b60b6:	780a      	ldrb	r2, [r1, #0]
   b60b8:	701a      	strb	r2, [r3, #0]
}
   b60ba:	bd10      	pop	{r4, pc}
   b60bc:	000b7c8c 	.word	0x000b7c8c

000b60c0 <_ZNK9IPAddresscvbEv>:

    String toString() const { return String(*this); }

    uint8_t version() const {
#if HAL_IPv6
    		return address.v;
   b60c0:	7d03      	ldrb	r3, [r0, #20]
    if (version() == 4) {
   b60c2:	2b04      	cmp	r3, #4
   b60c4:	d104      	bne.n	b60d0 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   b60c6:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b60c8:	3800      	subs	r0, #0
   b60ca:	bf18      	it	ne
   b60cc:	2001      	movne	r0, #1
   b60ce:	4770      	bx	lr
    } else if (version() == 6) {
   b60d0:	2b06      	cmp	r3, #6
   b60d2:	d107      	bne.n	b60e4 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b60d4:	6843      	ldr	r3, [r0, #4]
   b60d6:	b93b      	cbnz	r3, b60e8 <_ZNK9IPAddresscvbEv+0x28>
   b60d8:	6883      	ldr	r3, [r0, #8]
   b60da:	b92b      	cbnz	r3, b60e8 <_ZNK9IPAddresscvbEv+0x28>
   b60dc:	68c3      	ldr	r3, [r0, #12]
   b60de:	b91b      	cbnz	r3, b60e8 <_ZNK9IPAddresscvbEv+0x28>
   b60e0:	6900      	ldr	r0, [r0, #16]
   b60e2:	e7f1      	b.n	b60c8 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   b60e4:	2000      	movs	r0, #0
   b60e6:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   b60e8:	2001      	movs	r0, #1
}
   b60ea:	4770      	bx	lr

000b60ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b60ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b60ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b60f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b60f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b60fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b60fe:	2304      	movs	r3, #4
   b6100:	6041      	str	r1, [r0, #4]
   b6102:	7503      	strb	r3, [r0, #20]
}
   b6104:	bd10      	pop	{r4, pc}
	...

000b6108 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b6108:	b507      	push	{r0, r1, r2, lr}
   b610a:	4b06      	ldr	r3, [pc, #24]	; (b6124 <_ZN9IPAddressC1EPKh+0x1c>)
   b610c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b610e:	78cb      	ldrb	r3, [r1, #3]
   b6110:	9300      	str	r3, [sp, #0]
   b6112:	788b      	ldrb	r3, [r1, #2]
   b6114:	784a      	ldrb	r2, [r1, #1]
   b6116:	7809      	ldrb	r1, [r1, #0]
   b6118:	f7ff ffe8 	bl	b60ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b611c:	b003      	add	sp, #12
   b611e:	f85d fb04 	ldr.w	pc, [sp], #4
   b6122:	bf00      	nop
   b6124:	000b7c8c 	.word	0x000b7c8c

000b6128 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6128:	7441      	strb	r1, [r0, #17]
}
   b612a:	4770      	bx	lr

000b612c <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b612c:	4770      	bx	lr

000b612e <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b612e:	4770      	bx	lr

000b6130 <_ZN9USBSerial4readEv>:
{
   b6130:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b6132:	2100      	movs	r1, #0
   b6134:	7c00      	ldrb	r0, [r0, #16]
   b6136:	f7ff fbfd 	bl	b5934 <HAL_USB_USART_Receive_Data>
}
   b613a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b613e:	bd08      	pop	{r3, pc}

000b6140 <_ZN9USBSerial4peekEv>:
{
   b6140:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b6142:	2101      	movs	r1, #1
   b6144:	7c00      	ldrb	r0, [r0, #16]
   b6146:	f7ff fbf5 	bl	b5934 <HAL_USB_USART_Receive_Data>
}
   b614a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b614e:	bd08      	pop	{r3, pc}

000b6150 <_ZN9USBSerial17availableForWriteEv>:
{
   b6150:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b6152:	7c00      	ldrb	r0, [r0, #16]
   b6154:	f7ff fbe6 	bl	b5924 <HAL_USB_USART_Available_Data_For_Write>
}
   b6158:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b615c:	bd08      	pop	{r3, pc}

000b615e <_ZN9USBSerial9availableEv>:
{
   b615e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b6160:	7c00      	ldrb	r0, [r0, #16]
   b6162:	f7ff fbd7 	bl	b5914 <HAL_USB_USART_Available_Data>
}
   b6166:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b616a:	bd08      	pop	{r3, pc}

000b616c <_ZN9USBSerial5writeEh>:
{
   b616c:	b513      	push	{r0, r1, r4, lr}
   b616e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6170:	7c00      	ldrb	r0, [r0, #16]
{
   b6172:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6174:	f7ff fbd6 	bl	b5924 <HAL_USB_USART_Available_Data_For_Write>
   b6178:	2800      	cmp	r0, #0
   b617a:	9901      	ldr	r1, [sp, #4]
   b617c:	dc01      	bgt.n	b6182 <_ZN9USBSerial5writeEh+0x16>
   b617e:	7c60      	ldrb	r0, [r4, #17]
   b6180:	b120      	cbz	r0, b618c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6182:	7c20      	ldrb	r0, [r4, #16]
   b6184:	f7ff fbde 	bl	b5944 <HAL_USB_USART_Send_Data>
   b6188:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b618c:	b002      	add	sp, #8
   b618e:	bd10      	pop	{r4, pc}

000b6190 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6190:	7c00      	ldrb	r0, [r0, #16]
   b6192:	f7ff bbdf 	b.w	b5954 <HAL_USB_USART_Flush_Data>

000b6196 <_ZN9USBSerialD0Ev>:
   b6196:	b510      	push	{r4, lr}
   b6198:	2114      	movs	r1, #20
   b619a:	4604      	mov	r4, r0
   b619c:	f7fd ff7d 	bl	b409a <_ZdlPvj>
   b61a0:	4620      	mov	r0, r4
   b61a2:	bd10      	pop	{r4, pc}

000b61a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61a4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b61a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61aa:	4604      	mov	r4, r0
   b61ac:	4608      	mov	r0, r1
   b61ae:	2100      	movs	r1, #0
   b61b0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61b4:	4b04      	ldr	r3, [pc, #16]	; (b61c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61b6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61b8:	2301      	movs	r3, #1
  _serial = serial;
   b61ba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61bc:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61be:	4611      	mov	r1, r2
   b61c0:	f7ff fba0 	bl	b5904 <HAL_USB_USART_Init>
}
   b61c4:	4620      	mov	r0, r4
   b61c6:	bd10      	pop	{r4, pc}
   b61c8:	000b7ca0 	.word	0x000b7ca0

000b61cc <_Z19acquireSerialBufferv>:
{
   b61cc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b61ce:	2214      	movs	r2, #20
{
   b61d0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b61d2:	2100      	movs	r1, #0
   b61d4:	f000 fec0 	bl	b6f58 <memset>
}
   b61d8:	4620      	mov	r0, r4
   b61da:	bd10      	pop	{r4, pc}

000b61dc <_Z16_fetch_usbserialv>:
{
   b61dc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b61de:	4c0f      	ldr	r4, [pc, #60]	; (b621c <_Z16_fetch_usbserialv+0x40>)
{
   b61e0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b61e2:	a803      	add	r0, sp, #12
   b61e4:	f7ff fff2 	bl	b61cc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b61e8:	7821      	ldrb	r1, [r4, #0]
   b61ea:	f3bf 8f5b 	dmb	ish
   b61ee:	f011 0101 	ands.w	r1, r1, #1
   b61f2:	d10f      	bne.n	b6214 <_Z16_fetch_usbserialv+0x38>
   b61f4:	4620      	mov	r0, r4
   b61f6:	9101      	str	r1, [sp, #4]
   b61f8:	f7fd ff5e 	bl	b40b8 <__cxa_guard_acquire>
   b61fc:	9901      	ldr	r1, [sp, #4]
   b61fe:	b148      	cbz	r0, b6214 <_Z16_fetch_usbserialv+0x38>
   b6200:	aa03      	add	r2, sp, #12
   b6202:	4807      	ldr	r0, [pc, #28]	; (b6220 <_Z16_fetch_usbserialv+0x44>)
   b6204:	f7ff ffce 	bl	b61a4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6208:	4620      	mov	r0, r4
   b620a:	f7fd ff5a 	bl	b40c2 <__cxa_guard_release>
   b620e:	4805      	ldr	r0, [pc, #20]	; (b6224 <_Z16_fetch_usbserialv+0x48>)
   b6210:	f000 fe8e 	bl	b6f30 <atexit>
	return _usbserial;
}
   b6214:	4802      	ldr	r0, [pc, #8]	; (b6220 <_Z16_fetch_usbserialv+0x44>)
   b6216:	b008      	add	sp, #32
   b6218:	bd10      	pop	{r4, pc}
   b621a:	bf00      	nop
   b621c:	2003e700 	.word	0x2003e700
   b6220:	2003e704 	.word	0x2003e704
   b6224:	000b612d 	.word	0x000b612d

000b6228 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   b6228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b622a:	b287      	uxth	r7, r0
{
   b622c:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b622e:	4638      	mov	r0, r7
{
   b6230:	460d      	mov	r5, r1
   b6232:	4616      	mov	r6, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   b6234:	f000 fc72 	bl	b6b1c <pinAvailable>
   b6238:	b160      	cbz	r0, b6254 <tone+0x2c>
   b623a:	2102      	movs	r1, #2
   b623c:	4638      	mov	r0, r7
   b623e:	f7ff f9d9 	bl	b55f4 <HAL_Validate_Pin_Function>
   b6242:	2802      	cmp	r0, #2
   b6244:	d106      	bne.n	b6254 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   b6246:	4632      	mov	r2, r6
   b6248:	4629      	mov	r1, r5
   b624a:	4620      	mov	r0, r4
    }
}
   b624c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        HAL_Tone_Start(pin, frequency, duration);
   b6250:	f7ff bb50 	b.w	b58f4 <HAL_Tone_Start>
}
   b6254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b6256 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b6256:	4770      	bx	lr

000b6258 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6258:	7441      	strb	r1, [r0, #17]
}
   b625a:	4770      	bx	lr

000b625c <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b625c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b625e:	7c00      	ldrb	r0, [r0, #16]
   b6260:	f7ff fa70 	bl	b5744 <hal_usart_available_data_for_write>
}
   b6264:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6268:	bd08      	pop	{r3, pc}

000b626a <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b626a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b626c:	7c00      	ldrb	r0, [r0, #16]
   b626e:	f7ff fa41 	bl	b56f4 <hal_usart_available>
}
   b6272:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6276:	bd08      	pop	{r3, pc}

000b6278 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b6278:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b627a:	7c00      	ldrb	r0, [r0, #16]
   b627c:	f7ff fa4a 	bl	b5714 <hal_usart_peek>
}
   b6280:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6284:	bd08      	pop	{r3, pc}

000b6286 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6286:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b6288:	7c00      	ldrb	r0, [r0, #16]
   b628a:	f7ff fa3b 	bl	b5704 <hal_usart_read>
}
   b628e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6292:	bd08      	pop	{r3, pc}

000b6294 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6294:	7c00      	ldrb	r0, [r0, #16]
   b6296:	f7ff ba45 	b.w	b5724 <hal_usart_flush>

000b629a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b629a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b629c:	7c45      	ldrb	r5, [r0, #17]
{
   b629e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62a0:	b12d      	cbz	r5, b62ae <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b62a2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b62a4:	b003      	add	sp, #12
   b62a6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b62aa:	f7ff ba1b 	b.w	b56e4 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b62ae:	7c00      	ldrb	r0, [r0, #16]
   b62b0:	9101      	str	r1, [sp, #4]
   b62b2:	f7ff fa47 	bl	b5744 <hal_usart_available_data_for_write>
   b62b6:	2800      	cmp	r0, #0
   b62b8:	9901      	ldr	r1, [sp, #4]
   b62ba:	dcf2      	bgt.n	b62a2 <_ZN11USARTSerial5writeEh+0x8>
}
   b62bc:	4628      	mov	r0, r5
   b62be:	b003      	add	sp, #12
   b62c0:	bd30      	pop	{r4, r5, pc}

000b62c2 <_ZN11USARTSerialD0Ev>:
   b62c2:	b510      	push	{r4, lr}
   b62c4:	2114      	movs	r1, #20
   b62c6:	4604      	mov	r4, r0
   b62c8:	f7fd fee7 	bl	b409a <_ZdlPvj>
   b62cc:	4620      	mov	r0, r4
   b62ce:	bd10      	pop	{r4, pc}

000b62d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b62d0:	b510      	push	{r4, lr}
   b62d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b62d6:	4604      	mov	r4, r0
   b62d8:	4608      	mov	r0, r1
   b62da:	4611      	mov	r1, r2
   b62dc:	2200      	movs	r2, #0
   b62de:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b62e2:	4b04      	ldr	r3, [pc, #16]	; (b62f4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b62e4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b62e6:	2301      	movs	r3, #1
  _serial = serial;
   b62e8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b62ea:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b62ec:	f7ff fa32 	bl	b5754 <hal_usart_init_ex>
}
   b62f0:	4620      	mov	r0, r4
   b62f2:	bd10      	pop	{r4, pc}
   b62f4:	000b7cd0 	.word	0x000b7cd0

000b62f8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b62f8:	4770      	bx	lr

000b62fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b62fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b62fc:	4606      	mov	r6, r0
   b62fe:	4615      	mov	r5, r2
   b6300:	460c      	mov	r4, r1
   b6302:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b6304:	42bc      	cmp	r4, r7
   b6306:	d006      	beq.n	b6316 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b6308:	6833      	ldr	r3, [r6, #0]
   b630a:	f814 1b01 	ldrb.w	r1, [r4], #1
   b630e:	689b      	ldr	r3, [r3, #8]
   b6310:	4630      	mov	r0, r6
   b6312:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b6314:	e7f6      	b.n	b6304 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b6316:	4628      	mov	r0, r5
   b6318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b631a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b631a:	7c00      	ldrb	r0, [r0, #16]
   b631c:	2200      	movs	r2, #0
   b631e:	f7ff ba41 	b.w	b57a4 <hal_i2c_write>

000b6322 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b6322:	7c00      	ldrb	r0, [r0, #16]
   b6324:	2100      	movs	r1, #0
   b6326:	f7ff ba45 	b.w	b57b4 <hal_i2c_available>

000b632a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b632a:	7c00      	ldrb	r0, [r0, #16]
   b632c:	2100      	movs	r1, #0
   b632e:	f7ff ba49 	b.w	b57c4 <hal_i2c_read>

000b6332 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b6332:	7c00      	ldrb	r0, [r0, #16]
   b6334:	2100      	movs	r1, #0
   b6336:	f7ff ba4d 	b.w	b57d4 <hal_i2c_peek>

000b633a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b633a:	7c00      	ldrb	r0, [r0, #16]
   b633c:	2100      	movs	r1, #0
   b633e:	f7ff ba51 	b.w	b57e4 <hal_i2c_flush>

000b6342 <_ZN7TwoWireD0Ev>:
   b6342:	b510      	push	{r4, lr}
   b6344:	2114      	movs	r1, #20
   b6346:	4604      	mov	r4, r0
   b6348:	f7fd fea7 	bl	b409a <_ZdlPvj>
   b634c:	4620      	mov	r0, r4
   b634e:	bd10      	pop	{r4, pc}

000b6350 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b6350:	b510      	push	{r4, lr}
   b6352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6356:	4604      	mov	r4, r0
   b6358:	4608      	mov	r0, r1
   b635a:	2100      	movs	r1, #0
   b635c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6360:	4b03      	ldr	r3, [pc, #12]	; (b6370 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   b6362:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   b6364:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   b6366:	4611      	mov	r1, r2
   b6368:	f7ff fa4c 	bl	b5804 <hal_i2c_init>
}
   b636c:	4620      	mov	r0, r4
   b636e:	bd10      	pop	{r4, pc}
   b6370:	000b7d00 	.word	0x000b7d00

000b6374 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b6374:	7c00      	ldrb	r0, [r0, #16]
   b6376:	2200      	movs	r2, #0
   b6378:	f7ff b9f4 	b.w	b5764 <hal_i2c_set_speed>

000b637c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b637c:	2300      	movs	r3, #0
   b637e:	7c00      	ldrb	r0, [r0, #16]
   b6380:	461a      	mov	r2, r3
   b6382:	4619      	mov	r1, r3
   b6384:	f7ff b9f6 	b.w	b5774 <hal_i2c_begin>

000b6388 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b6388:	7c00      	ldrb	r0, [r0, #16]
   b638a:	2200      	movs	r2, #0
   b638c:	f7ff b9fa 	b.w	b5784 <hal_i2c_begin_transmission>

000b6390 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   b6390:	b2c9      	uxtb	r1, r1
   b6392:	f7ff bff9 	b.w	b6388 <_ZN7TwoWire17beginTransmissionEh>

000b6396 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b6396:	7c00      	ldrb	r0, [r0, #16]
   b6398:	2200      	movs	r2, #0
   b639a:	f7ff b9fb 	b.w	b5794 <hal_i2c_end_transmission>

000b639e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b639e:	2101      	movs	r1, #1
   b63a0:	f7ff bff9 	b.w	b6396 <_ZN7TwoWire15endTransmissionEh>

000b63a4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   b63a4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b63a6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   b63a8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   b63ac:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b63ae:	2201      	movs	r2, #1
   b63b0:	f04f 33ff 	mov.w	r3, #4294967295
   b63b4:	f10d 0107 	add.w	r1, sp, #7
   b63b8:	47a0      	blx	r4
}
   b63ba:	b002      	add	sp, #8
   b63bc:	bd10      	pop	{r4, pc}

000b63be <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   b63be:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b63c0:	6803      	ldr	r3, [r0, #0]
   b63c2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   b63c4:	f04f 33ff 	mov.w	r3, #4294967295
   b63c8:	46a4      	mov	ip, r4
}
   b63ca:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   b63ce:	4760      	bx	ip

000b63d0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b63d0:	b513      	push	{r0, r1, r4, lr}
   b63d2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   b63d4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   b63d6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   b63da:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   b63dc:	f10d 0107 	add.w	r1, sp, #7
   b63e0:	2201      	movs	r2, #1
   b63e2:	47a0      	blx	r4
}
   b63e4:	b002      	add	sp, #8
   b63e6:	bd10      	pop	{r4, pc}

000b63e8 <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   b63e8:	b510      	push	{r4, lr}
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b63ea:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b63ec:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b63f0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b63f4:	429a      	cmp	r2, r3
int TCPClient::read() {
   b63f6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b63f8:	d008      	beq.n	b640c <_ZN9TCPClient4readEv+0x24>
   b63fa:	6963      	ldr	r3, [r4, #20]
   b63fc:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b6400:	1c51      	adds	r1, r2, #1
   b6402:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   b6406:	4413      	add	r3, r2
   b6408:	7918      	ldrb	r0, [r3, #4]
}
   b640a:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   b640c:	6803      	ldr	r3, [r0, #0]
   b640e:	691b      	ldr	r3, [r3, #16]
   b6410:	4798      	blx	r3
   b6412:	2800      	cmp	r0, #0
   b6414:	d1f1      	bne.n	b63fa <_ZN9TCPClient4readEv+0x12>
   b6416:	f04f 30ff 	mov.w	r0, #4294967295
   b641a:	e7f6      	b.n	b640a <_ZN9TCPClient4readEv+0x22>

000b641c <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   b641c:	4770      	bx	lr

000b641e <_ZN9TCPClientcvbEv>:
    }
    return rv;
}

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   b641e:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   b6420:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   b6422:	43c0      	mvns	r0, r0
   b6424:	0fc0      	lsrs	r0, r0, #31
   b6426:	4770      	bx	lr

000b6428 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b6428:	4770      	bx	lr
	...

000b642c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b642c:	4b06      	ldr	r3, [pc, #24]	; (b6448 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b642e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b6430:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b6432:	f100 040c 	add.w	r4, r0, #12
	    ||
   b6436:	d005      	beq.n	b6444 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b6438:	4608      	mov	r0, r1
   b643a:	f000 fc67 	bl	b6d0c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b643e:	2800      	cmp	r0, #0
   b6440:	bf08      	it	eq
   b6442:	2400      	moveq	r4, #0
      }
   b6444:	4620      	mov	r0, r4
   b6446:	bd10      	pop	{r4, pc}
   b6448:	000b7c5c 	.word	0x000b7c5c

000b644c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b644c:	b510      	push	{r4, lr}
   b644e:	21ac      	movs	r1, #172	; 0xac
   b6450:	4604      	mov	r4, r0
   b6452:	f7fd fe22 	bl	b409a <_ZdlPvj>
   b6456:	4620      	mov	r0, r4
   b6458:	bd10      	pop	{r4, pc}

000b645a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b645a:	21ac      	movs	r1, #172	; 0xac
   b645c:	f7fd be1d 	b.w	b409a <_ZdlPvj>

000b6460 <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   b6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   b6464:	f04f 0800 	mov.w	r8, #0
   b6468:	b086      	sub	sp, #24
   b646a:	461c      	mov	r4, r3
   b646c:	f8c0 8004 	str.w	r8, [r0, #4]
   b6470:	4605      	mov	r5, r0
   b6472:	460e      	mov	r6, r1
   b6474:	4617      	mov	r7, r2
    struct timeval tv = {};
   b6476:	4641      	mov	r1, r8
   b6478:	2210      	movs	r2, #16
   b647a:	a802      	add	r0, sp, #8
   b647c:	f000 fd6c 	bl	b6f58 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   b6480:	1c63      	adds	r3, r4, #1
   b6482:	d009      	beq.n	b6498 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   b6484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b6488:	fbb4 f2f3 	udiv	r2, r4, r3
        tv.tv_usec = (timeout % 1000) * 1000;
   b648c:	fb03 4412 	mls	r4, r3, r2, r4
        tv.tv_sec = timeout / 1000;
   b6490:	e9cd 2802 	strd	r2, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   b6494:	435c      	muls	r4, r3
   b6496:	9404      	str	r4, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   b6498:	6968      	ldr	r0, [r5, #20]
   b649a:	2310      	movs	r3, #16
   b649c:	9300      	str	r3, [sp, #0]
   b649e:	6800      	ldr	r0, [r0, #0]
   b64a0:	ab02      	add	r3, sp, #8
   b64a2:	f241 0205 	movw	r2, #4101	; 0x1005
   b64a6:	f640 71ff 	movw	r1, #4095	; 0xfff
   b64aa:	f7ff f9b3 	bl	b5814 <sock_setsockopt>
    if (ret < 0) {
   b64ae:	2800      	cmp	r0, #0
   b64b0:	da07      	bge.n	b64c2 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   b64b2:	f7ff fb13 	bl	b5adc <__errno>
   b64b6:	6803      	ldr	r3, [r0, #0]
   b64b8:	606b      	str	r3, [r5, #4]
        return 0;
   b64ba:	2000      	movs	r0, #0
}
   b64bc:	b006      	add	sp, #24
   b64be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   b64c2:	6968      	ldr	r0, [r5, #20]
   b64c4:	2300      	movs	r3, #0
   b64c6:	6800      	ldr	r0, [r0, #0]
   b64c8:	463a      	mov	r2, r7
   b64ca:	4631      	mov	r1, r6
   b64cc:	f7ff f9c2 	bl	b5854 <sock_send>
    if (ret < 0) {
   b64d0:	1e03      	subs	r3, r0, #0
   b64d2:	dbee      	blt.n	b64b2 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   b64d4:	4618      	mov	r0, r3
   b64d6:	e7f1      	b.n	b64bc <_ZN9TCPClient5writeEPKhjm+0x5c>

000b64d8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>:
    IPAddress& operator=(T address) {
   b64d8:	b530      	push	{r4, r5, lr}
   b64da:	b087      	sub	sp, #28
   b64dc:	4604      	mov	r4, r0
class IPAddress : public Printable {
   b64de:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   b64e0:	4668      	mov	r0, sp
   b64e2:	f7ff fe11 	bl	b6108 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b64e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b64e8:	3404      	adds	r4, #4
   b64ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b64ec:	682b      	ldr	r3, [r5, #0]
   b64ee:	7023      	strb	r3, [r4, #0]
    }
   b64f0:	b007      	add	sp, #28
   b64f2:	bd30      	pop	{r4, r5, pc}

000b64f4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   b64f4:	b570      	push	{r4, r5, r6, lr}
      { return _M_ptr; }
   b64f6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   b64f8:	4b05      	ldr	r3, [pc, #20]	; (b6510 <_ZN9TCPClient8remoteIPEv+0x1c>)
   b64fa:	4604      	mov	r4, r0
   b64fc:	358c      	adds	r5, #140	; 0x8c
   b64fe:	f844 3b04 	str.w	r3, [r4], #4
   b6502:	4606      	mov	r6, r0
   b6504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6508:	682b      	ldr	r3, [r5, #0]
   b650a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   b650c:	4630      	mov	r0, r6
   b650e:	bd70      	pop	{r4, r5, r6, pc}
   b6510:	000b7c8c 	.word	0x000b7c8c

000b6514 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6518:	4698      	mov	r8, r3
    stop();
   b651a:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b651c:	b093      	sub	sp, #76	; 0x4c
   b651e:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   b6520:	2400      	movs	r4, #0
    stop();
   b6522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   b6524:	4606      	mov	r6, r0
   b6526:	4617      	mov	r7, r2
    stop();
   b6528:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b652a:	4628      	mov	r0, r5
   b652c:	466b      	mov	r3, sp
   b652e:	4622      	mov	r2, r4
   b6530:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   b6532:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6534:	f7ff f856 	bl	b55e4 <netdb_getaddrinfo>
   b6538:	4605      	mov	r5, r0
   b653a:	2800      	cmp	r0, #0
   b653c:	d163      	bne.n	b6606 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   b653e:	9b00      	ldr	r3, [sp, #0]
   b6540:	2b00      	cmp	r3, #0
   b6542:	d04b      	beq.n	b65dc <_ZN9TCPClient7connectEPKctm+0xc8>
   b6544:	695b      	ldr	r3, [r3, #20]
   b6546:	2b00      	cmp	r3, #0
   b6548:	d048      	beq.n	b65dc <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   b654a:	a806      	add	r0, sp, #24
   b654c:	f7ff fd98 	bl	b6080 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   b6550:	9b00      	ldr	r3, [sp, #0]
   b6552:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   b6554:	7863      	ldrb	r3, [r4, #1]
   b6556:	2b02      	cmp	r3, #2
   b6558:	d104      	bne.n	b6564 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   b655a:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   b655c:	a806      	add	r0, sp, #24
   b655e:	f7ff ffbb 	bl	b64d8 <_ZN9IPAddressaSIPKhEERS_T_.isra.0>
        }
        if (port) {
   b6562:	e026      	b.n	b65b2 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   b6564:	2b0a      	cmp	r3, #10
   b6566:	d124      	bne.n	b65b2 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   b6568:	2211      	movs	r2, #17
   b656a:	4629      	mov	r1, r5
   b656c:	a801      	add	r0, sp, #4
   b656e:	f000 fcf3 	bl	b6f58 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b6572:	68a3      	ldr	r3, [r4, #8]
   b6574:	2b00      	cmp	r3, #0
   b6576:	d038      	beq.n	b65ea <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6578:	f104 0308 	add.w	r3, r4, #8
   b657c:	f10d 0c04 	add.w	ip, sp, #4
   b6580:	3418      	adds	r4, #24
   b6582:	6818      	ldr	r0, [r3, #0]
   b6584:	6859      	ldr	r1, [r3, #4]
   b6586:	4662      	mov	r2, ip
   b6588:	c203      	stmia	r2!, {r0, r1}
   b658a:	3308      	adds	r3, #8
   b658c:	42a3      	cmp	r3, r4
   b658e:	4694      	mov	ip, r2
   b6590:	d1f7      	bne.n	b6582 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   b6592:	2306      	movs	r3, #6
            addr = IPAddress(a);
   b6594:	a901      	add	r1, sp, #4
   b6596:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   b6598:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   b659c:	f7ff fd7e 	bl	b609c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b65a0:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   b65a4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   b65a8:	ac07      	add	r4, sp, #28
   b65aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65ac:	f8dc 3000 	ldr.w	r3, [ip]
   b65b0:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   b65b2:	a806      	add	r0, sp, #24
   b65b4:	f7ff fd84 	bl	b60c0 <_ZNK9IPAddresscvbEv>
        if (addr) {
   b65b8:	b180      	cbz	r0, b65dc <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   b65ba:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   b65bc:	ad07      	add	r5, sp, #28
   b65be:	f8d3 9020 	ldr.w	r9, [r3, #32]
   b65c2:	4b12      	ldr	r3, [pc, #72]	; (b660c <_ZN9TCPClient7connectEPKctm+0xf8>)
   b65c4:	930c      	str	r3, [sp, #48]	; 0x30
   b65c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b65c8:	ac0d      	add	r4, sp, #52	; 0x34
   b65ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b65cc:	682b      	ldr	r3, [r5, #0]
   b65ce:	7023      	strb	r3, [r4, #0]
   b65d0:	463a      	mov	r2, r7
   b65d2:	4643      	mov	r3, r8
   b65d4:	a90c      	add	r1, sp, #48	; 0x30
   b65d6:	4630      	mov	r0, r6
   b65d8:	47c8      	blx	r9
   b65da:	4605      	mov	r5, r0
    SCOPE_GUARD({
   b65dc:	9800      	ldr	r0, [sp, #0]
   b65de:	f7fe fff9 	bl	b55d4 <netdb_freeaddrinfo>
}
   b65e2:	4628      	mov	r0, r5
   b65e4:	b013      	add	sp, #76	; 0x4c
   b65e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   b65ea:	68e3      	ldr	r3, [r4, #12]
   b65ec:	2b00      	cmp	r3, #0
   b65ee:	d1c3      	bne.n	b6578 <_ZN9TCPClient7connectEPKctm+0x64>
   b65f0:	f64f 70ff 	movw	r0, #65535	; 0xffff
   b65f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
   b65f8:	f7ff f864 	bl	b56c4 <inet_htonl>
   b65fc:	4581      	cmp	r9, r0
   b65fe:	d1bb      	bne.n	b6578 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   b6600:	f104 0114 	add.w	r1, r4, #20
   b6604:	e7aa      	b.n	b655c <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   b6606:	4625      	mov	r5, r4
   b6608:	e7e8      	b.n	b65dc <_ZN9TCPClient7connectEPKctm+0xc8>
   b660a:	bf00      	nop
   b660c:	000b7c8c 	.word	0x000b7c8c

000b6610 <_ZN9TCPClient9connectedEv>:
uint8_t TCPClient::connected() {
   b6610:	b538      	push	{r3, r4, r5, lr}
   b6612:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   b6614:	681a      	ldr	r2, [r3, #0]
   b6616:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   b6618:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   b661a:	da10      	bge.n	b663e <_ZN9TCPClient9connectedEv+0x2e>
   b661c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b6620:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b6624:	429a      	cmp	r2, r3
   b6626:	d10a      	bne.n	b663e <_ZN9TCPClient9connectedEv+0x2e>
        rv = available();
   b6628:	6803      	ldr	r3, [r0, #0]
   b662a:	691b      	ldr	r3, [r3, #16]
   b662c:	4798      	blx	r3
        if (!rv) {
   b662e:	4604      	mov	r4, r0
   b6630:	b928      	cbnz	r0, b663e <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   b6632:	682b      	ldr	r3, [r5, #0]
   b6634:	4628      	mov	r0, r5
   b6636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b6638:	4798      	blx	r3
        rv = available();
   b663a:	4620      	mov	r0, r4
}
   b663c:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   b663e:	2001      	movs	r0, #1
   b6640:	e7fc      	b.n	b663c <_ZN9TCPClient9connectedEv+0x2c>

000b6642 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   b6642:	b510      	push	{r4, lr}
   b6644:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6646:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b664a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b664e:	429a      	cmp	r2, r3
int TCPClient::peek() {
   b6650:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6652:	d005      	beq.n	b6660 <_ZN9TCPClient4peekEv+0x1e>
   b6654:	6963      	ldr	r3, [r4, #20]
   b6656:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   b665a:	4413      	add	r3, r2
   b665c:	7918      	ldrb	r0, [r3, #4]
}
   b665e:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   b6660:	6803      	ldr	r3, [r0, #0]
   b6662:	691b      	ldr	r3, [r3, #16]
   b6664:	4798      	blx	r3
   b6666:	2800      	cmp	r0, #0
   b6668:	d1f4      	bne.n	b6654 <_ZN9TCPClient4peekEv+0x12>
   b666a:	f04f 30ff 	mov.w	r0, #4294967295
   b666e:	e7f6      	b.n	b665e <_ZN9TCPClient4peekEv+0x1c>

000b6670 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b6672:	6943      	ldr	r3, [r0, #20]
   b6674:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   b6676:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b667a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   b667e:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   b6680:	4605      	mov	r5, r0
   b6682:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   b6684:	d016      	beq.n	b66b4 <_ZN9TCPClient4readEPhj+0x44>
   b6686:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   b6688:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   b668c:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   b6690:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   b6692:	42bc      	cmp	r4, r7
   b6694:	bf28      	it	cs
   b6696:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   b6698:	3304      	adds	r3, #4
   b669a:	4622      	mov	r2, r4
   b669c:	4419      	add	r1, r3
   b669e:	4630      	mov	r0, r6
   b66a0:	f000 fc4c 	bl	b6f3c <memcpy>
   b66a4:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   b66a6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   b66aa:	4423      	add	r3, r4
   b66ac:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   b66b0:	4620      	mov	r0, r4
   b66b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   b66b4:	6803      	ldr	r3, [r0, #0]
   b66b6:	691b      	ldr	r3, [r3, #16]
   b66b8:	4798      	blx	r3
   b66ba:	2800      	cmp	r0, #0
   b66bc:	d1e3      	bne.n	b6686 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   b66be:	f04f 34ff 	mov.w	r4, #4294967295
   b66c2:	e7f5      	b.n	b66b0 <_ZN9TCPClient4readEPhj+0x40>

000b66c4 <_ZN9TCPClient12flush_bufferEv>:
   b66c4:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   b66c6:	2300      	movs	r3, #0
   b66c8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   b66cc:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   b66ce:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   b66d2:	4770      	bx	lr

000b66d4 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b66d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b66d8:	461f      	mov	r7, r3
    stop();
   b66da:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b66dc:	460c      	mov	r4, r1
    stop();
   b66de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   b66e0:	b08a      	sub	sp, #40	; 0x28
   b66e2:	4605      	mov	r5, r0
   b66e4:	4616      	mov	r6, r2
    stop();
   b66e6:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   b66e8:	7d23      	ldrb	r3, [r4, #20]
   b66ea:	f8d5 8014 	ldr.w	r8, [r5, #20]
   b66ee:	2b04      	cmp	r3, #4
   b66f0:	bf0c      	ite	eq
   b66f2:	2002      	moveq	r0, #2
   b66f4:	200a      	movne	r0, #10
   b66f6:	2206      	movs	r2, #6
   b66f8:	2101      	movs	r1, #1
   b66fa:	f7ff f8b3 	bl	b5864 <sock_socket>
   b66fe:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   b6702:	696b      	ldr	r3, [r5, #20]
   b6704:	681b      	ldr	r3, [r3, #0]
   b6706:	2b00      	cmp	r3, #0
   b6708:	da08      	bge.n	b671c <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   b670a:	682b      	ldr	r3, [r5, #0]
   b670c:	4628      	mov	r0, r5
   b670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6710:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   b6712:	4798      	blx	r3
}
   b6714:	4620      	mov	r0, r4
   b6716:	b00a      	add	sp, #40	; 0x28
   b6718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   b671c:	4628      	mov	r0, r5
   b671e:	f7ff ffd1 	bl	b66c4 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   b6722:	b1b7      	cbz	r7, b6752 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   b6724:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6726:	a903      	add	r1, sp, #12
   b6728:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   b672a:	9303      	str	r3, [sp, #12]
   b672c:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   b6730:	f7fe ff88 	bl	b5644 <if_index_to_name>
   b6734:	2800      	cmp	r0, #0
   b6736:	d1e8      	bne.n	b670a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   b6738:	6968      	ldr	r0, [r5, #20]
   b673a:	2306      	movs	r3, #6
   b673c:	9300      	str	r3, [sp, #0]
   b673e:	6800      	ldr	r0, [r0, #0]
   b6740:	ab03      	add	r3, sp, #12
   b6742:	f241 020b 	movw	r2, #4107	; 0x100b
   b6746:	f640 71ff 	movw	r1, #4095	; 0xfff
   b674a:	f7ff f863 	bl	b5814 <sock_setsockopt>
   b674e:	2800      	cmp	r0, #0
   b6750:	d1db      	bne.n	b670a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   b6752:	221c      	movs	r2, #28
   b6754:	2100      	movs	r1, #0
   b6756:	a803      	add	r0, sp, #12
   b6758:	f000 fbfe 	bl	b6f58 <memset>
    if (ip.version() == 4) {
   b675c:	7d23      	ldrb	r3, [r4, #20]
   b675e:	2b04      	cmp	r3, #4
   b6760:	d11d      	bne.n	b679e <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   b6762:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   b6766:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   b6768:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   b676c:	f7fe ffb2 	bl	b56d4 <inet_htons>
   b6770:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   b6774:	6860      	ldr	r0, [r4, #4]
   b6776:	f7fe ffa5 	bl	b56c4 <inet_htonl>
   b677a:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   b677c:	696b      	ldr	r3, [r5, #20]
   b677e:	221c      	movs	r2, #28
   b6780:	6818      	ldr	r0, [r3, #0]
   b6782:	a903      	add	r1, sp, #12
   b6784:	f7ff f856 	bl	b5834 <sock_connect>
   b6788:	2800      	cmp	r0, #0
   b678a:	d1be      	bne.n	b670a <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   b678c:	3404      	adds	r4, #4
   b678e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b6790:	696d      	ldr	r5, [r5, #20]
   b6792:	358c      	adds	r5, #140	; 0x8c
   b6794:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b6796:	6823      	ldr	r3, [r4, #0]
   b6798:	702b      	strb	r3, [r5, #0]
    return 1; // success
   b679a:	2401      	movs	r4, #1
   b679c:	e7ba      	b.n	b6714 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   b679e:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   b67a2:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   b67a4:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   b67a8:	f7fe ff94 	bl	b56d4 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b67ac:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   b67ae:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   b67b2:	1d23      	adds	r3, r4, #4
   b67b4:	f104 0714 	add.w	r7, r4, #20
   b67b8:	6818      	ldr	r0, [r3, #0]
   b67ba:	6859      	ldr	r1, [r3, #4]
   b67bc:	4632      	mov	r2, r6
   b67be:	c203      	stmia	r2!, {r0, r1}
   b67c0:	3308      	adds	r3, #8
   b67c2:	42bb      	cmp	r3, r7
   b67c4:	4616      	mov	r6, r2
   b67c6:	d1f7      	bne.n	b67b8 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   b67c8:	e7d8      	b.n	b677c <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000b67cc <_ZN9TCPClient9availableEv>:
{
   b67cc:	b530      	push	{r4, r5, lr}
   b67ce:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   b67d0:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   b67d4:	b08b      	sub	sp, #44	; 0x2c
   b67d6:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   b67d8:	b12b      	cbz	r3, b67e6 <_ZN9TCPClient9availableEv+0x1a>
   b67da:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   b67de:	429a      	cmp	r2, r3
   b67e0:	d101      	bne.n	b67e6 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   b67e2:	f7ff ff6f 	bl	b66c4 <_ZN9TCPClient12flush_bufferEv>
   b67e6:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   b67e8:	6808      	ldr	r0, [r1, #0]
   b67ea:	2800      	cmp	r0, #0
   b67ec:	db18      	blt.n	b6820 <_ZN9TCPClient9availableEv+0x54>
        if (d_->total < arraySize(d_->buffer)) {
   b67ee:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
   b67f2:	2d7f      	cmp	r5, #127	; 0x7f
   b67f4:	d814      	bhi.n	b6820 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   b67f6:	3104      	adds	r1, #4
   b67f8:	2308      	movs	r3, #8
   b67fa:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   b67fe:	4429      	add	r1, r5
   b6800:	f7ff f820 	bl	b5844 <sock_recv>
            if (ret > 0) {
   b6804:	2800      	cmp	r0, #0
   b6806:	dd13      	ble.n	b6830 <_ZN9TCPClient9availableEv+0x64>
   b6808:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   b680a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b680e:	b90a      	cbnz	r2, b6814 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   b6810:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   b6814:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   b6816:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   b681a:	4410      	add	r0, r2
   b681c:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   b6820:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   b6822:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   b6826:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   b682a:	1ac0      	subs	r0, r0, r3
   b682c:	b00b      	add	sp, #44	; 0x2c
   b682e:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   b6830:	f7ff f954 	bl	b5adc <__errno>
   b6834:	6803      	ldr	r3, [r0, #0]
   b6836:	2b0b      	cmp	r3, #11
   b6838:	d0f2      	beq.n	b6820 <_ZN9TCPClient9availableEv+0x54>
   b683a:	f7ff f94f 	bl	b5adc <__errno>
   b683e:	6803      	ldr	r3, [r0, #0]
   b6840:	2b0b      	cmp	r3, #11
   b6842:	d0ed      	beq.n	b6820 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   b6844:	2320      	movs	r3, #32
   b6846:	2500      	movs	r5, #0
   b6848:	e9cd 3502 	strd	r3, r5, [sp, #8]
   b684c:	f7ff f946 	bl	b5adc <__errno>
   b6850:	6803      	ldr	r3, [r0, #0]
   b6852:	9301      	str	r3, [sp, #4]
   b6854:	4b08      	ldr	r3, [pc, #32]	; (b6878 <_ZN9TCPClient9availableEv+0xac>)
   b6856:	4909      	ldr	r1, [pc, #36]	; (b687c <_ZN9TCPClient9availableEv+0xb0>)
   b6858:	9300      	str	r3, [sp, #0]
   b685a:	aa02      	add	r2, sp, #8
   b685c:	462b      	mov	r3, r5
   b685e:	2032      	movs	r0, #50	; 0x32
   b6860:	f7ff f888 	bl	b5974 <log_message>
                    sock_close(d_->sock);
   b6864:	6963      	ldr	r3, [r4, #20]
   b6866:	6818      	ldr	r0, [r3, #0]
   b6868:	f7fe ffdc 	bl	b5824 <sock_close>
   b686c:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   b686e:	f04f 32ff 	mov.w	r2, #4294967295
   b6872:	601a      	str	r2, [r3, #0]
   b6874:	e7d4      	b.n	b6820 <_ZN9TCPClient9availableEv+0x54>
   b6876:	bf00      	nop
   b6878:	000b7d27 	.word	0x000b7d27
   b687c:	000b7d20 	.word	0x000b7d20

000b6880 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   b6880:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   b6882:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   b6884:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   b6886:	6818      	ldr	r0, [r3, #0]
   b6888:	2800      	cmp	r0, #0
   b688a:	db01      	blt.n	b6890 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   b688c:	f7fe ffca 	bl	b5824 <sock_close>
   b6890:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   b6892:	f04f 32ff 	mov.w	r2, #4294967295
   b6896:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   b6898:	6960      	ldr	r0, [r4, #20]
   b689a:	2211      	movs	r2, #17
   b689c:	2100      	movs	r1, #0
   b689e:	308c      	adds	r0, #140	; 0x8c
   b68a0:	f000 fb5a 	bl	b6f58 <memset>
    flush_buffer();
   b68a4:	4620      	mov	r0, r4
}
   b68a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   b68aa:	f7ff bf0b 	b.w	b66c4 <_ZN9TCPClient12flush_bufferEv>

000b68ae <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   b68ae:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   b68b0:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   b68b2:	4604      	mov	r4, r0
          total(0) {
   b68b4:	6001      	str	r1, [r0, #0]
   b68b6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   b68ba:	3088      	adds	r0, #136	; 0x88
   b68bc:	f7ff fbe0 	bl	b6080 <_ZN9IPAddressC1Ev>
}
   b68c0:	4620      	mov	r0, r4
   b68c2:	bd10      	pop	{r4, pc}

000b68c4 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   b68c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b68c6:	2300      	movs	r3, #0
   b68c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b68cc:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   b68d0:	4a0e      	ldr	r2, [pc, #56]	; (b690c <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   b68d2:	6103      	str	r3, [r0, #16]
   b68d4:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b68d6:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   b68d8:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b68da:	20ac      	movs	r0, #172	; 0xac
   b68dc:	9101      	str	r1, [sp, #4]
   b68de:	f7fd fbd8 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b68e2:	1e05      	subs	r5, r0, #0
   b68e4:	f105 060c 	add.w	r6, r5, #12
   b68e8:	d008      	beq.n	b68fc <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   b68ea:	2301      	movs	r3, #1
   b68ec:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b68f0:	4b07      	ldr	r3, [pc, #28]	; (b6910 <_ZN9TCPClientC1Ei+0x4c>)
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   b68f2:	9901      	ldr	r1, [sp, #4]
   b68f4:	602b      	str	r3, [r5, #0]
   b68f6:	4630      	mov	r0, r6
   b68f8:	f7ff ffd9 	bl	b68ae <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   b68fc:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   b68fe:	e9c4 6505 	strd	r6, r5, [r4, #20]
   b6902:	f7ff fedf 	bl	b66c4 <_ZN9TCPClient12flush_bufferEv>
}
   b6906:	b002      	add	sp, #8
   b6908:	bd70      	pop	{r4, r5, r6, pc}
   b690a:	bf00      	nop
   b690c:	000b7d5c 	.word	0x000b7d5c
   b6910:	000b7d40 	.word	0x000b7d40

000b6914 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   b6914:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   b6916:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   b691a:	4604      	mov	r4, r0
        : TCPClient(-1) {
   b691c:	f7ff ffd2 	bl	b68c4 <_ZN9TCPClientC1Ei>
}
   b6920:	4620      	mov	r0, r4
   b6922:	bd10      	pop	{r4, pc}

000b6924 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   b6924:	b510      	push	{r4, lr}
   b6926:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   b6928:	6800      	ldr	r0, [r0, #0]
   b692a:	2800      	cmp	r0, #0
   b692c:	db01      	blt.n	b6932 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   b692e:	f7fe ff79 	bl	b5824 <sock_close>
    }
}
   b6932:	4620      	mov	r0, r4
   b6934:	bd10      	pop	{r4, pc}

000b6936 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
   b6936:	300c      	adds	r0, #12
   b6938:	f7ff bff4 	b.w	b6924 <_ZN9TCPClient4DataD1Ev>

000b693c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b693c:	2200      	movs	r2, #0
   b693e:	6840      	ldr	r0, [r0, #4]
   b6940:	4611      	mov	r1, r2
   b6942:	f7ff b863 	b.w	b5a0c <network_ready>

000b6946 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6946:	2200      	movs	r2, #0
   b6948:	6840      	ldr	r0, [r0, #4]
   b694a:	4611      	mov	r1, r2
   b694c:	f7ff b87e 	b.w	b5a4c <network_listening>

000b6950 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6950:	2200      	movs	r2, #0
   b6952:	6840      	ldr	r0, [r0, #4]
   b6954:	4611      	mov	r1, r2
   b6956:	f7ff b889 	b.w	b5a6c <network_get_listen_timeout>

000b695a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b695a:	6840      	ldr	r0, [r0, #4]
   b695c:	2200      	movs	r2, #0
   b695e:	f7ff b87d 	b.w	b5a5c <network_set_listen_timeout>

000b6962 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6962:	6840      	ldr	r0, [r0, #4]
   b6964:	2200      	movs	r2, #0
   b6966:	f081 0101 	eor.w	r1, r1, #1
   b696a:	f7ff b867 	b.w	b5a3c <network_listen>

000b696e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b696e:	2300      	movs	r3, #0
   b6970:	6840      	ldr	r0, [r0, #4]
   b6972:	461a      	mov	r2, r3
   b6974:	4619      	mov	r1, r3
   b6976:	f7ff b859 	b.w	b5a2c <network_off>

000b697a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b697a:	2300      	movs	r3, #0
   b697c:	6840      	ldr	r0, [r0, #4]
   b697e:	461a      	mov	r2, r3
   b6980:	4619      	mov	r1, r3
   b6982:	f7ff b84b 	b.w	b5a1c <network_on>

000b6986 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6986:	2200      	movs	r2, #0
   b6988:	6840      	ldr	r0, [r0, #4]
   b698a:	4611      	mov	r1, r2
   b698c:	f7ff b82e 	b.w	b59ec <network_connecting>

000b6990 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b6990:	6840      	ldr	r0, [r0, #4]
   b6992:	2200      	movs	r2, #0
   b6994:	2102      	movs	r1, #2
   b6996:	f7ff b831 	b.w	b59fc <network_disconnect>

000b699a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b699a:	2300      	movs	r3, #0
   b699c:	6840      	ldr	r0, [r0, #4]
   b699e:	461a      	mov	r2, r3
   b69a0:	f7ff b81c 	b.w	b59dc <network_connect>

000b69a4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b69a4:	4b02      	ldr	r3, [pc, #8]	; (b69b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b69a6:	2204      	movs	r2, #4
   b69a8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b69aa:	4a02      	ldr	r2, [pc, #8]	; (b69b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b69ac:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b69ae:	4770      	bx	lr
   b69b0:	2003e718 	.word	0x2003e718
   b69b4:	000b7da8 	.word	0x000b7da8

000b69b8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b69b8:	2300      	movs	r3, #0
   b69ba:	6840      	ldr	r0, [r0, #4]
   b69bc:	461a      	mov	r2, r3
   b69be:	f7ff b80d 	b.w	b59dc <network_connect>

000b69c2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b69c2:	6840      	ldr	r0, [r0, #4]
   b69c4:	2200      	movs	r2, #0
   b69c6:	2102      	movs	r1, #2
   b69c8:	f7ff b818 	b.w	b59fc <network_disconnect>

000b69cc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b69cc:	2200      	movs	r2, #0
   b69ce:	6840      	ldr	r0, [r0, #4]
   b69d0:	4611      	mov	r1, r2
   b69d2:	f7ff b80b 	b.w	b59ec <network_connecting>

000b69d6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b69d6:	2200      	movs	r2, #0
   b69d8:	6840      	ldr	r0, [r0, #4]
   b69da:	4611      	mov	r1, r2
   b69dc:	f7ff b816 	b.w	b5a0c <network_ready>

000b69e0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b69e0:	2300      	movs	r3, #0
   b69e2:	6840      	ldr	r0, [r0, #4]
   b69e4:	461a      	mov	r2, r3
   b69e6:	4619      	mov	r1, r3
   b69e8:	f7ff b818 	b.w	b5a1c <network_on>

000b69ec <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b69ec:	2300      	movs	r3, #0
   b69ee:	6840      	ldr	r0, [r0, #4]
   b69f0:	461a      	mov	r2, r3
   b69f2:	4619      	mov	r1, r3
   b69f4:	f7ff b81a 	b.w	b5a2c <network_off>

000b69f8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b69f8:	6840      	ldr	r0, [r0, #4]
   b69fa:	2100      	movs	r1, #0
   b69fc:	f7ff b83e 	b.w	b5a7c <network_is_on>

000b6a00 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b6a00:	6840      	ldr	r0, [r0, #4]
   b6a02:	2100      	movs	r1, #0
   b6a04:	f7ff b842 	b.w	b5a8c <network_is_off>

000b6a08 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b6a08:	6840      	ldr	r0, [r0, #4]
   b6a0a:	2200      	movs	r2, #0
   b6a0c:	f081 0101 	eor.w	r1, r1, #1
   b6a10:	f7ff b814 	b.w	b5a3c <network_listen>

000b6a14 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b6a14:	6840      	ldr	r0, [r0, #4]
   b6a16:	2200      	movs	r2, #0
   b6a18:	f7ff b820 	b.w	b5a5c <network_set_listen_timeout>

000b6a1c <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b6a1c:	2200      	movs	r2, #0
   b6a1e:	6840      	ldr	r0, [r0, #4]
   b6a20:	4611      	mov	r1, r2
   b6a22:	f7ff b823 	b.w	b5a6c <network_get_listen_timeout>

000b6a26 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b6a26:	2200      	movs	r2, #0
   b6a28:	6840      	ldr	r0, [r0, #4]
   b6a2a:	4611      	mov	r1, r2
   b6a2c:	f7ff b80e 	b.w	b5a4c <network_listening>

000b6a30 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b6a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b6a34:	b095      	sub	sp, #84	; 0x54
   b6a36:	4614      	mov	r4, r2
   b6a38:	460d      	mov	r5, r1
   b6a3a:	4607      	mov	r7, r0
    IPAddress addr;
   b6a3c:	f7ff fb20 	bl	b6080 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b6a40:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b6a42:	221c      	movs	r2, #28
   b6a44:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b6a46:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b6a48:	f000 fa86 	bl	b6f58 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b6a4c:	2340      	movs	r3, #64	; 0x40
   b6a4e:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b6a50:	4620      	mov	r0, r4
   b6a52:	466b      	mov	r3, sp
   b6a54:	aa0c      	add	r2, sp, #48	; 0x30
   b6a56:	2100      	movs	r1, #0
   b6a58:	f7fe fdc4 	bl	b55e4 <netdb_getaddrinfo>
    if (!r) {
   b6a5c:	4604      	mov	r4, r0
   b6a5e:	2800      	cmp	r0, #0
   b6a60:	d14b      	bne.n	b6afa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a62:	4602      	mov	r2, r0
   b6a64:	2101      	movs	r1, #1
   b6a66:	6868      	ldr	r0, [r5, #4]
   b6a68:	f7fe ffd0 	bl	b5a0c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a6c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b6a6e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a70:	4622      	mov	r2, r4
   b6a72:	6868      	ldr	r0, [r5, #4]
   b6a74:	f7fe ffca 	bl	b5a0c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a78:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b6a7a:	4681      	mov	r9, r0
        bool ok = false;
   b6a7c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a7e:	2e00      	cmp	r6, #0
   b6a80:	d03b      	beq.n	b6afa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b6a82:	2900      	cmp	r1, #0
   b6a84:	d139      	bne.n	b6afa <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b6a86:	6873      	ldr	r3, [r6, #4]
   b6a88:	2b02      	cmp	r3, #2
   b6a8a:	d003      	beq.n	b6a94 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b6a8c:	2b0a      	cmp	r3, #10
   b6a8e:	d011      	beq.n	b6ab4 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b6a90:	69f6      	ldr	r6, [r6, #28]
   b6a92:	e7f4      	b.n	b6a7e <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b6a94:	f1b8 0f00 	cmp.w	r8, #0
   b6a98:	d0fa      	beq.n	b6a90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b6a9a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b6a9c:	a806      	add	r0, sp, #24
   b6a9e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b6aa0:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b6aa2:	f7ff fb31 	bl	b6108 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b6aa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6aa8:	1d3c      	adds	r4, r7, #4
   b6aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6aac:	682b      	ldr	r3, [r5, #0]
   b6aae:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6ab0:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b6ab2:	e7ed      	b.n	b6a90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b6ab4:	f1b9 0f00 	cmp.w	r9, #0
   b6ab8:	d0ea      	beq.n	b6a90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b6aba:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b6abc:	2210      	movs	r2, #16
   b6abe:	a801      	add	r0, sp, #4
   b6ac0:	f000 fa4a 	bl	b6f58 <memset>
                    a.v = 6;
   b6ac4:	2306      	movs	r3, #6
   b6ac6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b6aca:	ad01      	add	r5, sp, #4
   b6acc:	f104 0308 	add.w	r3, r4, #8
   b6ad0:	3418      	adds	r4, #24
   b6ad2:	6818      	ldr	r0, [r3, #0]
   b6ad4:	6859      	ldr	r1, [r3, #4]
   b6ad6:	462a      	mov	r2, r5
   b6ad8:	c203      	stmia	r2!, {r0, r1}
   b6ada:	3308      	adds	r3, #8
   b6adc:	42a3      	cmp	r3, r4
   b6ade:	4615      	mov	r5, r2
   b6ae0:	d1f7      	bne.n	b6ad2 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b6ae2:	a901      	add	r1, sp, #4
   b6ae4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b6ae6:	ad07      	add	r5, sp, #28
   b6ae8:	f7ff fad8 	bl	b609c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b6aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b6aee:	1d3c      	adds	r4, r7, #4
   b6af0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b6af2:	682b      	ldr	r3, [r5, #0]
   b6af4:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b6af6:	4649      	mov	r1, r9
   b6af8:	e7ca      	b.n	b6a90 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b6afa:	9800      	ldr	r0, [sp, #0]
   b6afc:	f7fe fd6a 	bl	b55d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b6b00:	4638      	mov	r0, r7
   b6b02:	b015      	add	sp, #84	; 0x54
   b6b04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b6b08 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b6b08:	4b02      	ldr	r3, [pc, #8]	; (b6b14 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b6b0a:	4a03      	ldr	r2, [pc, #12]	; (b6b18 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b6b0c:	601a      	str	r2, [r3, #0]
   b6b0e:	2200      	movs	r2, #0
   b6b10:	605a      	str	r2, [r3, #4]

} // spark
   b6b12:	4770      	bx	lr
   b6b14:	2003e720 	.word	0x2003e720
   b6b18:	000b7de4 	.word	0x000b7de4

000b6b1c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6b1c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6b1e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6b20:	d902      	bls.n	b6b28 <pinAvailable+0xc>
    return false;
   b6b22:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b6b24:	b002      	add	sp, #8
   b6b26:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6b28:	f1a0 030b 	sub.w	r3, r0, #11
   b6b2c:	2b02      	cmp	r3, #2
   b6b2e:	d81a      	bhi.n	b6b66 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6b30:	4c17      	ldr	r4, [pc, #92]	; (b6b90 <pinAvailable+0x74>)
   b6b32:	7821      	ldrb	r1, [r4, #0]
   b6b34:	f3bf 8f5b 	dmb	ish
   b6b38:	f011 0101 	ands.w	r1, r1, #1
   b6b3c:	d10b      	bne.n	b6b56 <pinAvailable+0x3a>
   b6b3e:	4620      	mov	r0, r4
   b6b40:	9101      	str	r1, [sp, #4]
   b6b42:	f7fd fab9 	bl	b40b8 <__cxa_guard_acquire>
   b6b46:	9901      	ldr	r1, [sp, #4]
   b6b48:	b128      	cbz	r0, b6b56 <pinAvailable+0x3a>
   b6b4a:	4812      	ldr	r0, [pc, #72]	; (b6b94 <pinAvailable+0x78>)
   b6b4c:	f7ff f822 	bl	b5b94 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6b50:	4620      	mov	r0, r4
   b6b52:	f7fd fab6 	bl	b40c2 <__cxa_guard_release>
   b6b56:	4b0f      	ldr	r3, [pc, #60]	; (b6b94 <pinAvailable+0x78>)
   b6b58:	7818      	ldrb	r0, [r3, #0]
   b6b5a:	f7fe fea3 	bl	b58a4 <hal_spi_is_enabled>
   b6b5e:	2800      	cmp	r0, #0
   b6b60:	d1df      	bne.n	b6b22 <pinAvailable+0x6>
  return true; // 'pin' is available
   b6b62:	2001      	movs	r0, #1
   b6b64:	e7de      	b.n	b6b24 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b6b66:	2801      	cmp	r0, #1
   b6b68:	d809      	bhi.n	b6b7e <pinAvailable+0x62>
   b6b6a:	f000 f8a9 	bl	b6cc0 <_Z19__fetch_global_Wirev>
   b6b6e:	2100      	movs	r1, #0
   b6b70:	7c00      	ldrb	r0, [r0, #16]
   b6b72:	f7fe fe3f 	bl	b57f4 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b6b76:	f080 0001 	eor.w	r0, r0, #1
   b6b7a:	b2c0      	uxtb	r0, r0
   b6b7c:	e7d2      	b.n	b6b24 <pinAvailable+0x8>
   b6b7e:	3809      	subs	r0, #9
   b6b80:	2801      	cmp	r0, #1
   b6b82:	d8ee      	bhi.n	b6b62 <pinAvailable+0x46>
   b6b84:	f000 f860 	bl	b6c48 <_Z22__fetch_global_Serial1v>
   b6b88:	7c00      	ldrb	r0, [r0, #16]
   b6b8a:	f7fe fdd3 	bl	b5734 <hal_usart_is_enabled>
   b6b8e:	e7f2      	b.n	b6b76 <pinAvailable+0x5a>
   b6b90:	2003e6b8 	.word	0x2003e6b8
   b6b94:	2003e6bc 	.word	0x2003e6bc

000b6b98 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6b98:	2823      	cmp	r0, #35	; 0x23
{
   b6b9a:	b538      	push	{r3, r4, r5, lr}
   b6b9c:	4604      	mov	r4, r0
   b6b9e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6ba0:	d80a      	bhi.n	b6bb8 <pinMode+0x20>
   b6ba2:	29ff      	cmp	r1, #255	; 0xff
   b6ba4:	d008      	beq.n	b6bb8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b6ba6:	f7ff ffb9 	bl	b6b1c <pinAvailable>
   b6baa:	b128      	cbz	r0, b6bb8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6bac:	4629      	mov	r1, r5
   b6bae:	4620      	mov	r0, r4
}
   b6bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b6bb4:	f7fe bd26 	b.w	b5604 <HAL_Pin_Mode>
}
   b6bb8:	bd38      	pop	{r3, r4, r5, pc}

000b6bba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b6bba:	b538      	push	{r3, r4, r5, lr}
   b6bbc:	4604      	mov	r4, r0
   b6bbe:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6bc0:	f7fe fd28 	bl	b5614 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b6bc4:	28ff      	cmp	r0, #255	; 0xff
   b6bc6:	d010      	beq.n	b6bea <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b6bc8:	2806      	cmp	r0, #6
   b6bca:	d804      	bhi.n	b6bd6 <digitalWrite+0x1c>
   b6bcc:	234d      	movs	r3, #77	; 0x4d
   b6bce:	fa23 f000 	lsr.w	r0, r3, r0
   b6bd2:	07c3      	lsls	r3, r0, #31
   b6bd4:	d409      	bmi.n	b6bea <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b6bd6:	4620      	mov	r0, r4
   b6bd8:	f7ff ffa0 	bl	b6b1c <pinAvailable>
   b6bdc:	b128      	cbz	r0, b6bea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b6bde:	4629      	mov	r1, r5
   b6be0:	4620      	mov	r0, r4
}
   b6be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b6be6:	f7fe bd1d 	b.w	b5624 <HAL_GPIO_Write>
}
   b6bea:	bd38      	pop	{r3, r4, r5, pc}

000b6bec <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   b6bec:	b510      	push	{r4, lr}
   b6bee:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b6bf0:	f7fe fd10 	bl	b5614 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   b6bf4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   b6bf6:	b2db      	uxtb	r3, r3
   b6bf8:	2b01      	cmp	r3, #1
   b6bfa:	d908      	bls.n	b6c0e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   b6bfc:	4620      	mov	r0, r4
   b6bfe:	f7ff ff8d 	bl	b6b1c <pinAvailable>
   b6c02:	b120      	cbz	r0, b6c0e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   b6c04:	4620      	mov	r0, r4
}
   b6c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   b6c0a:	f7fe bd13 	b.w	b5634 <HAL_GPIO_Read>
}
   b6c0e:	2000      	movs	r0, #0
   b6c10:	bd10      	pop	{r4, pc}

000b6c12 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6c12:	4770      	bx	lr

000b6c14 <_Z20acquireSerial1Bufferv>:
{
   b6c14:	b538      	push	{r3, r4, r5, lr}
   b6c16:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6c18:	2514      	movs	r5, #20
   b6c1a:	462a      	mov	r2, r5
   b6c1c:	2100      	movs	r1, #0
   b6c1e:	f000 f99b 	bl	b6f58 <memset>
   b6c22:	8025      	strh	r5, [r4, #0]
   b6c24:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c26:	4907      	ldr	r1, [pc, #28]	; (b6c44 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6c28:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c2a:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6c2c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c2e:	f000 f86b 	bl	b6d08 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c32:	4904      	ldr	r1, [pc, #16]	; (b6c44 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6c34:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6c36:	4628      	mov	r0, r5
   b6c38:	f000 f866 	bl	b6d08 <_ZnajRKSt9nothrow_t>
    };
   b6c3c:	60e0      	str	r0, [r4, #12]
}
   b6c3e:	4620      	mov	r0, r4
   b6c40:	bd38      	pop	{r3, r4, r5, pc}
   b6c42:	bf00      	nop
   b6c44:	000b7e18 	.word	0x000b7e18

000b6c48 <_Z22__fetch_global_Serial1v>:
{
   b6c48:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6c4a:	4d0e      	ldr	r5, [pc, #56]	; (b6c84 <_Z22__fetch_global_Serial1v+0x3c>)
   b6c4c:	7829      	ldrb	r1, [r5, #0]
   b6c4e:	f3bf 8f5b 	dmb	ish
   b6c52:	f011 0401 	ands.w	r4, r1, #1
{
   b6c56:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6c58:	d111      	bne.n	b6c7e <_Z22__fetch_global_Serial1v+0x36>
   b6c5a:	4628      	mov	r0, r5
   b6c5c:	f7fd fa2c 	bl	b40b8 <__cxa_guard_acquire>
   b6c60:	b168      	cbz	r0, b6c7e <_Z22__fetch_global_Serial1v+0x36>
   b6c62:	a801      	add	r0, sp, #4
   b6c64:	f7ff ffd6 	bl	b6c14 <_Z20acquireSerial1Bufferv>
   b6c68:	aa01      	add	r2, sp, #4
   b6c6a:	4621      	mov	r1, r4
   b6c6c:	4806      	ldr	r0, [pc, #24]	; (b6c88 <_Z22__fetch_global_Serial1v+0x40>)
   b6c6e:	f7ff fb2f 	bl	b62d0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b6c72:	4628      	mov	r0, r5
   b6c74:	f7fd fa25 	bl	b40c2 <__cxa_guard_release>
   b6c78:	4804      	ldr	r0, [pc, #16]	; (b6c8c <_Z22__fetch_global_Serial1v+0x44>)
   b6c7a:	f000 f959 	bl	b6f30 <atexit>
    return serial1;
}
   b6c7e:	4802      	ldr	r0, [pc, #8]	; (b6c88 <_Z22__fetch_global_Serial1v+0x40>)
   b6c80:	b007      	add	sp, #28
   b6c82:	bd30      	pop	{r4, r5, pc}
   b6c84:	2003e728 	.word	0x2003e728
   b6c88:	2003e72c 	.word	0x2003e72c
   b6c8c:	000b6c13 	.word	0x000b6c13

000b6c90 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6c90:	4770      	bx	lr
	...

000b6c94 <_Z17acquireWireBufferv>:
{
   b6c94:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b6c96:	2520      	movs	r5, #32
   b6c98:	2314      	movs	r3, #20
{
   b6c9a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b6c9c:	6003      	str	r3, [r0, #0]
   b6c9e:	6085      	str	r5, [r0, #8]
   b6ca0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6ca2:	4906      	ldr	r1, [pc, #24]	; (b6cbc <_Z17acquireWireBufferv+0x28>)
   b6ca4:	4628      	mov	r0, r5
   b6ca6:	f000 f82f 	bl	b6d08 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6caa:	4904      	ldr	r1, [pc, #16]	; (b6cbc <_Z17acquireWireBufferv+0x28>)
	};
   b6cac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   b6cae:	4628      	mov	r0, r5
   b6cb0:	f000 f82a 	bl	b6d08 <_ZnajRKSt9nothrow_t>
	};
   b6cb4:	60e0      	str	r0, [r4, #12]
}
   b6cb6:	4620      	mov	r0, r4
   b6cb8:	bd38      	pop	{r3, r4, r5, pc}
   b6cba:	bf00      	nop
   b6cbc:	000b7e18 	.word	0x000b7e18

000b6cc0 <_Z19__fetch_global_Wirev>:
{
   b6cc0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6cc2:	4d0e      	ldr	r5, [pc, #56]	; (b6cfc <_Z19__fetch_global_Wirev+0x3c>)
   b6cc4:	7829      	ldrb	r1, [r5, #0]
   b6cc6:	f3bf 8f5b 	dmb	ish
   b6cca:	f011 0401 	ands.w	r4, r1, #1
{
   b6cce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6cd0:	d111      	bne.n	b6cf6 <_Z19__fetch_global_Wirev+0x36>
   b6cd2:	4628      	mov	r0, r5
   b6cd4:	f7fd f9f0 	bl	b40b8 <__cxa_guard_acquire>
   b6cd8:	b168      	cbz	r0, b6cf6 <_Z19__fetch_global_Wirev+0x36>
   b6cda:	a801      	add	r0, sp, #4
   b6cdc:	f7ff ffda 	bl	b6c94 <_Z17acquireWireBufferv>
   b6ce0:	aa01      	add	r2, sp, #4
   b6ce2:	4621      	mov	r1, r4
   b6ce4:	4806      	ldr	r0, [pc, #24]	; (b6d00 <_Z19__fetch_global_Wirev+0x40>)
   b6ce6:	f7ff fb33 	bl	b6350 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6cea:	4628      	mov	r0, r5
   b6cec:	f7fd f9e9 	bl	b40c2 <__cxa_guard_release>
   b6cf0:	4804      	ldr	r0, [pc, #16]	; (b6d04 <_Z19__fetch_global_Wirev+0x44>)
   b6cf2:	f000 f91d 	bl	b6f30 <atexit>
	return wire;
}
   b6cf6:	4802      	ldr	r0, [pc, #8]	; (b6d00 <_Z19__fetch_global_Wirev+0x40>)
   b6cf8:	b007      	add	sp, #28
   b6cfa:	bd30      	pop	{r4, r5, pc}
   b6cfc:	2003e744 	.word	0x2003e744
   b6d00:	2003e748 	.word	0x2003e748
   b6d04:	000b6c91 	.word	0x000b6c91

000b6d08 <_ZnajRKSt9nothrow_t>:
   b6d08:	f7fd b9c5 	b.w	b4096 <_Znaj>

000b6d0c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6d0c:	4901      	ldr	r1, [pc, #4]	; (b6d14 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6d0e:	f000 b8f9 	b.w	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6d12:	bf00      	nop
   b6d14:	000b7e34 	.word	0x000b7e34

000b6d18 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6d18:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6d1a:	2400      	movs	r4, #0
   b6d1c:	2310      	movs	r3, #16
   b6d1e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b6d22:	6803      	ldr	r3, [r0, #0]
   b6d24:	4615      	mov	r5, r2
   b6d26:	699e      	ldr	r6, [r3, #24]
   b6d28:	6812      	ldr	r2, [r2, #0]
   b6d2a:	466b      	mov	r3, sp
   b6d2c:	e9cd 4400 	strd	r4, r4, [sp]
   b6d30:	47b0      	blx	r6
   b6d32:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b6d36:	f003 0306 	and.w	r3, r3, #6
   b6d3a:	2b06      	cmp	r3, #6
   b6d3c:	bf03      	ittte	eq
   b6d3e:	9b00      	ldreq	r3, [sp, #0]
   b6d40:	602b      	streq	r3, [r5, #0]
   b6d42:	2001      	moveq	r0, #1
   b6d44:	4620      	movne	r0, r4
   b6d46:	b004      	add	sp, #16
   b6d48:	bd70      	pop	{r4, r5, r6, pc}

000b6d4a <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6d4a:	9800      	ldr	r0, [sp, #0]
   b6d4c:	4290      	cmp	r0, r2
   b6d4e:	bf14      	ite	ne
   b6d50:	2001      	movne	r0, #1
   b6d52:	2006      	moveq	r0, #6
   b6d54:	4770      	bx	lr
	...

000b6d58 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6d58:	b510      	push	{r4, lr}
   b6d5a:	4b03      	ldr	r3, [pc, #12]	; (b6d68 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6d5c:	6003      	str	r3, [r0, #0]
   b6d5e:	4604      	mov	r4, r0
   b6d60:	f000 f8cd 	bl	b6efe <_ZNSt9type_infoD1Ev>
   b6d64:	4620      	mov	r0, r4
   b6d66:	bd10      	pop	{r4, pc}
   b6d68:	000b7e74 	.word	0x000b7e74

000b6d6c <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6d6c:	b510      	push	{r4, lr}
   b6d6e:	4604      	mov	r4, r0
   b6d70:	f7ff fff2 	bl	b6d58 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6d74:	4620      	mov	r0, r4
   b6d76:	2108      	movs	r1, #8
   b6d78:	f7fd f98f 	bl	b409a <_ZdlPvj>
   b6d7c:	4620      	mov	r0, r4
   b6d7e:	bd10      	pop	{r4, pc}

000b6d80 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6d84:	461f      	mov	r7, r3
   b6d86:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b6d8a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b6d8e:	4598      	cmp	r8, r3
   b6d90:	4606      	mov	r6, r0
   b6d92:	4615      	mov	r5, r2
   b6d94:	d107      	bne.n	b6da6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6d96:	9907      	ldr	r1, [sp, #28]
   b6d98:	f000 f8b4 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6d9c:	b118      	cbz	r0, b6da6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b6d9e:	7165      	strb	r5, [r4, #5]
   b6da0:	2000      	movs	r0, #0
   b6da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b6da6:	4639      	mov	r1, r7
   b6da8:	4630      	mov	r0, r6
   b6daa:	f000 f8ab 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6dae:	2800      	cmp	r0, #0
   b6db0:	d0f6      	beq.n	b6da0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b6db2:	2301      	movs	r3, #1
   b6db4:	f8c4 8000 	str.w	r8, [r4]
   b6db8:	7125      	strb	r5, [r4, #4]
   b6dba:	71a3      	strb	r3, [r4, #6]
   b6dbc:	e7f0      	b.n	b6da0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b6dbe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b6dbe:	b538      	push	{r3, r4, r5, lr}
   b6dc0:	4615      	mov	r5, r2
   b6dc2:	461c      	mov	r4, r3
   b6dc4:	f000 f89e 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6dc8:	b120      	cbz	r0, b6dd4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b6dca:	2308      	movs	r3, #8
   b6dcc:	60e3      	str	r3, [r4, #12]
   b6dce:	2306      	movs	r3, #6
   b6dd0:	6025      	str	r5, [r4, #0]
   b6dd2:	7123      	strb	r3, [r4, #4]
   b6dd4:	bd38      	pop	{r3, r4, r5, pc}

000b6dd6 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b6dd6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b6dd8:	4605      	mov	r5, r0
   b6dda:	460c      	mov	r4, r1
   b6ddc:	9201      	str	r2, [sp, #4]
   b6dde:	461e      	mov	r6, r3
   b6de0:	f000 f890 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6de4:	b950      	cbnz	r0, b6dfc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6de6:	2e03      	cmp	r6, #3
   b6de8:	d808      	bhi.n	b6dfc <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6dea:	6823      	ldr	r3, [r4, #0]
   b6dec:	9a01      	ldr	r2, [sp, #4]
   b6dee:	695b      	ldr	r3, [r3, #20]
   b6df0:	4629      	mov	r1, r5
   b6df2:	4620      	mov	r0, r4
   b6df4:	b002      	add	sp, #8
   b6df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6dfa:	4718      	bx	r3
   b6dfc:	b002      	add	sp, #8
   b6dfe:	bd70      	pop	{r4, r5, r6, pc}

000b6e00 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6e00:	b510      	push	{r4, lr}
   b6e02:	4b03      	ldr	r3, [pc, #12]	; (b6e10 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b6e04:	6003      	str	r3, [r0, #0]
   b6e06:	4604      	mov	r4, r0
   b6e08:	f7ff ffa6 	bl	b6d58 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6e0c:	4620      	mov	r0, r4
   b6e0e:	bd10      	pop	{r4, pc}
   b6e10:	000b7ed4 	.word	0x000b7ed4

000b6e14 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b6e14:	b510      	push	{r4, lr}
   b6e16:	4604      	mov	r4, r0
   b6e18:	f7ff fff2 	bl	b6e00 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6e1c:	4620      	mov	r0, r4
   b6e1e:	210c      	movs	r1, #12
   b6e20:	f7fd f93b 	bl	b409a <_ZdlPvj>
   b6e24:	4620      	mov	r0, r4
   b6e26:	bd10      	pop	{r4, pc}

000b6e28 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6e2a:	9f08      	ldr	r7, [sp, #32]
   b6e2c:	4297      	cmp	r7, r2
   b6e2e:	4605      	mov	r5, r0
   b6e30:	460e      	mov	r6, r1
   b6e32:	4614      	mov	r4, r2
   b6e34:	d00a      	beq.n	b6e4c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b6e36:	68a8      	ldr	r0, [r5, #8]
   b6e38:	6802      	ldr	r2, [r0, #0]
   b6e3a:	9708      	str	r7, [sp, #32]
   b6e3c:	6a15      	ldr	r5, [r2, #32]
   b6e3e:	4631      	mov	r1, r6
   b6e40:	4622      	mov	r2, r4
   b6e42:	46ac      	mov	ip, r5
   b6e44:	b003      	add	sp, #12
   b6e46:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6e4a:	4760      	bx	ip
   b6e4c:	4619      	mov	r1, r3
   b6e4e:	9301      	str	r3, [sp, #4]
   b6e50:	f000 f858 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6e54:	9b01      	ldr	r3, [sp, #4]
   b6e56:	2800      	cmp	r0, #0
   b6e58:	d0ed      	beq.n	b6e36 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6e5a:	2006      	movs	r0, #6
   b6e5c:	b003      	add	sp, #12
   b6e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6e60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6e60:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6e64:	460d      	mov	r5, r1
   b6e66:	4619      	mov	r1, r3
   b6e68:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6e6c:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6e70:	4681      	mov	r9, r0
   b6e72:	4617      	mov	r7, r2
   b6e74:	4698      	mov	r8, r3
   b6e76:	f000 f845 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6e7a:	b190      	cbz	r0, b6ea2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6e7c:	2d00      	cmp	r5, #0
   b6e7e:	6034      	str	r4, [r6, #0]
   b6e80:	7137      	strb	r7, [r6, #4]
   b6e82:	db09      	blt.n	b6e98 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b6e84:	1961      	adds	r1, r4, r5
   b6e86:	458a      	cmp	sl, r1
   b6e88:	bf0c      	ite	eq
   b6e8a:	2106      	moveq	r1, #6
   b6e8c:	2101      	movne	r1, #1
   b6e8e:	71b1      	strb	r1, [r6, #6]
   b6e90:	2000      	movs	r0, #0
   b6e92:	b001      	add	sp, #4
   b6e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b6e98:	3502      	adds	r5, #2
   b6e9a:	d1f9      	bne.n	b6e90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6e9c:	2301      	movs	r3, #1
   b6e9e:	71b3      	strb	r3, [r6, #6]
   b6ea0:	e7f6      	b.n	b6e90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6ea2:	4554      	cmp	r4, sl
   b6ea4:	d106      	bne.n	b6eb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6ea6:	4659      	mov	r1, fp
   b6ea8:	4648      	mov	r0, r9
   b6eaa:	f000 f82b 	bl	b6f04 <_ZNKSt9type_infoeqERKS_>
   b6eae:	b108      	cbz	r0, b6eb4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b6eb0:	7177      	strb	r7, [r6, #5]
   b6eb2:	e7ed      	b.n	b6e90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b6eb4:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b6eb8:	6803      	ldr	r3, [r0, #0]
   b6eba:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b6ebe:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b6ec2:	69dc      	ldr	r4, [r3, #28]
   b6ec4:	463a      	mov	r2, r7
   b6ec6:	4643      	mov	r3, r8
   b6ec8:	4629      	mov	r1, r5
   b6eca:	46a4      	mov	ip, r4
   b6ecc:	b001      	add	sp, #4
   b6ece:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b6ed2:	4760      	bx	ip

000b6ed4 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b6ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b6ed8:	4607      	mov	r7, r0
   b6eda:	460c      	mov	r4, r1
   b6edc:	4615      	mov	r5, r2
   b6ede:	461e      	mov	r6, r3
   b6ee0:	f7ff ff6d 	bl	b6dbe <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b6ee4:	b948      	cbnz	r0, b6efa <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b6ee6:	68b8      	ldr	r0, [r7, #8]
   b6ee8:	6803      	ldr	r3, [r0, #0]
   b6eea:	699f      	ldr	r7, [r3, #24]
   b6eec:	462a      	mov	r2, r5
   b6eee:	4633      	mov	r3, r6
   b6ef0:	4621      	mov	r1, r4
   b6ef2:	46bc      	mov	ip, r7
   b6ef4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6ef8:	4760      	bx	ip
   b6efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6efe <_ZNSt9type_infoD1Ev>:
   b6efe:	4770      	bx	lr

000b6f00 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6f00:	2000      	movs	r0, #0
   b6f02:	4770      	bx	lr

000b6f04 <_ZNKSt9type_infoeqERKS_>:
   b6f04:	4281      	cmp	r1, r0
   b6f06:	b508      	push	{r3, lr}
   b6f08:	d00e      	beq.n	b6f28 <_ZNKSt9type_infoeqERKS_+0x24>
   b6f0a:	6840      	ldr	r0, [r0, #4]
   b6f0c:	7803      	ldrb	r3, [r0, #0]
   b6f0e:	2b2a      	cmp	r3, #42	; 0x2a
   b6f10:	d00c      	beq.n	b6f2c <_ZNKSt9type_infoeqERKS_+0x28>
   b6f12:	6849      	ldr	r1, [r1, #4]
   b6f14:	780b      	ldrb	r3, [r1, #0]
   b6f16:	2b2a      	cmp	r3, #42	; 0x2a
   b6f18:	bf08      	it	eq
   b6f1a:	3101      	addeq	r1, #1
   b6f1c:	f000 f852 	bl	b6fc4 <strcmp>
   b6f20:	fab0 f080 	clz	r0, r0
   b6f24:	0940      	lsrs	r0, r0, #5
   b6f26:	bd08      	pop	{r3, pc}
   b6f28:	2001      	movs	r0, #1
   b6f2a:	e7fc      	b.n	b6f26 <_ZNKSt9type_infoeqERKS_+0x22>
   b6f2c:	2000      	movs	r0, #0
   b6f2e:	e7fa      	b.n	b6f26 <_ZNKSt9type_infoeqERKS_+0x22>

000b6f30 <atexit>:
   b6f30:	2300      	movs	r3, #0
   b6f32:	4601      	mov	r1, r0
   b6f34:	461a      	mov	r2, r3
   b6f36:	4618      	mov	r0, r3
   b6f38:	f000 b856 	b.w	b6fe8 <__register_exitproc>

000b6f3c <memcpy>:
   b6f3c:	440a      	add	r2, r1
   b6f3e:	4291      	cmp	r1, r2
   b6f40:	f100 33ff 	add.w	r3, r0, #4294967295
   b6f44:	d100      	bne.n	b6f48 <memcpy+0xc>
   b6f46:	4770      	bx	lr
   b6f48:	b510      	push	{r4, lr}
   b6f4a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6f4e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b6f52:	4291      	cmp	r1, r2
   b6f54:	d1f9      	bne.n	b6f4a <memcpy+0xe>
   b6f56:	bd10      	pop	{r4, pc}

000b6f58 <memset>:
   b6f58:	4402      	add	r2, r0
   b6f5a:	4603      	mov	r3, r0
   b6f5c:	4293      	cmp	r3, r2
   b6f5e:	d100      	bne.n	b6f62 <memset+0xa>
   b6f60:	4770      	bx	lr
   b6f62:	f803 1b01 	strb.w	r1, [r3], #1
   b6f66:	e7f9      	b.n	b6f5c <memset+0x4>

000b6f68 <srand>:
   b6f68:	b538      	push	{r3, r4, r5, lr}
   b6f6a:	4b10      	ldr	r3, [pc, #64]	; (b6fac <srand+0x44>)
   b6f6c:	681d      	ldr	r5, [r3, #0]
   b6f6e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6f70:	4604      	mov	r4, r0
   b6f72:	b9b3      	cbnz	r3, b6fa2 <srand+0x3a>
   b6f74:	2018      	movs	r0, #24
   b6f76:	f7fe fd99 	bl	b5aac <malloc>
   b6f7a:	4602      	mov	r2, r0
   b6f7c:	63a8      	str	r0, [r5, #56]	; 0x38
   b6f7e:	b920      	cbnz	r0, b6f8a <srand+0x22>
   b6f80:	4b0b      	ldr	r3, [pc, #44]	; (b6fb0 <srand+0x48>)
   b6f82:	480c      	ldr	r0, [pc, #48]	; (b6fb4 <srand+0x4c>)
   b6f84:	2142      	movs	r1, #66	; 0x42
   b6f86:	f7fe fdb1 	bl	b5aec <__assert_func>
   b6f8a:	490b      	ldr	r1, [pc, #44]	; (b6fb8 <srand+0x50>)
   b6f8c:	4b0b      	ldr	r3, [pc, #44]	; (b6fbc <srand+0x54>)
   b6f8e:	e9c0 1300 	strd	r1, r3, [r0]
   b6f92:	4b0b      	ldr	r3, [pc, #44]	; (b6fc0 <srand+0x58>)
   b6f94:	6083      	str	r3, [r0, #8]
   b6f96:	230b      	movs	r3, #11
   b6f98:	8183      	strh	r3, [r0, #12]
   b6f9a:	2100      	movs	r1, #0
   b6f9c:	2001      	movs	r0, #1
   b6f9e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6fa2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6fa4:	2200      	movs	r2, #0
   b6fa6:	611c      	str	r4, [r3, #16]
   b6fa8:	615a      	str	r2, [r3, #20]
   b6faa:	bd38      	pop	{r3, r4, r5, pc}
   b6fac:	2003e558 	.word	0x2003e558
   b6fb0:	000b7f0d 	.word	0x000b7f0d
   b6fb4:	000b7f24 	.word	0x000b7f24
   b6fb8:	abcd330e 	.word	0xabcd330e
   b6fbc:	e66d1234 	.word	0xe66d1234
   b6fc0:	0005deec 	.word	0x0005deec

000b6fc4 <strcmp>:
   b6fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6fcc:	2a01      	cmp	r2, #1
   b6fce:	bf28      	it	cs
   b6fd0:	429a      	cmpcs	r2, r3
   b6fd2:	d0f7      	beq.n	b6fc4 <strcmp>
   b6fd4:	1ad0      	subs	r0, r2, r3
   b6fd6:	4770      	bx	lr

000b6fd8 <strlen>:
   b6fd8:	4603      	mov	r3, r0
   b6fda:	f813 2b01 	ldrb.w	r2, [r3], #1
   b6fde:	2a00      	cmp	r2, #0
   b6fe0:	d1fb      	bne.n	b6fda <strlen+0x2>
   b6fe2:	1a18      	subs	r0, r3, r0
   b6fe4:	3801      	subs	r0, #1
   b6fe6:	4770      	bx	lr

000b6fe8 <__register_exitproc>:
   b6fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6fec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b70a8 <__register_exitproc+0xc0>
   b6ff0:	4606      	mov	r6, r0
   b6ff2:	f8d8 0000 	ldr.w	r0, [r8]
   b6ff6:	461f      	mov	r7, r3
   b6ff8:	460d      	mov	r5, r1
   b6ffa:	4691      	mov	r9, r2
   b6ffc:	f000 f856 	bl	b70ac <__retarget_lock_acquire_recursive>
   b7000:	4b25      	ldr	r3, [pc, #148]	; (b7098 <__register_exitproc+0xb0>)
   b7002:	681c      	ldr	r4, [r3, #0]
   b7004:	b934      	cbnz	r4, b7014 <__register_exitproc+0x2c>
   b7006:	4c25      	ldr	r4, [pc, #148]	; (b709c <__register_exitproc+0xb4>)
   b7008:	601c      	str	r4, [r3, #0]
   b700a:	4b25      	ldr	r3, [pc, #148]	; (b70a0 <__register_exitproc+0xb8>)
   b700c:	b113      	cbz	r3, b7014 <__register_exitproc+0x2c>
   b700e:	681b      	ldr	r3, [r3, #0]
   b7010:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b7014:	6863      	ldr	r3, [r4, #4]
   b7016:	2b1f      	cmp	r3, #31
   b7018:	dd07      	ble.n	b702a <__register_exitproc+0x42>
   b701a:	f8d8 0000 	ldr.w	r0, [r8]
   b701e:	f000 f847 	bl	b70b0 <__retarget_lock_release_recursive>
   b7022:	f04f 30ff 	mov.w	r0, #4294967295
   b7026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b702a:	b34e      	cbz	r6, b7080 <__register_exitproc+0x98>
   b702c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7030:	b988      	cbnz	r0, b7056 <__register_exitproc+0x6e>
   b7032:	4b1c      	ldr	r3, [pc, #112]	; (b70a4 <__register_exitproc+0xbc>)
   b7034:	b923      	cbnz	r3, b7040 <__register_exitproc+0x58>
   b7036:	f8d8 0000 	ldr.w	r0, [r8]
   b703a:	f000 f838 	bl	b70ae <__retarget_lock_release>
   b703e:	e7f0      	b.n	b7022 <__register_exitproc+0x3a>
   b7040:	f44f 7084 	mov.w	r0, #264	; 0x108
   b7044:	f7fe fd32 	bl	b5aac <malloc>
   b7048:	2800      	cmp	r0, #0
   b704a:	d0f4      	beq.n	b7036 <__register_exitproc+0x4e>
   b704c:	2300      	movs	r3, #0
   b704e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b7052:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b7056:	6863      	ldr	r3, [r4, #4]
   b7058:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b705c:	2201      	movs	r2, #1
   b705e:	409a      	lsls	r2, r3
   b7060:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b7064:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7068:	4313      	orrs	r3, r2
   b706a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b706e:	2e02      	cmp	r6, #2
   b7070:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b7074:	bf02      	ittt	eq
   b7076:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b707a:	4313      	orreq	r3, r2
   b707c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7080:	6863      	ldr	r3, [r4, #4]
   b7082:	f8d8 0000 	ldr.w	r0, [r8]
   b7086:	1c5a      	adds	r2, r3, #1
   b7088:	3302      	adds	r3, #2
   b708a:	6062      	str	r2, [r4, #4]
   b708c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b7090:	f000 f80e 	bl	b70b0 <__retarget_lock_release_recursive>
   b7094:	2000      	movs	r0, #0
   b7096:	e7c6      	b.n	b7026 <__register_exitproc+0x3e>
   b7098:	2003e7e8 	.word	0x2003e7e8
   b709c:	2003e75c 	.word	0x2003e75c
   b70a0:	00000000 	.word	0x00000000
   b70a4:	000b5aad 	.word	0x000b5aad
   b70a8:	2003e5bc 	.word	0x2003e5bc

000b70ac <__retarget_lock_acquire_recursive>:
   b70ac:	4770      	bx	lr

000b70ae <__retarget_lock_release>:
   b70ae:	4770      	bx	lr

000b70b0 <__retarget_lock_release_recursive>:
   b70b0:	4770      	bx	lr

000b70b2 <link_code_end>:
	...

000b70b4 <dynalib_user>:
   b70b4:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b70c4:	0000 0000 6143 6c6c 6f20 206e 7570 6572     ....Call on pure
   b70d4:	7620 7269 7574 6c61 5400 6d69 7265 003a      virtual.Timer:.
   b70e4:	6564 6166 6c75 2074 4d00 4253 4c00 4253     default .MSB.LSB
   b70f4:	3c00 5053 5349 7465 6974 676e 2073 6564     .<SPISettings de
   b7104:	6166 6c75 3e74 3c00 5053 5349 7465 6974     fault>.<SPISetti
   b7114:	676e 2073 7325 7525 2520 2073 4f4d 4544     ngs %s%u %s MODE
   b7124:	7525 003e                                   %u>.

000b7128 <_ZL4font>:
   b7128:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
   b7138:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
   b7148:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
   b7158:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
   b7168:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
   b7178:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
   b7188:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
   b7198:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
   b71a8:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
   b71b8:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
   b71c8:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
   b71d8:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
   b71e8:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
   b71f8:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
   b7208:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
   b7218:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
   b7228:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
   b7238:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
   b7248:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
   b7258:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
   b7268:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
   b7278:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
   b7288:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
   b7298:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
   b72a8:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
   b72b8:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
   b72c8:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
   b72d8:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
   b72e8:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
   b72f8:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
   b7308:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
   b7318:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
   b7328:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
   b7338:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
   b7348:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
   b7358:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
   b7368:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
   b7378:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
   b7388:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
   b7398:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
   b73a8:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
   b73b8:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
   b73c8:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
   b73d8:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
   b73e8:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
   b73f8:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
   b7408:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
   b7418:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
   b7428:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
   b7438:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
   b7448:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
   b7458:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
   b7468:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
   b7478:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
   b7488:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
   b7498:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
   b74a8:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
   b74b8:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
   b74c8:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
   b74d8:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
   b74e8:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
   b74f8:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
   b7508:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
   b7518:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
   b7528:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
   b7538:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
   b7548:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
   b7558:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
   b7568:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
   b7578:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
   b7588:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
   b7598:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
   b75a8:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
   b75b8:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
   b75c8:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
   b75d8:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
   b75e8:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
   b75f8:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
   b7608:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
   b7618:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

000b7628 <_ZTV12Adafruit_GFX>:
	...
   b7638:	49cd 000b 5d49 000b 40a1 000b 43d3 000b     .I..I]...@...C..
   b7648:	43d5 000b 4407 000b 43e3 000b 43f5 000b     .C...D...C...C..
   b7658:	4315 000b 43d3 000b 45ff 000b 45fd 000b     .C...C...E...E..
   b7668:	441f 000b 445d 000b 4497 000b 44dd 000b     .D..]D...D...D..
   b7678:	44f9 000b 457d 000b                         .D..}E..

000b7680 <_ZTV16OledWingAdafruit>:
	...
   b7688:	4add 000b 4afd 000b 49cd 000b 5d49 000b     .J...J...I..I]..
   b7698:	4d0d 000b 43d3 000b 43d5 000b 4407 000b     .M...C...C...D..
   b76a8:	43e3 000b 43f5 000b 4315 000b 43d3 000b     .C...C...C...C..
   b76b8:	45ff 000b 4eab 000b 5453 000b 5405 000b     .E...N..ST...T..
   b76c8:	4497 000b 44dd 000b 44f9 000b 457d 000b     .D...D...D..}E..

000b76d8 <_ZTVN8particle11SPISettingsE>:
	...
   b76e0:	42c1 000b 4295 000b 4297 000b               .B...B...B..

000b76ec <_ZL12splash1_data>:
   b76ec:	0000 0000 0100 0080 0000 0000 0000 0000     ................
   b76fc:	8003 0000 0000 0000 0000 0700 00c0 0000     ................
   b770c:	0000 0000 0000 c007 0000 0000 0000 0000     ................
   b771c:	0f00 00c0 0000 0000 0000 0000 e01f 0000     ................
   b772c:	0000 0000 0000 1f00 00e0 0000 0000 0000     ................
   b773c:	0000 e03f 0000 0000 0000 0000 3f00 00f0     ..?..........?..
	...
   b7754:	f07f 0000 0000 0000 1f00 7ff8 00f0 0000     ................
   b7764:	0000 0000 fe3f f07f 0000 0000 0000 3f00     ....?..........?
   b7774:	7fff 00f0 0000 0000 0000 ff1f e0fb 0000     ................
   b7784:	0000 0000 0f00 f9ff c0ff 0000 0000 0000     ................
   b7794:	ff0f fff9 00f8 0000 0000 0700 f1ff ffff     ................
   b77a4:	0000 0000 0000 fc03 ff73 80ff 0000 0000     ........s.......
   b77b4:	0100 3ffe ffff 0080 0000 0000 ff00 0f1e     ...?............
   b77c4:	00ff 0000 0000 0000 fe7f fc1f 0000 0000     ................
   b77d4:	0000 3f00 ffff 00f8 0000 0000 0000 df0f     ...?............
   b77e4:	e0ff 0000 0000 0000 1f00 ff19 00c0 0000     ................
   b77f4:	0000 0000 3c3f 00ff 0000 0000 0000 7e00     ....?<.........~
   b7804:	f87c 0000 0000 0000 0000 fe7f 007c 0000     |...........|...
   b7814:	0000 0000 ff00 fcff 0000 0000 0000 0000     ................
   b7824:	ffff 00fe 0000 0000 0000 ff00 feff 0000     ................
   b7834:	0000 0000 0100 efff 00fe 0000 0000 0000     ................
   b7844:	ff01 fecf 0000 0000 0000 0300 07ff 00fe     ................
   b7854:	0000 0000 0000 fc03 fe07 0000 0000 0000     ................
   b7864:	0300 03f0 00fe 0000 0000 0000 8001 fe00     ................
	...
   b787c:	0000 007e 0000 0000 0000 0000 3e00 0000     ..~..........>..
	...
   b7894:	000c 0000 0000 0700 0080 00fc 0300 00c0     ................
   b78a4:	0000 8007 fc01 0000 c003 0000 0700 0180     ................
   b78b4:	00fc 0300 00c0 0000 8007 e001 0000 1e00     ................
   b78c4:	0000 0700 0180 00e0 0000 001e e37f 9ff7     ................
   b78d4:	fdf9 78e7 df7b ffc0 fff7 fdbf fffd 7b78     ...x{.........x{
   b78e4:	c0df f7ff bfff fdfd 78ff df7b f0c0 87f7     .........x{.....
   b78f4:	3dbc ffe1 7b78 00de f7f0 bc87 e13d 78f0     .=..x{......=..x
   b7904:	de7b 0000 87f7 3d80 e0e1 7b78 00de f77f     {......=..x{....
   b7914:	9f87 e1fd 78e0 de7b ff00 87f7 fdbf e0e1     .....x{.........
   b7924:	7b78 00de f7f0 bc87 e13d 78e0 de7b f000     x{......=..x{...
   b7934:	87f7 3dbc e0e1 7b78 00de f7f0 bc87 e13d     ...=..x{......=.
   b7944:	78e0 de7b ff00 fff7 fdbf e0e1 fb7f c0df     .x{.............
   b7954:	f7ff bfff e1fd 7fe0 dffb 7cc0 f3f3 3d9f     ...........|...=
   b7964:	e0e1 7b3e c0cf 0000 0000 0000 0000 0000     ..>{............
   b7974:	ff00 ffff ffff ffff ffff c0ff ffff ffff     ................
   b7984:	68fd 11db 311a ffc0 ffff fdff 5a2b 6afb     .h...1......+Z.j
   b7994:	c0ef ffff ffff 4bfd 3b5b 331a ffc0 ffff     .......K[;.3....
   b79a4:	fdff 5b6b 6adb c0fd                         ..k[.j..

000b79ac <_ZL12splash2_data>:
   b79ac:	0000 0060 0000 0000 0000 0000 0000 0000     ..`.............
   b79bc:	e000 0000 0000 0000 0000 0000 0000 0100     ................
   b79cc:	00e0 0000 0000 0000 0000 0000 0000 f001     ................
	...
   b79e8:	0300 00f0 0000 0000 0000 0000 0000 0000     ................
   b79f8:	f007 0000 0000 0000 0000 0000 0000 0700     ................
   b7a08:	00f8 0000 0000 0000 0000 0000 0000 f80f     ................
   b7a18:	0000 0300 00c0 007e 0100 00e0 0f7f 00f8     ......~.........
   b7a28:	0000 c003 fe00 0000 e001 ff00 f8ef 0000     ................
   b7a38:	0300 00c0 00fe 0100 00e0 ffff 00f8 0000     ................
   b7a48:	c003 f000 0000 0f00 7f00 7ffe 00c0 0300     ................
   b7a58:	00c0 00f0 0000 000f fe3f f87f f13f cffb     ........?...?...
   b7a68:	fefc bcf3 ef3d 1fe0 7ffe 7fff fffb fedf     ....=...........
   b7a78:	fffe 3dbc e0ef c61f ffff fb7f dfff fefe     ...=............
   b7a88:	bcff ef3d 0fe0 c7e3 78fe c37b 1ede fff0     ..=......x{.....
   b7a98:	3dbc 00ef ff07 fc87 7b78 dec3 f01e 3cf8     .=......x{.....<
   b7aa8:	ef3d 0100 ffff 00f0 c37b 1ec0 f0f0 3d3c     =.......{.....<=
   b7ab8:	00ef f301 e07f fb3f cfc3 f0fe 3cf0 ef3d     ......?......<=.
   b7ac8:	0300 3fe3 7f80 c3fb fedf f0f0 3d3c 00ef     ...?........<=..
   b7ad8:	e707 003c 7b78 dec3 f01e 3cf0 ef3d 0700     ..<.x{.....<=...
   b7ae8:	beff 7800 c37b 1ede f0f0 3d3c 00ef ff07     ...x{.....<=....
   b7af8:	00fe 7b78 dec3 f01e 3cf0 ef3d 0f00 feff     ..x{.....<=.....
   b7b08:	7f00 fffb fedf f0f0 fd3f e0ef ff0f 00ff     ........?.......
   b7b18:	fb7f dfff f0fe 3ff0 effd 0fe0 fff9 3e00     .......?.......>
   b7b28:	f979 9ecf f0f0 3d1f e0e7 f11f 00ff 0000     y......=........
	...
   b7b40:	1f00 ff80 7f00 ffff ffff ffff ffff e0ff     ................
   b7b50:	001c 007f ff7f ffff b4fe 886d 188d 00e0     ..........m.....
   b7b60:	1f00 7f00 ffff feff ad95 b57d e077 0000     ..........}.w...
   b7b70:	000f ff7f ffff a5fe 9dad 198d 00e0 0600     ................
   b7b80:	7f00 ffff feff adb5 b5ed e07e               ..........~.

000b7b8c <_ZTV16Adafruit_SSD1306>:
	...
   b7b94:	4ce1 000b 4cf9 000b 49cd 000b 5d49 000b     .L...L...I..I]..
   b7ba4:	4d0d 000b 43d3 000b 43d5 000b 4407 000b     .M...C...C...D..
   b7bb4:	43e3 000b 43f5 000b 4315 000b 43d3 000b     .C...C...C...C..
   b7bc4:	45ff 000b 4eab 000b 5453 000b 5405 000b     .E...N..ST...T..
   b7bd4:	4497 000b 44dd 000b 44f9 000b 457d 000b     .D...D...D..}E..

000b7be4 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE7premask>:
   b7be4:	8000 e0c0 f8f0 fefc                         ........

000b7bec <_ZZN16Adafruit_SSD130621drawFastVLineInternalEssstE8postmask>:
   b7bec:	0100 0703 1f0f 7f3f                         ......?.

000b7bf4 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
   b7bf4:	d5ae a880                                   ....

000b7bf8 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
   b7bf8:	00d3 8d40                                   ..@.

000b7bfc <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
   b7bfc:	0020 c8a1                                    ...

000b7c00 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
   b7c00:	40db a6a4 af2e                              .@....

000b7c06 <_ZZN16Adafruit_SSD13065beginEhhbbE6init4a>:
   b7c06:	02da 8f81                                   ....

000b7c0a <_ZZN16Adafruit_SSD13065beginEhhbbE6init4b>:
   b7c0a:	12da                                         ...

000b7c0d <_ZZN16Adafruit_SSD13065beginEhhbbE6init4c>:
   b7c0d:	02da                                         ...

000b7c10 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
   b7c10:	0022 21ff 0000 0000                         "..!....

000b7c18 <_ZTVN5spark13EthernetClassE>:
	...
   b7c20:	5b6b 000b 5b61 000b 5b57 000b 5b4d 000b     k[..a[..W[..M[..
   b7c30:	5b41 000b 5b35 000b 69f9 000b 6a01 000b     A[..5[...i...j..
   b7c40:	5b29 000b 5b21 000b 5b17 000b 5b0d 000b     )[..![...[...[..
   b7c50:	6a31 000b                                   1j..

000b7c54 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   b7c54:	0800 1810 2820 3830                         .... (08

000b7c5c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b7c64:	7061 0070 5925 252d 2d6d 6425 2554 3a48     app.%Y-%m-%dT%H:
   b7c74:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b7c84 <_ZTV9IPAddress>:
	...
   b7c8c:	601d 000b 600d 000b 600f 000b               .`...`...`..

000b7c98 <_ZTV9USBSerial>:
	...
   b7ca0:	612f 000b 6197 000b 616d 000b 5d49 000b     /a...a..ma..I]..
   b7cb0:	615f 000b 6131 000b 6141 000b 6191 000b     _a..1a..Aa...a..
   b7cc0:	6151 000b 6129 000b                         Qa..)a..

000b7cc8 <_ZTV11USARTSerial>:
	...
   b7cd0:	6257 000b 62c3 000b 629b 000b 5d49 000b     Wb...b...b..I]..
   b7ce0:	626b 000b 6287 000b 6279 000b 6295 000b     kb...b..yb...b..
   b7cf0:	6259 000b 625d 000b                         Yb..]b..

000b7cf8 <_ZTV7TwoWire>:
	...
   b7d00:	62f9 000b 6343 000b 631b 000b 62fb 000b     .b..Cc...c...b..
   b7d10:	6323 000b 632b 000b 6333 000b 633b 000b     #c..+c..3c..;c..
   b7d20:	6977 6972 676e 7200 6365 2076 7265 6f72     wiring.recv erro
   b7d30:	2072 203d 6425 0000                         r = %d..

000b7d38 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7d40:	6429 000b 644d 000b 6937 000b 645b 000b     )d..Md..7i..[d..
   b7d50:	642d 000b                                   -d..

000b7d54 <_ZTV9TCPClient>:
	...
   b7d5c:	5e9d 000b 5eb5 000b 63a5 000b 63bf 000b     .^...^...c...c..
   b7d6c:	67cd 000b 63e9 000b 6643 000b 641d 000b     .g...c..Cf...d..
   b7d7c:	66d5 000b 6515 000b 6671 000b 6881 000b     .f...e..qf...h..
   b7d8c:	6611 000b 641f 000b 63d1 000b 6461 000b     .f...d...c..ad..
   b7d9c:	64f5 000b                                   .d..

000b7da0 <_ZTVN5spark9WiFiClassE>:
	...
   b7da8:	699b 000b 6991 000b 6987 000b 693d 000b     .i...i...i..=i..
   b7db8:	697b 000b 696f 000b 69f9 000b 6a01 000b     {i..oi...i...j..
   b7dc8:	6963 000b 695b 000b 6951 000b 6947 000b     ci..[i..Qi..Gi..
   b7dd8:	6a31 000b                                   1j..

000b7ddc <_ZTVN5spark12NetworkClassE>:
	...
   b7de4:	69b9 000b 69c3 000b 69cd 000b 69d7 000b     .i...i...i...i..
   b7df4:	69e1 000b 69ed 000b 69f9 000b 6a01 000b     .i...i...i...j..
   b7e04:	6a09 000b 6a15 000b 6a1d 000b 6a27 000b     .j...j...j..'j..
   b7e14:	6a31 000b                                   1j..

000b7e18 <_ZSt7nothrow>:
	...

000b7e19 <_ZTSSt19_Sp_make_shared_tag>:
   b7e19:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b7e29:	6572 5f64 6174 0067 0000                     red_tag....

000b7e34 <_ZTISt19_Sp_make_shared_tag>:
   b7e34:	7e74 000b 7e19 000b                         t~...~..

000b7e3c <_ZTIN10__cxxabiv117__class_type_infoE>:
   b7e3c:	7ed4 000b 7e48 000b 7ef8 000b               .~..H~...~..

000b7e48 <_ZTSN10__cxxabiv117__class_type_infoE>:
   b7e48:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b7e58:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b7e68:	0045 0000                                   E...

000b7e6c <_ZTVN10__cxxabiv117__class_type_infoE>:
   b7e6c:	0000 0000 7e3c 000b 6d59 000b 6d6d 000b     ....<~..Ym..mm..
   b7e7c:	6f01 000b 6f01 000b 6dd7 000b 6d19 000b     .o...o...m...m..
   b7e8c:	6dbf 000b 6d81 000b 6d4b 000b               .m...m..Km..

000b7e98 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b7e98:	7ed4 000b 7ea4 000b 7e3c 000b               .~...~..<~..

000b7ea4 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b7ea4:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b7eb4:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b7ec4:	666e 456f 0000 0000                         nfoE....

000b7ecc <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b7ecc:	0000 0000 7e98 000b 6e01 000b 6e15 000b     .....~...n...n..
   b7edc:	6f01 000b 6f01 000b 6dd7 000b 6d19 000b     .o...o...m...m..
   b7eec:	6ed5 000b 6e61 000b 6e29 000b               .n..an..)n..

000b7ef8 <_ZTISt9type_info>:
   b7ef8:	7e74 000b 7f00 000b                         t~......

000b7f00 <_ZTSSt9type_info>:
   b7f00:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b7f10:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b7f20:	6564 0064 6d2f 746e 772f 726f 736b 6170     ded./mnt/workspa
   b7f30:	6563 772f 726f 736b 6170 6563 472f 4343     ce/workspace/GCC
   b7f40:	312d 2d30 6970 6570 696c 656e 6a2f 6e65     -10-pipeline/jen
   b7f50:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b7f60:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b7f70:	315f 3036 3136 3038 3436 2f31 7273 2f63     _1606180641/src/
   b7f80:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b7f90:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b7fa1 <link_const_variable_data_end>:
   b7fa1:	00          	.byte	0x00
	...

000b7fa4 <link_constructors_location>:
   b7fa4:	000b4231 	.word	0x000b4231
   b7fa8:	000b5b75 	.word	0x000b5b75
   b7fac:	000b5ced 	.word	0x000b5ced
   b7fb0:	000b5d39 	.word	0x000b5d39
   b7fb4:	000b5e71 	.word	0x000b5e71
   b7fb8:	000b5e81 	.word	0x000b5e81
   b7fbc:	000b5ec9 	.word	0x000b5ec9
   b7fc0:	000b69a5 	.word	0x000b69a5
   b7fc4:	000b6b09 	.word	0x000b6b09

000b7fc8 <link_constructors_end>:
	...
